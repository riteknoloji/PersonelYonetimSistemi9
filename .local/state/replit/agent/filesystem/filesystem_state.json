{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Personnel Management System\n\n## Overview\n\nThis is a comprehensive personnel management system built with React and Node.js, designed to handle employee information, leave management, shift scheduling, and attendance tracking. The application features a modern web interface with authentication, dashboard analytics, and complete CRUD operations for personnel management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript\n- **Framework**: Express.js for API routes and middleware\n- **Database**: PostgreSQL with Neon serverless connection\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect (OIDC)\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Development**: Hot module replacement with Vite integration\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon\n- **ORM Schema**: Drizzle with type-safe migrations\n- **Session Storage**: PostgreSQL table for authentication sessions\n- **Schema Structure**: Comprehensive employee data model including:\n  - Users and authentication\n  - Departments and branches\n  - Personnel with relationships\n  - Leave management system\n  - Shift scheduling and assignments\n  - Attendance tracking\n\n### Authentication and Authorization\n- **Provider**: Replit Auth using OpenID Connect\n- **Session Storage**: Secure PostgreSQL-backed sessions\n- **Role-Based Access**: User roles (personnel, admin, hr, manager, super_admin)\n- **Security Features**: HTTP-only cookies, CSRF protection, secure session management\n\n### API Design\n- **Architecture**: RESTful API with Express routes\n- **Validation**: Zod schemas for request/response validation\n- **Error Handling**: Centralized error middleware\n- **Logging**: Request/response logging with duration tracking\n- **CORS**: Configured for secure cross-origin requests\n\n### Component Architecture\n- **Layout System**: Responsive sidebar navigation with mobile support\n- **Component Library**: Custom UI components extending Radix primitives\n- **Dashboard**: Real-time statistics and activity monitoring\n- **Personnel Management**: Full CRUD operations with modal forms\n- **Responsive Design**: Mobile-first approach with breakpoint considerations\n\n### Development Workflow\n- **Monorepo Structure**: Shared types and schemas between frontend/backend\n- **Hot Reload**: Vite development server with Express integration\n- **Type Safety**: End-to-end TypeScript with shared schema definitions\n- **Path Aliases**: Configured imports for clean code organization\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth OIDC provider\n- **Hosting**: Replit development and deployment platform\n\n### UI and Design System\n- **Component Library**: Radix UI primitives for accessible components\n- **Styling**: Tailwind CSS for utility-first styling\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts integration (Inter, Geist Mono, DM Sans)\n\n### Development Tools\n- **Bundler**: Vite for fast development builds\n- **Database Tools**: Drizzle Kit for migrations and schema management\n- **Form Validation**: Zod for runtime type validation\n- **Date Handling**: date-fns for date manipulation utilities\n\n### Monitoring and Development\n- **Error Tracking**: Replit runtime error overlay for development\n- **Code Analysis**: Replit Cartographer for code insights\n- **Session Management**: connect-pg-simple for PostgreSQL session storage","size_bytes":4089},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4198},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertPersonnelSchema, \n  insertDepartmentSchema, \n  insertBranchSchema,\n  insertLeaveRequestSchema,\n  insertLeaveTypeSchema,\n  insertShiftSchema,\n  insertShiftAssignmentSchema,\n  insertAttendanceRecordSchema,\n  insertQrCodeSchema,\n  insertEducationRecordSchema,\n  insertHealthRecordSchema,\n  insertDocumentSchema,\n  insertPerformanceEvaluationSchema,\n  insertCalendarEventSchema,\n  insertNotificationSchema,\n  insertHolidaySchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport QRCode from \"qrcode\";\nimport { createHash } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Department routes\n  app.get('/api/departments', isAuthenticated, async (req, res) => {\n    try {\n      const departments = await storage.getDepartments();\n      res.json(departments);\n    } catch (error) {\n      console.error(\"Error fetching departments:\", error);\n      res.status(500).json({ message: \"Failed to fetch departments\" });\n    }\n  });\n\n  app.post('/api/departments', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertDepartmentSchema.parse(req.body);\n      const department = await storage.createDepartment(validatedData);\n      res.status(201).json(department);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating department:\", error);\n      res.status(500).json({ message: \"Failed to create department\" });\n    }\n  });\n\n  // Branch routes\n  app.get('/api/branches', isAuthenticated, async (req, res) => {\n    try {\n      const branches = await storage.getBranches();\n      res.json(branches);\n    } catch (error) {\n      console.error(\"Error fetching branches:\", error);\n      res.status(500).json({ message: \"Failed to fetch branches\" });\n    }\n  });\n\n  app.post('/api/branches', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertBranchSchema.parse(req.body);\n      const branch = await storage.createBranch(validatedData);\n      res.status(201).json(branch);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating branch:\", error);\n      res.status(500).json({ message: \"Failed to create branch\" });\n    }\n  });\n\n  // Personnel routes\n  app.get('/api/personnel', isAuthenticated, async (req, res) => {\n    try {\n      const personnel = await storage.getPersonnel();\n      res.json(personnel);\n    } catch (error) {\n      console.error(\"Error fetching personnel:\", error);\n      res.status(500).json({ message: \"Failed to fetch personnel\" });\n    }\n  });\n\n  app.get('/api/personnel/:id', isAuthenticated, async (req, res) => {\n    try {\n      const personnel = await storage.getPersonnelById(req.params.id);\n      if (!personnel) {\n        return res.status(404).json({ message: \"Personnel not found\" });\n      }\n      res.json(personnel);\n    } catch (error) {\n      console.error(\"Error fetching personnel:\", error);\n      res.status(500).json({ message: \"Failed to fetch personnel\" });\n    }\n  });\n\n  app.post('/api/personnel', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertPersonnelSchema.parse(req.body);\n      const personnel = await storage.createPersonnel(validatedData);\n      res.status(201).json(personnel);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating personnel:\", error);\n      res.status(500).json({ message: \"Failed to create personnel\" });\n    }\n  });\n\n  app.put('/api/personnel/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertPersonnelSchema.partial().parse(req.body);\n      const personnel = await storage.updatePersonnel(req.params.id, validatedData);\n      res.json(personnel);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error updating personnel:\", error);\n      res.status(500).json({ message: \"Failed to update personnel\" });\n    }\n  });\n\n  app.delete('/api/personnel/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deletePersonnel(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting personnel:\", error);\n      res.status(500).json({ message: \"Failed to delete personnel\" });\n    }\n  });\n\n  // Leave request routes\n  app.get('/api/leave-requests', isAuthenticated, async (req, res) => {\n    try {\n      const leaveRequests = await storage.getLeaveRequests();\n      res.json(leaveRequests);\n    } catch (error) {\n      console.error(\"Error fetching leave requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch leave requests\" });\n    }\n  });\n\n  app.post('/api/leave-requests', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertLeaveRequestSchema.parse(req.body);\n      const leaveRequest = await storage.createLeaveRequest(validatedData);\n      res.status(201).json(leaveRequest);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating leave request:\", error);\n      res.status(500).json({ message: \"Failed to create leave request\" });\n    }\n  });\n\n  app.put('/api/leave-requests/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertLeaveRequestSchema.partial().parse(req.body);\n      const leaveRequest = await storage.updateLeaveRequest(req.params.id, validatedData);\n      res.json(leaveRequest);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error updating leave request:\", error);\n      res.status(500).json({ message: \"Failed to update leave request\" });\n    }\n  });\n\n  // Enhanced Leave Management endpoints\n\n  // Check for leave conflicts before approval\n  app.post('/api/leave-requests/:id/check-conflicts', isAuthenticated, async (req, res) => {\n    try {\n      const leaveRequestId = req.params.id;\n      \n      // Get the leave request details\n      const allLeaveRequests = await storage.getLeaveRequests();\n      const leaveRequest = allLeaveRequests.find(lr => lr.id === leaveRequestId);\n      \n      if (!leaveRequest) {\n        return res.status(404).json({ message: \"Leave request not found\" });\n      }\n\n      // Check for conflicts with approved leave requests\n      const conflicts = allLeaveRequests.filter(lr => \n        lr.id !== leaveRequestId &&\n        lr.personnelId === leaveRequest.personnelId &&\n        lr.status === 'approved' &&\n        (\n          // Check if dates overlap\n          (new Date(lr.startDate) <= new Date(leaveRequest.endDate) &&\n           new Date(lr.endDate) >= new Date(leaveRequest.startDate))\n        )\n      );\n\n      // Check minimum staff requirements\n      const sameDate = allLeaveRequests.filter(lr => \n        lr.id !== leaveRequestId &&\n        lr.status === 'approved' &&\n        (\n          (new Date(lr.startDate) <= new Date(leaveRequest.endDate) &&\n           new Date(lr.endDate) >= new Date(leaveRequest.startDate))\n        )\n      );\n\n      const allPersonnel = await storage.getPersonnel();\n      const totalStaff = allPersonnel.length;\n      const staffOnLeave = sameDate.length;\n      const availableStaff = totalStaff - staffOnLeave;\n      const minimumRequired = Math.ceil(totalStaff * 0.3); // 30% minimum coverage\n\n      const hasConflicts = conflicts.length > 0;\n      const hasStaffingIssues = availableStaff < minimumRequired;\n\n      res.json({\n        hasConflicts,\n        conflicts: conflicts.map(c => ({\n          id: c.id,\n          startDate: c.startDate,\n          endDate: c.endDate,\n          leaveType: c.leaveTypeId\n        })),\n        hasStaffingIssues,\n        staffingInfo: {\n          totalStaff,\n          staffOnLeave,\n          availableStaff,\n          minimumRequired\n        },\n        canApprove: !hasConflicts && !hasStaffingIssues\n      });\n    } catch (error) {\n      console.error(\"Error checking leave conflicts:\", error);\n      res.status(500).json({ message: \"Failed to check leave conflicts\" });\n    }\n  });\n\n  // Get employee leave balance and usage\n  app.get('/api/leave-balance/:personnelId', isAuthenticated, async (req, res) => {\n    try {\n      const personnelId = req.params.personnelId;\n      const { year } = req.query as { year?: string };\n      const targetYear = year || new Date().getFullYear().toString();\n\n      // Get all leave types\n      const leaveTypes = await storage.getLeaveTypes();\n      \n      // Get all approved leave requests for this employee in the year\n      const allLeaveRequests = await storage.getLeaveRequests();\n      const employeeLeaves = allLeaveRequests.filter(lr => \n        lr.personnelId === personnelId &&\n        lr.status === 'approved' &&\n        new Date(lr.startDate).getFullYear().toString() === targetYear\n      );\n\n      // Calculate balance for each leave type\n      const balances = leaveTypes.map(leaveType => {\n        const usedDays = employeeLeaves\n          .filter(lr => lr.leaveTypeId === leaveType.id)\n          .reduce((total, lr) => {\n            const startDate = new Date(lr.startDate);\n            const endDate = new Date(lr.endDate);\n            const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; // +1 to include both start and end dates\n            return total + diffDays;\n          }, 0);\n\n        const entitledDays = leaveType.maxDaysPerYear || 0;\n        const remainingDays = Math.max(0, entitledDays - usedDays);\n        \n        // Calculate carry-over from previous year (max 5 days for annual leave)\n        const carryOverDays = leaveType.name.toLowerCase().includes('yıllık') ? \n          Math.min(5, remainingDays) : 0;\n\n        return {\n          leaveType: {\n            id: leaveType.id,\n            name: leaveType.name,\n            maxDaysPerYear: entitledDays\n          },\n          usedDays,\n          remainingDays,\n          carryOverDays,\n          totalAvailable: remainingDays + carryOverDays\n        };\n      });\n\n      res.json({\n        personnelId,\n        year: targetYear,\n        balances,\n        totalUsedDays: employeeLeaves.reduce((total, lr) => {\n          const startDate = new Date(lr.startDate);\n          const endDate = new Date(lr.endDate);\n          const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n          return total + diffDays;\n        }, 0)\n      });\n    } catch (error) {\n      console.error(\"Error fetching leave balance:\", error);\n      res.status(500).json({ message: \"Failed to fetch leave balance\" });\n    }\n  });\n\n  // Get department coverage report\n  app.get('/api/leave-coverage/:departmentId', isAuthenticated, async (req, res) => {\n    try {\n      const departmentId = req.params.departmentId;\n      const { startDate, endDate } = req.query as { startDate?: string; endDate?: string };\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      // Get all personnel in the department\n      const allPersonnel = await storage.getPersonnel();\n      const departmentPersonnel = allPersonnel.filter(p => p.departmentId === departmentId);\n      \n      // Get all approved leave requests in the date range\n      const allLeaveRequests = await storage.getLeaveRequests();\n      const relevantLeaves = allLeaveRequests.filter(lr => \n        lr.status === 'approved' &&\n        departmentPersonnel.some(p => p.id === lr.personnelId) &&\n        (new Date(lr.startDate) <= new Date(endDate) &&\n         new Date(lr.endDate) >= new Date(startDate))\n      );\n\n      // Calculate daily coverage\n      const coverage = [];\n      const current = new Date(startDate);\n      const end = new Date(endDate);\n\n      while (current <= end) {\n        const currentDateStr = current.toISOString().split('T')[0];\n        \n        const onLeave = relevantLeaves.filter(lr => \n          new Date(lr.startDate) <= current && \n          new Date(lr.endDate) >= current\n        );\n\n        const available = departmentPersonnel.length - onLeave.length;\n        const coveragePercentage = Math.round((available / departmentPersonnel.length) * 100);\n\n        coverage.push({\n          date: currentDateStr,\n          totalStaff: departmentPersonnel.length,\n          onLeave: onLeave.length,\n          available,\n          coveragePercentage,\n          isAdequate: coveragePercentage >= 70, // 70% minimum coverage\n          onLeaveDetails: onLeave.map(lr => ({\n            personnelId: lr.personnelId,\n            personnelName: departmentPersonnel.find(p => p.id === lr.personnelId)?.firstName + ' ' + \n                          departmentPersonnel.find(p => p.id === lr.personnelId)?.lastName,\n            leaveType: lr.leaveTypeId\n          }))\n        });\n\n        current.setDate(current.getDate() + 1);\n      }\n\n      res.json({\n        departmentId,\n        dateRange: { startDate, endDate },\n        totalPersonnel: departmentPersonnel.length,\n        coverage,\n        summary: {\n          averageCoverage: Math.round(coverage.reduce((sum, day) => sum + day.coveragePercentage, 0) / coverage.length),\n          criticalDays: coverage.filter(day => day.coveragePercentage < 70).length,\n          adequateDays: coverage.filter(day => day.coveragePercentage >= 70).length\n        }\n      });\n    } catch (error) {\n      console.error(\"Error calculating leave coverage:\", error);\n      res.status(500).json({ message: \"Failed to calculate leave coverage\" });\n    }\n  });\n\n  // Enhanced leave validation before creation/approval\n  app.post('/api/leave-requests/validate', isAuthenticated, async (req, res) => {\n    try {\n      const { personnelId, leaveTypeId, startDate, endDate } = req.body;\n\n      if (!personnelId || !leaveTypeId || !startDate || !endDate) {\n        return res.status(400).json({ message: \"All fields are required for validation\" });\n      }\n\n      const validationResults = {\n        isValid: true,\n        errors: [] as string[],\n        warnings: [] as string[],\n        info: [] as string[]\n      };\n\n      // Check date validity\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      \n      if (start > end) {\n        validationResults.isValid = false;\n        validationResults.errors.push(\"Başlangıç tarihi bitiş tarihinden sonra olamaz\");\n      }\n\n      if (start < new Date()) {\n        validationResults.warnings.push(\"Geçmiş tarih için izin talebi oluşturuyorsunuz\");\n      }\n\n      // Check leave duration\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n      \n      if (diffDays > 30) {\n        validationResults.warnings.push(\"30 günden uzun izin talepleri özel onay gerektirebilir\");\n      }\n\n      // Check employee balance\n      const leaveTypes = await storage.getLeaveTypes();\n      const leaveType = leaveTypes.find(lt => lt.id === leaveTypeId);\n      \n      if (leaveType) {\n        const allLeaveRequests = await storage.getLeaveRequests();\n        const currentYear = start.getFullYear().toString();\n        \n        const employeeLeaves = allLeaveRequests.filter(lr => \n          lr.personnelId === personnelId &&\n          lr.status === 'approved' &&\n          new Date(lr.startDate).getFullYear().toString() === currentYear\n        );\n\n        const usedDays = employeeLeaves\n          .filter(lr => lr.leaveTypeId === leaveTypeId)\n          .reduce((total, lr) => {\n            const s = new Date(lr.startDate);\n            const e = new Date(lr.endDate);\n            const days = Math.ceil((e.getTime() - s.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n            return total + days;\n          }, 0);\n\n        const maxDays = leaveType.maxDaysPerYear || 0;\n        const remainingDays = maxDays - usedDays;\n\n        if (diffDays > remainingDays) {\n          validationResults.isValid = false;\n          validationResults.errors.push(`Yeterli izin bakiyeniz yok. Kalan: ${remainingDays} gün, Talep edilen: ${diffDays} gün`);\n        } else if (diffDays > remainingDays * 0.8) {\n          validationResults.warnings.push(`İzin bakiyenizin büyük kısmını kullanacaksınız. Kalan: ${remainingDays} gün`);\n        }\n\n        validationResults.info.push(`${leaveType.name} - Kullanılan: ${usedDays}/${maxDays} gün`);\n      }\n\n      // Check for conflicts\n      const allLeaveRequests = await storage.getLeaveRequests();\n      const conflicts = allLeaveRequests.filter(lr => \n        lr.personnelId === personnelId &&\n        lr.status === 'approved' &&\n        (new Date(lr.startDate) <= end && new Date(lr.endDate) >= start)\n      );\n\n      if (conflicts.length > 0) {\n        validationResults.isValid = false;\n        validationResults.errors.push(\"Seçtiğiniz tarihler mevcut izinlerinizle çakışıyor\");\n      }\n\n      res.json(validationResults);\n    } catch (error) {\n      console.error(\"Error validating leave request:\", error);\n      res.status(500).json({ message: \"Failed to validate leave request\" });\n    }\n  });\n\n  // Enhanced Shift Management endpoints\n\n  // Shift Templates\n  app.get('/api/shift-templates', isAuthenticated, async (req, res) => {\n    try {\n      // Predefined shift templates\n      const templates = [\n        {\n          id: 'morning-shift',\n          name: 'Sabah Vardiyası',\n          description: 'Standart sabah vardiyası',\n          startTime: '08:00',\n          endTime: '16:00',\n          workingHours: '8',\n          color: '#3B82F6', // Blue\n          isDefault: true\n        },\n        {\n          id: 'afternoon-shift',\n          name: 'Öğleden Sonra Vardiyası',\n          description: 'Öğleden sonra vardiyası',\n          startTime: '16:00',\n          endTime: '00:00',\n          workingHours: '8',\n          color: '#F59E0B', // Yellow\n          isDefault: true\n        },\n        {\n          id: 'night-shift',\n          name: 'Gece Vardiyası',\n          description: 'Gece vardiyası',\n          startTime: '00:00',\n          endTime: '08:00',\n          workingHours: '8',\n          color: '#6366F1', // Indigo\n          isDefault: true\n        },\n        {\n          id: 'part-time-morning',\n          name: 'Yarı Zamanlı Sabah',\n          description: 'Yarı zamanlı sabah vardiyası',\n          startTime: '09:00',\n          endTime: '13:00',\n          workingHours: '4',\n          color: '#10B981', // Green\n          isDefault: false\n        },\n        {\n          id: 'part-time-afternoon',\n          name: 'Yarı Zamanlı Öğleden Sonra',\n          description: 'Yarı zamanlı öğleden sonra vardiyası',\n          startTime: '14:00',\n          endTime: '18:00',\n          workingHours: '4',\n          color: '#F97316', // Orange\n          isDefault: false\n        },\n        {\n          id: 'weekend-shift',\n          name: 'Hafta Sonu Vardiyası',\n          description: 'Hafta sonu özel vardiyası',\n          startTime: '10:00',\n          endTime: '18:00',\n          workingHours: '8',\n          color: '#8B5CF6', // Purple\n          isDefault: false\n        }\n      ];\n\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching shift templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch shift templates\" });\n    }\n  });\n\n  // Bulk shift assignment from template\n  app.post('/api/shift-assignments/bulk', isAuthenticated, async (req, res) => {\n    try {\n      const { assignments, templateId } = req.body;\n\n      if (!assignments || !Array.isArray(assignments)) {\n        return res.status(400).json({ message: \"assignments array is required\" });\n      }\n\n      const results = [];\n      const errors = [];\n\n      for (const assignment of assignments) {\n        try {\n          const shiftAssignment = await storage.createShiftAssignment({\n            personnelId: assignment.personnelId,\n            shiftId: assignment.shiftId,\n            date: assignment.date,\n            isActive: true\n          });\n          results.push(shiftAssignment);\n        } catch (error) {\n          errors.push({\n            personnelId: assignment.personnelId,\n            date: assignment.date,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      res.json({\n        message: `${results.length} atama başarıyla oluşturuldu`,\n        successCount: results.length,\n        errorCount: errors.length,\n        assignments: results,\n        errors: errors\n      });\n    } catch (error) {\n      console.error(\"Error creating bulk assignments:\", error);\n      res.status(500).json({ message: \"Failed to create bulk assignments\" });\n    }\n  });\n\n  // Shift change requests\n  app.get('/api/shift-change-requests', isAuthenticated, async (req, res) => {\n    try {\n      // This would typically fetch from a shift_change_requests table\n      // For now, return empty array as the table doesn't exist yet\n      const changeRequests = [];\n      res.json(changeRequests);\n    } catch (error) {\n      console.error(\"Error fetching shift change requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch shift change requests\" });\n    }\n  });\n\n  app.post('/api/shift-change-requests', isAuthenticated, async (req, res) => {\n    try {\n      const { originalAssignmentId, requestedShiftId, requestedDate, reason } = req.body;\n      const userId = req.user?.claims?.sub;\n\n      // For now, we'll simulate this functionality\n      // In a real implementation, you'd store this in a shift_change_requests table\n      const changeRequest = {\n        id: `change-${Date.now()}`,\n        originalAssignmentId,\n        requestedShiftId,\n        requestedDate,\n        reason,\n        requesterId: userId,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        message: \"Vardiya değişiklik talebi başarıyla oluşturuldu\"\n      };\n\n      res.status(201).json(changeRequest);\n    } catch (error) {\n      console.error(\"Error creating shift change request:\", error);\n      res.status(500).json({ message: \"Failed to create shift change request\" });\n    }\n  });\n\n  // Enhanced shift calendar data\n  app.get('/api/shift-calendar', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query as { startDate?: string; endDate?: string };\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      // Get all shift assignments in date range\n      const allAssignments = await storage.getShiftAssignments();\n      const assignments = allAssignments.filter(assignment => \n        assignment.date >= startDate && assignment.date <= endDate\n      );\n\n      // Get all shifts for color coding\n      const shifts = await storage.getShifts();\n      const personnel = await storage.getPersonnel();\n\n      // Enrich assignments with shift and personnel details\n      const enrichedAssignments = assignments.map(assignment => {\n        const shift = shifts.find(s => s.id === assignment.shiftId);\n        const person = personnel.find(p => p.id === assignment.personnelId);\n        \n        return {\n          ...assignment,\n          shift: {\n            id: shift?.id,\n            name: shift?.name,\n            startTime: shift?.startTime,\n            endTime: shift?.endTime,\n            color: getShiftColor(shift?.name || '')\n          },\n          personnel: {\n            id: person?.id,\n            name: `${person?.firstName || ''} ${person?.lastName || ''}`.trim(),\n            position: person?.position\n          }\n        };\n      });\n\n      // Group by date for easier frontend processing\n      const calendarData = {};\n      enrichedAssignments.forEach(assignment => {\n        const date = assignment.date;\n        if (!calendarData[date]) {\n          calendarData[date] = [];\n        }\n        calendarData[date].push(assignment);\n      });\n\n      res.json({\n        startDate,\n        endDate,\n        assignments: enrichedAssignments,\n        calendarData,\n        statistics: {\n          totalAssignments: enrichedAssignments.length,\n          uniquePersonnel: new Set(enrichedAssignments.map(a => a.personnelId)).size,\n          shiftsUsed: new Set(enrichedAssignments.map(a => a.shiftId)).size\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching shift calendar data:\", error);\n      res.status(500).json({ message: \"Failed to fetch shift calendar data\" });\n    }\n  });\n\n  // Helper function for shift colors\n  function getShiftColor(shiftName: string): string {\n    const colors = {\n      'sabah': '#3B82F6',    // Blue\n      'morning': '#3B82F6',   // Blue\n      'öğleden': '#F59E0B',   // Yellow\n      'afternoon': '#F59E0B', // Yellow\n      'gece': '#6366F1',      // Indigo\n      'night': '#6366F1',     // Indigo\n      'yarı': '#10B981',      // Green\n      'part': '#10B981',      // Green\n      'hafta': '#8B5CF6',     // Purple\n      'weekend': '#8B5CF6'    // Purple\n    };\n\n    const lowerName = shiftName.toLowerCase();\n    for (const [key, color] of Object.entries(colors)) {\n      if (lowerName.includes(key)) {\n        return color;\n      }\n    }\n    return '#6B7280'; // Default gray\n  }\n\n  // Shift coverage analysis\n  app.get('/api/shift-coverage/:date', isAuthenticated, async (req, res) => {\n    try {\n      const { date } = req.params;\n      \n      // Get all assignments for the date\n      const allAssignments = await storage.getShiftAssignments();\n      const dayAssignments = allAssignments.filter(assignment => assignment.date === date);\n\n      // Get shifts and personnel\n      const shifts = await storage.getShifts();\n      const personnel = await storage.getPersonnel();\n\n      // Calculate coverage for each shift\n      const coverageAnalysis = shifts.map(shift => {\n        const shiftAssignments = dayAssignments.filter(assignment => \n          assignment.shiftId === shift.id && assignment.isActive\n        );\n        \n        return {\n          shift: {\n            id: shift.id,\n            name: shift.name,\n            startTime: shift.startTime,\n            endTime: shift.endTime,\n            color: getShiftColor(shift.name || '')\n          },\n          assignedPersonnel: shiftAssignments.map(assignment => {\n            const person = personnel.find(p => p.id === assignment.personnelId);\n            return {\n              id: person?.id,\n              name: `${person?.firstName || ''} ${person?.lastName || ''}`.trim(),\n              position: person?.position\n            };\n          }),\n          assignedCount: shiftAssignments.length,\n          requiredCount: 2, // Default requirement - this could be configurable\n          coveragePercentage: Math.round((shiftAssignments.length / 2) * 100),\n          isAdequate: shiftAssignments.length >= 2\n        };\n      });\n\n      const totalRequired = coverageAnalysis.reduce((sum, shift) => sum + shift.requiredCount, 0);\n      const totalAssigned = coverageAnalysis.reduce((sum, shift) => sum + shift.assignedCount, 0);\n\n      res.json({\n        date,\n        shifts: coverageAnalysis,\n        summary: {\n          totalRequired,\n          totalAssigned,\n          overallCoveragePercentage: totalRequired > 0 ? Math.round((totalAssigned / totalRequired) * 100) : 0,\n          adequateShifts: coverageAnalysis.filter(shift => shift.isAdequate).length,\n          inadequateShifts: coverageAnalysis.filter(shift => !shift.isAdequate).length\n        }\n      });\n    } catch (error) {\n      console.error(\"Error analyzing shift coverage:\", error);\n      res.status(500).json({ message: \"Failed to analyze shift coverage\" });\n    }\n  });\n\n  // Leave types routes\n  app.get('/api/leave-types', isAuthenticated, async (req, res) => {\n    try {\n      let leaveTypes = await storage.getLeaveTypes();\n      \n      // Eğer hiç izin türü yoksa varsayılan olanları ekle\n      if (leaveTypes.length === 0) {\n        const defaultTypes = [\n          { name: \"Yıllık İzin\", description: \"Çalışanın yıllık izin hakkı\", maxDays: \"20\", isActive: true },\n          { name: \"Hastalık İzni\", description: \"Sağlık sorunu nedeniyle alınan izin\", maxDays: \"30\", isActive: true },\n          { name: \"Doğum İzni\", description: \"Doğum öncesi ve sonrası izin\", maxDays: \"98\", isActive: true },\n          { name: \"Babalık İzni\", description: \"Baba adayları için izin\", maxDays: \"10\", isActive: true },\n          { name: \"Acil Durum İzni\", description: \"Acil durumlarda alınan kısa süreli izin\", maxDays: \"3\", isActive: true }\n        ];\n        \n        for (const typeData of defaultTypes) {\n          await storage.createLeaveType(typeData);\n        }\n        \n        leaveTypes = await storage.getLeaveTypes();\n      }\n      \n      res.json(leaveTypes);\n    } catch (error) {\n      console.error(\"Error fetching leave types:\", error);\n      res.status(500).json({ message: \"Failed to fetch leave types\" });\n    }\n  });\n\n  app.post('/api/leave-types', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertLeaveTypeSchema.parse(req.body);\n      const leaveType = await storage.createLeaveType(validatedData);\n      res.status(201).json(leaveType);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating leave type:\", error);\n      res.status(500).json({ message: \"Failed to create leave type\" });\n    }\n  });\n\n  // Shift routes\n  app.get('/api/shifts', isAuthenticated, async (req, res) => {\n    try {\n      let shifts = await storage.getShifts();\n      \n      // Eğer hiç vardiya yoksa varsayılan olanları ekle\n      if (shifts.length === 0) {\n        const defaultShifts = [\n          { \n            name: \"Sabah Vardiyası\", \n            description: \"Normal mesai sabah vardiyası\", \n            startTime: \"08:00\", \n            endTime: \"17:00\", \n            workingHours: \"8\", \n            isActive: true \n          },\n          { \n            name: \"Öğle Vardiyası\", \n            description: \"Öğle vardiyası\", \n            startTime: \"12:00\", \n            endTime: \"21:00\", \n            workingHours: \"8\", \n            isActive: true \n          },\n          { \n            name: \"Gece Vardiyası\", \n            description: \"Gece vardiyası\", \n            startTime: \"22:00\", \n            endTime: \"06:00\", \n            workingHours: \"8\", \n            isActive: true \n          }\n        ];\n        \n        for (const shiftData of defaultShifts) {\n          await storage.createShift(shiftData);\n        }\n        \n        shifts = await storage.getShifts();\n      }\n      \n      res.json(shifts);\n    } catch (error) {\n      console.error(\"Error fetching shifts:\", error);\n      res.status(500).json({ message: \"Failed to fetch shifts\" });\n    }\n  });\n\n  app.post('/api/shifts', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertShiftSchema.parse(req.body);\n      const shift = await storage.createShift(validatedData);\n      res.status(201).json(shift);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating shift:\", error);\n      res.status(500).json({ message: \"Failed to create shift\" });\n    }\n  });\n\n  app.delete('/api/shifts/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteShift(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting shift:\", error);\n      res.status(500).json({ message: \"Failed to delete shift\" });\n    }\n  });\n\n  app.post('/api/shifts', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertShiftSchema.parse(req.body);\n      const shift = await storage.createShift(validatedData);\n      res.status(201).json(shift);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating shift:\", error);\n      res.status(500).json({ message: \"Failed to create shift\" });\n    }\n  });\n\n  // Shift assignment routes\n  app.get('/api/shift-assignments', isAuthenticated, async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      const assignments = await storage.getShiftAssignments(date);\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching shift assignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch shift assignments\" });\n    }\n  });\n\n  app.post('/api/shift-assignments', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertShiftAssignmentSchema.parse(req.body);\n      const assignment = await storage.createShiftAssignment(validatedData);\n      res.status(201).json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating shift assignment:\", error);\n      res.status(500).json({ message: \"Failed to create shift assignment\" });\n    }\n  });\n\n  app.delete('/api/shift-assignments/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteShiftAssignment(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting shift assignment:\", error);\n      res.status(500).json({ message: \"Failed to delete shift assignment\" });\n    }\n  });\n\n  // Attendance routes\n  app.get('/api/attendance', isAuthenticated, async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      const records = await storage.getAttendanceRecords(date);\n      res.json(records);\n    } catch (error) {\n      console.error(\"Error fetching attendance records:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance records\" });\n    }\n  });\n\n  app.post('/api/attendance', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertAttendanceRecordSchema.parse(req.body);\n      const record = await storage.createAttendanceRecord(validatedData);\n      res.status(201).json(record);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating attendance record:\", error);\n      res.status(500).json({ message: \"Failed to create attendance record\" });\n    }\n  });\n\n  // QR Code routes\n  app.get('/api/qr-codes', isAuthenticated, async (req, res) => {\n    try {\n      const branchId = req.query.branchId as string;\n      const qrCodes = await storage.getQrCodes(branchId);\n      res.json(qrCodes);\n    } catch (error) {\n      console.error(\"Error fetching QR codes:\", error);\n      res.status(500).json({ message: \"Failed to fetch QR codes\" });\n    }\n  });\n\n  app.post('/api/qr-codes', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertQrCodeSchema.parse(req.body);\n      \n      // Generate unique code value with timestamp and branch info\n      const timestamp = Date.now().toString();\n      const branchInfo = validatedData.branchId?.slice(-4) || \"0000\";\n      const randomString = Math.random().toString(36).substring(2, 8);\n      const codeValue = `QR-${branchInfo}-${timestamp}-${randomString}`;\n      \n      // Create hash for security\n      const securityHash = createHash('sha256')\n        .update(`${codeValue}-${validatedData.branchId}-${process.env.QR_SECRET || 'default_secret'}`)\n        .digest('hex')\n        .substring(0, 16);\n\n      const qrCodeData = {\n        ...validatedData,\n        codeValue,\n        securityHash,\n      };\n\n      const qrCode = await storage.createQrCode(qrCodeData);\n      \n      // Generate QR code image\n      try {\n        const qrImageData = await QRCode.toDataURL(JSON.stringify({\n          code: codeValue,\n          branch: validatedData.branchId,\n          hash: securityHash,\n          timestamp: Date.now()\n        }), {\n          width: 300,\n          margin: 2,\n          color: {\n            dark: '#000000',\n            light: '#FFFFFF'\n          }\n        });\n\n        res.status(201).json({\n          ...qrCode,\n          qrImage: qrImageData\n        });\n      } catch (qrError) {\n        console.error(\"Error generating QR image:\", qrError);\n        res.status(201).json(qrCode);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating QR code:\", error);\n      res.status(500).json({ message: \"Failed to create QR code\" });\n    }\n  });\n\n  app.put('/api/qr-codes/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertQrCodeSchema.partial().parse(req.body);\n      const qrCode = await storage.updateQrCode(req.params.id, validatedData);\n      res.json(qrCode);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error updating QR code:\", error);\n      res.status(500).json({ message: \"Failed to update QR code\" });\n    }\n  });\n\n  app.delete('/api/qr-codes/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteQrCode(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deactivating QR code:\", error);\n      res.status(500).json({ message: \"Failed to deactivate QR code\" });\n    }\n  });\n\n  // QR Code scanning and attendance\n  app.post('/api/qr-codes/scan', isAuthenticated, async (req, res) => {\n    try {\n      const { qrData, personnelId, type, ipAddress, userAgent } = req.body;\n\n      // Parse QR data\n      let scannedData;\n      try {\n        scannedData = JSON.parse(qrData);\n      } catch (parseError) {\n        return res.status(400).json({ message: \"Invalid QR code format\" });\n      }\n\n      // Validate QR code\n      const qrCode = await storage.getActiveQrCodeByValue(scannedData.code);\n      if (!qrCode) {\n        return res.status(404).json({ message: \"QR code not found or inactive\" });\n      }\n\n      // Verify security hash\n      const expectedHash = createHash('sha256')\n        .update(`${scannedData.code}-${scannedData.branch}-${process.env.QR_SECRET || 'default_secret'}`)\n        .digest('hex')\n        .substring(0, 16);\n\n      if (scannedData.hash !== expectedHash) {\n        return res.status(401).json({ message: \"Invalid QR code security hash\" });\n      }\n\n      // Check if QR code is expired (24 hours validity)\n      const qrCodeAge = Date.now() - new Date(qrCode.createdAt).getTime();\n      const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n      if (qrCodeAge > maxAge) {\n        return res.status(410).json({ message: \"QR code expired\" });\n      }\n\n      // Create attendance record\n      const now = new Date();\n      const today = now.toISOString().split('T')[0];\n      const currentTime = now.toTimeString().split(' ')[0];\n\n      const attendanceRecord = await storage.createAttendanceRecord({\n        personnelId,\n        date: today,\n        timeIn: type === 'entry' ? currentTime : undefined,\n        timeOut: type === 'exit' ? currentTime : undefined,\n        qrCodeId: qrCode.id,\n        ipAddress,\n        userAgent,\n        location: qrCode.location,\n        notes: `QR code scan - ${type}`,\n      });\n\n      // Get personnel info for response\n      const personnel = await storage.getPersonnelById(personnelId);\n\n      res.json({\n        success: true,\n        message: `${type === 'entry' ? 'Giriş' : 'Çıkış'} başarıyla kaydedildi`,\n        attendanceRecord,\n        personnel: personnel ? {\n          firstName: personnel.firstName,\n          lastName: personnel.lastName,\n          employeeId: personnel.employeeId\n        } : null,\n        timestamp: now.toISOString(),\n        location: qrCode.location\n      });\n\n    } catch (error) {\n      console.error(\"Error processing QR code scan:\", error);\n      res.status(500).json({ message: \"Failed to process QR code scan\" });\n    }\n  });\n\n  // Generate fresh QR code for a branch\n  app.post('/api/qr-codes/:id/regenerate', isAuthenticated, async (req, res) => {\n    try {\n      const qrCodeId = req.params.id;\n      const { pinCode } = req.body;\n\n      // Get existing QR code\n      const existingQrCodes = await storage.getQrCodes();\n      const existingQrCode = existingQrCodes.find(qr => qr.id === qrCodeId);\n      \n      if (!existingQrCode) {\n        return res.status(404).json({ message: \"QR code not found\" });\n      }\n\n      // Verify PIN if provided and required\n      if (existingQrCode.pinCode && existingQrCode.pinCode !== pinCode) {\n        return res.status(401).json({ message: \"Invalid PIN code\" });\n      }\n\n      // Generate new code value\n      const timestamp = Date.now().toString();\n      const branchInfo = existingQrCode.branchId?.slice(-4) || \"0000\";\n      const randomString = Math.random().toString(36).substring(2, 8);\n      const newCodeValue = `QR-${branchInfo}-${timestamp}-${randomString}`;\n      \n      // Create new security hash\n      const newSecurityHash = createHash('sha256')\n        .update(`${newCodeValue}-${existingQrCode.branchId}-${process.env.QR_SECRET || 'default_secret'}`)\n        .digest('hex')\n        .substring(0, 16);\n\n      // Update QR code\n      const updatedQrCode = await storage.updateQrCode(qrCodeId, {\n        codeValue: newCodeValue,\n        securityHash: newSecurityHash,\n      });\n\n      // Generate new QR image\n      const qrImageData = await QRCode.toDataURL(JSON.stringify({\n        code: newCodeValue,\n        branch: existingQrCode.branchId,\n        hash: newSecurityHash,\n        timestamp: Date.now()\n      }), {\n        width: 300,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n\n      res.json({\n        ...updatedQrCode,\n        qrImage: qrImageData,\n        message: \"QR kod başarıyla yenilendi\"\n      });\n\n    } catch (error) {\n      console.error(\"Error regenerating QR code:\", error);\n      res.status(500).json({ message: \"Failed to regenerate QR code\" });\n    }\n  });\n\n  // Calendar Events routes\n  app.get('/api/calendar/events', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query as { startDate?: string; endDate?: string };\n      const events = await storage.getCalendarEvents(startDate, endDate);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching calendar events:\", error);\n      res.status(500).json({ message: \"Failed to fetch calendar events\" });\n    }\n  });\n\n  app.post('/api/calendar/events', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertCalendarEventSchema.parse(req.body);\n      \n      // Set organizer to current user\n      const userId = req.user?.claims?.sub;\n      if (userId) {\n        validatedData.organizerId = userId;\n      }\n\n      const event = await storage.createCalendarEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating calendar event:\", error);\n      res.status(500).json({ message: \"Failed to create calendar event\" });\n    }\n  });\n\n  app.put('/api/calendar/events/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertCalendarEventSchema.partial().parse(req.body);\n      const event = await storage.updateCalendarEvent(req.params.id, validatedData);\n      res.json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error updating calendar event:\", error);\n      res.status(500).json({ message: \"Failed to update calendar event\" });\n    }\n  });\n\n  app.delete('/api/calendar/events/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCalendarEvent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting calendar event:\", error);\n      res.status(500).json({ message: \"Failed to delete calendar event\" });\n    }\n  });\n\n  // Holidays routes\n  app.get('/api/calendar/holidays', isAuthenticated, async (req, res) => {\n    try {\n      const { year } = req.query as { year?: string };\n      const holidays = await storage.getHolidays(year);\n      res.json(holidays);\n    } catch (error) {\n      console.error(\"Error fetching holidays:\", error);\n      res.status(500).json({ message: \"Failed to fetch holidays\" });\n    }\n  });\n\n  app.post('/api/calendar/holidays', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertHolidaySchema.parse(req.body);\n      const holiday = await storage.createHoliday(validatedData);\n      res.status(201).json(holiday);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating holiday:\", error);\n      res.status(500).json({ message: \"Failed to create holiday\" });\n    }\n  });\n\n  // Turkish holidays data for 2025\n  app.post('/api/calendar/holidays/populate-turkish', isAuthenticated, async (req, res) => {\n    try {\n      const { year } = req.body;\n      const targetYear = year || '2025';\n\n      // Turkish holidays for 2025\n      const turkishHolidays = [\n        { name: 'Yılbaşı', date: `${targetYear}-01-01`, type: 'public', isRecurring: true },\n        { name: 'Ulusal Egemenlik ve Çocuk Bayramı', date: `${targetYear}-04-23`, type: 'public', isRecurring: true },\n        { name: 'Emek ve Dayanışma Günü', date: `${targetYear}-05-01`, type: 'public', isRecurring: true },\n        { name: 'Atatürk\\'ü Anma, Gençlik ve Spor Bayramı', date: `${targetYear}-05-19`, type: 'public', isRecurring: true },\n        { name: 'Demokrasi ve Milli Birlik Günü', date: `${targetYear}-07-15`, type: 'public', isRecurring: true },\n        { name: 'Zafer Bayramı', date: `${targetYear}-08-30`, type: 'public', isRecurring: true },\n        { name: 'Cumhuriyet Bayramı', date: `${targetYear}-10-29`, type: 'public', isRecurring: true },\n        \n        // Religious holidays for 2025 (approximate dates - these change each year)\n        { name: 'Ramazan Bayramı 1. Gün', date: `${targetYear}-03-31`, type: 'religious', isRecurring: false },\n        { name: 'Ramazan Bayramı 2. Gün', date: `${targetYear}-04-01`, type: 'religious', isRecurring: false },\n        { name: 'Ramazan Bayramı 3. Gün', date: `${targetYear}-04-02`, type: 'religious', isRecurring: false },\n        { name: 'Kurban Bayramı 1. Gün', date: `${targetYear}-06-07`, type: 'religious', isRecurring: false },\n        { name: 'Kurban Bayramı 2. Gün', date: `${targetYear}-06-08`, type: 'religious', isRecurring: false },\n        { name: 'Kurban Bayramı 3. Gün', date: `${targetYear}-06-09`, type: 'religious', isRecurring: false },\n        { name: 'Kurban Bayramı 4. Gün', date: `${targetYear}-06-10`, type: 'religious', isRecurring: false },\n      ];\n\n      const createdHolidays = [];\n      for (const holidayData of turkishHolidays) {\n        const holiday = await storage.createHoliday({\n          ...holidayData,\n          year: targetYear,\n          description: `${targetYear} yılı Türkiye resmi tatili`\n        });\n        createdHolidays.push(holiday);\n      }\n\n      res.json({\n        message: `${targetYear} yılı Türkiye tatilleri başarıyla eklendi`,\n        count: createdHolidays.length,\n        holidays: createdHolidays\n      });\n    } catch (error) {\n      console.error(\"Error populating Turkish holidays:\", error);\n      res.status(500).json({ message: \"Failed to populate Turkish holidays\" });\n    }\n  });\n\n  // Notification System routes\n  app.get('/api/notifications', isAuthenticated, async (req, res) => {\n    try {\n      const { status, type, recipientId } = req.query as { \n        status?: string; \n        type?: string; \n        recipientId?: string; \n      };\n      \n      const notifications = await storage.getNotifications({ status, type, recipientId });\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post('/api/notifications', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertNotificationSchema.parse(req.body);\n      \n      // Set sender to current user\n      const userId = req.user?.claims?.sub;\n      if (userId) {\n        validatedData.senderId = userId;\n      }\n\n      const notification = await storage.createNotification(validatedData);\n      res.status(201).json(notification);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating notification:\", error);\n      res.status(500).json({ message: \"Failed to create notification\" });\n    }\n  });\n\n  app.put('/api/notifications/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertNotificationSchema.partial().parse(req.body);\n      const notification = await storage.updateNotification(req.params.id, validatedData);\n      res.json(notification);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error updating notification:\", error);\n      res.status(500).json({ message: \"Failed to update notification\" });\n    }\n  });\n\n  app.delete('/api/notifications/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteNotification(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting notification:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  // Mark notification as read\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req, res) => {\n    try {\n      const notification = await storage.updateNotification(req.params.id, {\n        status: 'read',\n        readAt: new Date().toISOString()\n      });\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Send notification (immediate send)\n  app.post('/api/notifications/:id/send', isAuthenticated, async (req, res) => {\n    try {\n      const notificationId = req.params.id;\n      \n      // Get notification details\n      const notifications = await storage.getNotifications({ id: notificationId });\n      const notification = notifications[0];\n      \n      if (!notification) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n\n      // Here you would integrate with SMS/Push notification services\n      // For now, we'll just update the status to 'sent'\n      const updatedNotification = await storage.updateNotification(notificationId, {\n        status: 'sent',\n        sentAt: new Date().toISOString()\n      });\n\n      res.json({\n        ...updatedNotification,\n        message: \"Bildirim başarıyla gönderildi\"\n      });\n    } catch (error) {\n      console.error(\"Error sending notification:\", error);\n      res.status(500).json({ message: \"Failed to send notification\" });\n    }\n  });\n\n  // Send bulk notifications\n  app.post('/api/notifications/send-bulk', isAuthenticated, async (req, res) => {\n    try {\n      const { recipientIds, title, content, type, priority } = req.body;\n      \n      if (!recipientIds || !Array.isArray(recipientIds) || !title || !content) {\n        return res.status(400).json({ \n          message: \"recipientIds (array), title ve content alanları gereklidir\" \n        });\n      }\n\n      const userId = req.user?.claims?.sub;\n      const results = [];\n\n      // Create notification for each recipient\n      for (const recipientId of recipientIds) {\n        const notificationData = {\n          title,\n          content,\n          type: type || 'info',\n          priority: priority || 'normal',\n          recipientId,\n          senderId: userId,\n          status: 'sent' as const,\n          sentAt: new Date().toISOString()\n        };\n\n        const notification = await storage.createNotification(notificationData);\n        results.push(notification);\n      }\n\n      res.json({\n        message: `${results.length} kişiye bildirim gönderildi`,\n        count: results.length,\n        notifications: results\n      });\n    } catch (error) {\n      console.error(\"Error sending bulk notifications:\", error);\n      res.status(500).json({ message: \"Failed to send bulk notifications\" });\n    }\n  });\n\n  // Notification templates\n  app.get('/api/notifications/templates', isAuthenticated, async (req, res) => {\n    try {\n      // Predefined notification templates\n      const templates = [\n        {\n          id: 'leave-approved',\n          name: 'İzin Onaylandı',\n          title: 'İzin Başvurunuz Onaylandı',\n          content: 'Merhaba {employee_name}, {start_date} - {end_date} tarihleri arası izin başvurunuz onaylanmıştır.',\n          type: 'success',\n          variables: ['employee_name', 'start_date', 'end_date']\n        },\n        {\n          id: 'leave-rejected',\n          name: 'İzin Reddedildi',\n          title: 'İzin Başvurunuz Reddedildi',\n          content: 'Merhaba {employee_name}, {start_date} - {end_date} tarihleri arası izin başvurunuz reddedilmiştir. Sebep: {reason}',\n          type: 'warning',\n          variables: ['employee_name', 'start_date', 'end_date', 'reason']\n        },\n        {\n          id: 'shift-reminder',\n          name: 'Vardiya Hatırlatması',\n          title: 'Vardiya Hatırlatması',\n          content: 'Merhaba {employee_name}, yarın {date} tarihinde {start_time}-{end_time} vardiyasınız bulunmaktadır.',\n          type: 'info',\n          variables: ['employee_name', 'date', 'start_time', 'end_time']\n        },\n        {\n          id: 'document-expiry',\n          name: 'Belge Süresi Dolma',\n          title: 'Belge Süresi Dolacak',\n          content: 'Merhaba {employee_name}, {document_name} belgenizin süresi {expiry_date} tarihinde dolacaktır. Lütfen yenileyiniz.',\n          type: 'warning',\n          variables: ['employee_name', 'document_name', 'expiry_date']\n        },\n        {\n          id: 'birthday-wish',\n          name: 'Doğum Günü Tebriği',\n          title: 'Doğum Günün Kutlu Olsun!',\n          content: 'Sevgili {employee_name}, doğum gününüz kutlu olsun! Size sağlık, mutluluk ve başarılar dileriz.',\n          type: 'celebration',\n          variables: ['employee_name']\n        }\n      ];\n\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching notification templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch notification templates\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":57009},"server/storage.ts":{"content":"import {\n  users,\n  departments,\n  branches,\n  personnel,\n  leaveTypes,\n  leaveRequests,\n  shifts,\n  shiftAssignments,\n  attendanceRecords,\n  educationRecords,\n  healthRecords,\n  documents,\n  performanceEvaluations,\n  qrCodes,\n  calendarEvents,\n  holidays,\n  notifications,\n  mobileDevices,\n  systemSettings,\n  shiftTemplates,\n  shiftChangeRequests,\n  userSessions,\n  userDevices,\n  securityLogs,\n  loginAttempts,\n  twoFactorBackupCodes,\n  type User,\n  type UpsertUser,\n  type Department,\n  type InsertDepartment,\n  type Branch,\n  type InsertBranch,\n  type Personnel,\n  type InsertPersonnel,\n  type PersonnelWithRelations,\n  type LeaveType,\n  type InsertLeaveType,\n  type LeaveRequest,\n  type InsertLeaveRequest,\n  type LeaveRequestWithRelations,\n  type Shift,\n  type InsertShift,\n  type ShiftAssignment,\n  type InsertShiftAssignment,\n  type ShiftAssignmentWithRelations,\n  type AttendanceRecord,\n  type InsertAttendanceRecord,\n  type EducationRecord,\n  type InsertEducationRecord,\n  type HealthRecord,\n  type InsertHealthRecord,\n  type Document,\n  type InsertDocument,\n  type PerformanceEvaluation,\n  type InsertPerformanceEvaluation,\n  type PerformanceEvaluationWithRelations,\n  type QrCode,\n  type InsertQrCode,\n  type CalendarEvent,\n  type InsertCalendarEvent,\n  type CalendarEventWithRelations,\n  type Holiday,\n  type InsertHoliday,\n  type Notification,\n  type InsertNotification,\n  type NotificationWithRelations,\n  type MobileDevice,\n  type InsertMobileDevice,\n  type SystemSetting,\n  type InsertSystemSetting,\n  type ShiftTemplate,\n  type InsertShiftTemplate,\n  type ShiftChangeRequest,\n  type InsertShiftChangeRequest,\n  type ShiftChangeRequestWithRelations,\n  type UserSession,\n  type InsertUserSession,\n  type UserDevice,\n  type InsertUserDevice,\n  type SecurityLog,\n  type InsertSecurityLog,\n  type LoginAttempt,\n  type InsertLoginAttempt,\n  type TwoFactorBackupCode,\n  type InsertTwoFactorBackupCode,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations - mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Security operations\n  logSecurityEvent(event: InsertSecurityLog): Promise<void>;\n  createUserSession(session: InsertUserSession): Promise<UserSession>;\n  getUserSessions(userId: string): Promise<UserSession[]>;\n  terminateUserSession(sessionId: string): Promise<void>;\n  terminateAllUserSessions(userId: string): Promise<void>;\n  \n  createUserDevice(device: InsertUserDevice): Promise<UserDevice>;\n  getUserDevices(userId: string): Promise<UserDevice[]>;\n  updateDeviceTrusted(deviceId: string, trusted: boolean): Promise<void>;\n  removeUserDevice(deviceId: string): Promise<void>;\n  \n  logLoginAttempt(attempt: InsertLoginAttempt): Promise<void>;\n  getRecentLoginAttempts(ipAddress: string): Promise<LoginAttempt[]>;\n  \n  enable2FA(userId: string, secret: string, backupCodes: string[]): Promise<void>;\n  disable2FA(userId: string): Promise<void>;\n  verify2FABackupCode(userId: string, code: string): Promise<boolean>;\n  getSecurityLogs(userId?: string, limit?: number): Promise<SecurityLog[]>;\n  \n  // Department operations\n  getDepartments(): Promise<Department[]>;\n  getDepartment(id: string): Promise<Department | undefined>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n  updateDepartment(id: string, department: Partial<InsertDepartment>): Promise<Department>;\n  deleteDepartment(id: string): Promise<void>;\n  \n  // Branch operations\n  getBranches(): Promise<Branch[]>;\n  getBranch(id: string): Promise<Branch | undefined>;\n  createBranch(branch: InsertBranch): Promise<Branch>;\n  updateBranch(id: string, branch: Partial<InsertBranch>): Promise<Branch>;\n  deleteBranch(id: string): Promise<void>;\n  \n  // Personnel operations\n  getPersonnel(): Promise<PersonnelWithRelations[]>;\n  getPersonnelById(id: string): Promise<PersonnelWithRelations | undefined>;\n  createPersonnel(personnelData: InsertPersonnel): Promise<Personnel>;\n  updatePersonnel(id: string, personnelData: Partial<InsertPersonnel>): Promise<Personnel>;\n  deletePersonnel(id: string): Promise<void>;\n  \n  // Leave operations\n  getLeaveTypes(): Promise<LeaveType[]>;\n  createLeaveType(leaveType: InsertLeaveType): Promise<LeaveType>;\n  getLeaveRequests(): Promise<LeaveRequestWithRelations[]>;\n  createLeaveRequest(leaveRequest: InsertLeaveRequest): Promise<LeaveRequest>;\n  updateLeaveRequest(id: string, data: Partial<InsertLeaveRequest>): Promise<LeaveRequest>;\n  \n  // Shift operations\n  getShifts(): Promise<Shift[]>;\n  createShift(shift: InsertShift): Promise<Shift>;\n  deleteShift(id: string): Promise<void>;\n  getShiftAssignments(date?: string): Promise<ShiftAssignmentWithRelations[]>;\n  createShiftAssignment(assignment: InsertShiftAssignment): Promise<ShiftAssignment>;\n  deleteShiftAssignment(id: string): Promise<void>;\n  \n  // Attendance operations\n  getAttendanceRecords(date?: string): Promise<AttendanceRecord[]>;\n  createAttendanceRecord(record: InsertAttendanceRecord): Promise<AttendanceRecord>;\n  \n  // Education records operations\n  getEducationRecords(personnelId: string): Promise<EducationRecord[]>;\n  createEducationRecord(record: InsertEducationRecord): Promise<EducationRecord>;\n  updateEducationRecord(id: string, record: Partial<InsertEducationRecord>): Promise<EducationRecord>;\n  deleteEducationRecord(id: string): Promise<void>;\n  \n  // Health records operations\n  getHealthRecords(personnelId: string): Promise<HealthRecord[]>;\n  createHealthRecord(record: InsertHealthRecord): Promise<HealthRecord>;\n  updateHealthRecord(id: string, record: Partial<InsertHealthRecord>): Promise<HealthRecord>;\n  deleteHealthRecord(id: string): Promise<void>;\n  \n  // Document operations\n  getDocuments(personnelId?: string): Promise<Document[]>;\n  getDocumentById(id: string): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: string, document: Partial<InsertDocument>): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n  getExpiringDocuments(days?: number): Promise<Document[]>;\n  \n  // Performance evaluations operations\n  getPerformanceEvaluations(personnelId?: string): Promise<PerformanceEvaluationWithRelations[]>;\n  createPerformanceEvaluation(evaluation: InsertPerformanceEvaluation): Promise<PerformanceEvaluation>;\n  updatePerformanceEvaluation(id: string, evaluation: Partial<InsertPerformanceEvaluation>): Promise<PerformanceEvaluation>;\n  deletePerformanceEvaluation(id: string): Promise<void>;\n  \n  // QR Code operations\n  getQrCodes(branchId?: string): Promise<QrCode[]>;\n  createQrCode(qrCode: InsertQrCode): Promise<QrCode>;\n  updateQrCode(id: string, qrCode: Partial<InsertQrCode>): Promise<QrCode>;\n  deleteQrCode(id: string): Promise<void>;\n  getActiveQrCodeByValue(codeValue: string): Promise<QrCode | undefined>;\n  \n  // Calendar and Holiday operations\n  getCalendarEvents(startDate?: string, endDate?: string): Promise<CalendarEventWithRelations[]>;\n  createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent>;\n  updateCalendarEvent(id: string, event: Partial<InsertCalendarEvent>): Promise<CalendarEvent>;\n  deleteCalendarEvent(id: string): Promise<void>;\n  getHolidays(year?: string): Promise<Holiday[]>;\n  createHoliday(holiday: InsertHoliday): Promise<Holiday>;\n  \n  // Notification operations\n  getNotifications(recipientId: string): Promise<NotificationWithRelations[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n  markNotificationAsSent(id: string): Promise<void>;\n  \n  // Mobile device operations\n  getMobileDevices(userId?: string): Promise<MobileDevice[]>;\n  createMobileDevice(device: InsertMobileDevice): Promise<MobileDevice>;\n  updateMobileDevice(id: string, device: Partial<InsertMobileDevice>): Promise<MobileDevice>;\n  deleteMobileDevice(id: string): Promise<void>;\n  deactivateUserDevices(userId: string): Promise<void>;\n  \n  // System settings operations\n  getSystemSettings(category?: string): Promise<SystemSetting[]>;\n  getSystemSetting(key: string): Promise<SystemSetting | undefined>;\n  updateSystemSetting(key: string, value: string): Promise<SystemSetting>;\n  \n  // Shift templates and change requests\n  getShiftTemplates(): Promise<ShiftTemplate[]>;\n  createShiftTemplate(template: InsertShiftTemplate): Promise<ShiftTemplate>;\n  deleteShiftTemplate(id: string): Promise<void>;\n  getShiftChangeRequests(status?: string): Promise<ShiftChangeRequestWithRelations[]>;\n  createShiftChangeRequest(request: InsertShiftChangeRequest): Promise<ShiftChangeRequest>;\n  updateShiftChangeRequest(id: string, request: Partial<InsertShiftChangeRequest>): Promise<ShiftChangeRequest>;\n  \n  // Dashboard statistics\n  getDashboardStats(): Promise<{\n    totalPersonnel: number;\n    onLeaveToday: number;\n    activeShifts: number;\n    pendingLeaves: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations - mandatory for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Department operations\n  async getDepartments(): Promise<Department[]> {\n    return await db.select().from(departments).orderBy(departments.name);\n  }\n\n  async getDepartment(id: string): Promise<Department | undefined> {\n    const [department] = await db.select().from(departments).where(eq(departments.id, id));\n    return department;\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const [newDepartment] = await db.insert(departments).values(department).returning();\n    return newDepartment;\n  }\n\n  async updateDepartment(id: string, department: Partial<InsertDepartment>): Promise<Department> {\n    const [updatedDepartment] = await db\n      .update(departments)\n      .set({ ...department, updatedAt: new Date() })\n      .where(eq(departments.id, id))\n      .returning();\n    return updatedDepartment;\n  }\n\n  async deleteDepartment(id: string): Promise<void> {\n    await db.delete(departments).where(eq(departments.id, id));\n  }\n\n  // Branch operations\n  async getBranches(): Promise<Branch[]> {\n    return await db.select().from(branches).orderBy(branches.name);\n  }\n\n  async getBranch(id: string): Promise<Branch | undefined> {\n    const [branch] = await db.select().from(branches).where(eq(branches.id, id));\n    return branch;\n  }\n\n  async createBranch(branch: InsertBranch): Promise<Branch> {\n    const [newBranch] = await db.insert(branches).values(branch).returning();\n    return newBranch;\n  }\n\n  async updateBranch(id: string, branch: Partial<InsertBranch>): Promise<Branch> {\n    const [updatedBranch] = await db\n      .update(branches)\n      .set({ ...branch, updatedAt: new Date() })\n      .where(eq(branches.id, id))\n      .returning();\n    return updatedBranch;\n  }\n\n  async deleteBranch(id: string): Promise<void> {\n    await db.delete(branches).where(eq(branches.id, id));\n  }\n\n  // Personnel operations\n  async getPersonnel(): Promise<PersonnelWithRelations[]> {\n    const result = await db\n      .select({\n        id: personnel.id,\n        userId: personnel.userId,\n        employeeId: personnel.employeeId,\n        firstName: personnel.firstName,\n        lastName: personnel.lastName,\n        email: personnel.email,\n        phone: personnel.phone,\n        tcNo: personnel.tcNo,\n        dateOfBirth: personnel.dateOfBirth,\n        address: personnel.address,\n        departmentId: personnel.departmentId,\n        branchId: personnel.branchId,\n        position: personnel.position,\n        salary: personnel.salary,\n        hireDate: personnel.hireDate,\n        terminationDate: personnel.terminationDate,\n        status: personnel.status,\n        createdAt: personnel.createdAt,\n        updatedAt: personnel.updatedAt,\n        department: departments,\n        branch: branches,\n      })\n      .from(personnel)\n      .leftJoin(departments, eq(personnel.departmentId, departments.id))\n      .leftJoin(branches, eq(personnel.branchId, branches.id))\n      .orderBy(desc(personnel.createdAt));\n\n    return result.map(row => ({\n      ...row,\n      department: row.department || undefined,\n      branch: row.branch || undefined\n    }));\n  }\n\n  async getPersonnelById(id: string): Promise<PersonnelWithRelations | undefined> {\n    const [result] = await db\n      .select({\n        id: personnel.id,\n        userId: personnel.userId,\n        employeeId: personnel.employeeId,\n        firstName: personnel.firstName,\n        lastName: personnel.lastName,\n        email: personnel.email,\n        phone: personnel.phone,\n        tcNo: personnel.tcNo,\n        dateOfBirth: personnel.dateOfBirth,\n        address: personnel.address,\n        departmentId: personnel.departmentId,\n        branchId: personnel.branchId,\n        position: personnel.position,\n        salary: personnel.salary,\n        hireDate: personnel.hireDate,\n        terminationDate: personnel.terminationDate,\n        status: personnel.status,\n        createdAt: personnel.createdAt,\n        updatedAt: personnel.updatedAt,\n        department: departments,\n        branch: branches,\n      })\n      .from(personnel)\n      .leftJoin(departments, eq(personnel.departmentId, departments.id))\n      .leftJoin(branches, eq(personnel.branchId, branches.id))\n      .where(eq(personnel.id, id));\n    \n    if (!result) return undefined;\n    \n    return {\n      ...result,\n      department: result.department || undefined,\n      branch: result.branch || undefined\n    };\n  }\n\n  async createPersonnel(personnelData: InsertPersonnel): Promise<Personnel> {\n    const [newPersonnel] = await db.insert(personnel).values(personnelData).returning();\n    return newPersonnel;\n  }\n\n  async updatePersonnel(id: string, personnelData: Partial<InsertPersonnel>): Promise<Personnel> {\n    const [updatedPersonnel] = await db\n      .update(personnel)\n      .set({ ...personnelData, updatedAt: new Date() })\n      .where(eq(personnel.id, id))\n      .returning();\n    return updatedPersonnel;\n  }\n\n  async deletePersonnel(id: string): Promise<void> {\n    await db.delete(personnel).where(eq(personnel.id, id));\n  }\n\n  // Leave operations\n  async getLeaveTypes(): Promise<LeaveType[]> {\n    return await db.select().from(leaveTypes).orderBy(desc(leaveTypes.createdAt));\n  }\n\n  async createLeaveType(leaveType: InsertLeaveType): Promise<LeaveType> {\n    const [newLeaveType] = await db.insert(leaveTypes).values(leaveType).returning();\n    return newLeaveType;\n  }\n\n  async getLeaveRequests(): Promise<LeaveRequestWithRelations[]> {\n    const result = await db\n      .select({\n        id: leaveRequests.id,\n        personnelId: leaveRequests.personnelId,\n        leaveTypeId: leaveRequests.leaveTypeId,\n        startDate: leaveRequests.startDate,\n        endDate: leaveRequests.endDate,\n        days: leaveRequests.days,\n        reason: leaveRequests.reason,\n        status: leaveRequests.status,\n        approvedBy: leaveRequests.approvedBy,\n        approvedAt: leaveRequests.approvedAt,\n        rejectionReason: leaveRequests.rejectionReason,\n        createdAt: leaveRequests.createdAt,\n        updatedAt: leaveRequests.updatedAt,\n        personnel: personnel,\n        leaveType: leaveTypes,\n        approver: users,\n      })\n      .from(leaveRequests)\n      .leftJoin(personnel, eq(leaveRequests.personnelId, personnel.id))\n      .leftJoin(leaveTypes, eq(leaveRequests.leaveTypeId, leaveTypes.id))\n      .leftJoin(users, eq(leaveRequests.approvedBy, users.id))\n      .orderBy(desc(leaveRequests.createdAt));\n\n    return result.map(row => ({\n      ...row,\n      personnel: row.personnel || undefined,\n      leaveType: row.leaveType || undefined,\n      approver: row.approver || undefined\n    }));\n  }\n\n  async createLeaveRequest(leaveRequest: InsertLeaveRequest): Promise<LeaveRequest> {\n    const [newLeaveRequest] = await db.insert(leaveRequests).values(leaveRequest).returning();\n    return newLeaveRequest;\n  }\n\n  async updateLeaveRequest(id: string, data: Partial<InsertLeaveRequest>): Promise<LeaveRequest> {\n    const [updatedLeaveRequest] = await db\n      .update(leaveRequests)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return updatedLeaveRequest;\n  }\n\n  // Shift operations\n  async getShifts(): Promise<Shift[]> {\n    return await db.select().from(shifts).where(eq(shifts.isActive, true));\n  }\n\n  async createShift(shift: InsertShift): Promise<Shift> {\n    const [newShift] = await db.insert(shifts).values(shift).returning();\n    return newShift;\n  }\n\n  async deleteShift(id: string): Promise<void> {\n    await db.delete(shifts).where(eq(shifts.id, id));\n  }\n\n  async getShiftAssignments(date?: string): Promise<ShiftAssignmentWithRelations[]> {\n    let baseQuery = db\n      .select({\n        id: shiftAssignments.id,\n        personnelId: shiftAssignments.personnelId,\n        shiftId: shiftAssignments.shiftId,\n        date: shiftAssignments.date,\n        isActive: shiftAssignments.isActive,\n        createdAt: shiftAssignments.createdAt,\n        updatedAt: shiftAssignments.updatedAt,\n        personnel: personnel,\n        shift: shifts,\n      })\n      .from(shiftAssignments)\n      .leftJoin(personnel, eq(shiftAssignments.personnelId, personnel.id))\n      .leftJoin(shifts, eq(shiftAssignments.shiftId, shifts.id));\n\n    if (date) {\n      baseQuery = baseQuery.where(and(eq(shiftAssignments.isActive, true), eq(shiftAssignments.date, date))) as any;\n    } else {\n      baseQuery = baseQuery.where(eq(shiftAssignments.isActive, true)) as any;\n    }\n\n    const result = await baseQuery.orderBy(shiftAssignments.date);\n    \n    return result.map(row => ({\n      ...row,\n      personnel: row.personnel || undefined,\n      shift: row.shift || undefined\n    }));\n  }\n\n  async createShiftAssignment(assignment: InsertShiftAssignment): Promise<ShiftAssignment> {\n    const [newAssignment] = await db.insert(shiftAssignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async deleteShiftAssignment(id: string): Promise<void> {\n    await db.delete(shiftAssignments).where(eq(shiftAssignments.id, id));\n  }\n\n  // Attendance operations\n  async getAttendanceRecords(date?: string): Promise<AttendanceRecord[]> {\n    if (date) {\n      return await db.select().from(attendanceRecords)\n        .where(eq(attendanceRecords.date, date))\n        .orderBy(desc(attendanceRecords.date));\n    }\n\n    return await db.select().from(attendanceRecords)\n      .orderBy(desc(attendanceRecords.date));\n  }\n\n  async createAttendanceRecord(record: InsertAttendanceRecord): Promise<AttendanceRecord> {\n    const [newRecord] = await db.insert(attendanceRecords).values(record).returning();\n    return newRecord;\n  }\n\n  // Dashboard statistics\n  async getDashboardStats(): Promise<{\n    totalPersonnel: number;\n    onLeaveToday: number;\n    activeShifts: number;\n    pendingLeaves: number;\n  }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const [totalPersonnelResult] = await db\n      .select({ count: count() })\n      .from(personnel)\n      .where(eq(personnel.status, 'active'));\n\n    const [onLeaveTodayResult] = await db\n      .select({ count: count() })\n      .from(leaveRequests)\n      .where(\n        and(\n          eq(leaveRequests.status, 'approved'),\n          sql`${leaveRequests.startDate} <= ${today}`,\n          sql`${leaveRequests.endDate} >= ${today}`\n        )\n      );\n\n    const [activeShiftsResult] = await db\n      .select({ count: count() })\n      .from(shifts)\n      .where(eq(shifts.isActive, true));\n\n    const [pendingLeavesResult] = await db\n      .select({ count: count() })\n      .from(leaveRequests)\n      .where(eq(leaveRequests.status, 'pending'));\n\n    return {\n      totalPersonnel: totalPersonnelResult.count,\n      onLeaveToday: onLeaveTodayResult.count,\n      activeShifts: activeShiftsResult.count,\n      pendingLeaves: pendingLeavesResult.count,\n    };\n  }\n\n  // Education records operations\n  async getEducationRecords(personnelId: string): Promise<EducationRecord[]> {\n    return await db.select().from(educationRecords)\n      .where(and(eq(educationRecords.personnelId, personnelId), eq(educationRecords.isActive, true)))\n      .orderBy(desc(educationRecords.endDate));\n  }\n\n  async createEducationRecord(record: InsertEducationRecord): Promise<EducationRecord> {\n    const [newRecord] = await db.insert(educationRecords).values(record).returning();\n    return newRecord;\n  }\n\n  async updateEducationRecord(id: string, record: Partial<InsertEducationRecord>): Promise<EducationRecord> {\n    const [updatedRecord] = await db\n      .update(educationRecords)\n      .set({ ...record, updatedAt: new Date() })\n      .where(eq(educationRecords.id, id))\n      .returning();\n    return updatedRecord;\n  }\n\n  async deleteEducationRecord(id: string): Promise<void> {\n    await db.update(educationRecords)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(educationRecords.id, id));\n  }\n\n  // Health records operations\n  async getHealthRecords(personnelId: string): Promise<HealthRecord[]> {\n    return await db.select().from(healthRecords)\n      .where(eq(healthRecords.personnelId, personnelId))\n      .orderBy(desc(healthRecords.recordDate));\n  }\n\n  async createHealthRecord(record: InsertHealthRecord): Promise<HealthRecord> {\n    const [newRecord] = await db.insert(healthRecords).values(record).returning();\n    return newRecord;\n  }\n\n  async updateHealthRecord(id: string, record: Partial<InsertHealthRecord>): Promise<HealthRecord> {\n    const [updatedRecord] = await db\n      .update(healthRecords)\n      .set({ ...record, updatedAt: new Date() })\n      .where(eq(healthRecords.id, id))\n      .returning();\n    return updatedRecord;\n  }\n\n  async deleteHealthRecord(id: string): Promise<void> {\n    await db.delete(healthRecords).where(eq(healthRecords.id, id));\n  }\n\n  // Document operations\n  async getDocuments(personnelId?: string): Promise<Document[]> {\n    if (personnelId) {\n      return await db.select().from(documents)\n        .where(and(eq(documents.personnelId, personnelId), eq(documents.status, 'active')))\n        .orderBy(desc(documents.createdAt));\n    }\n    return await db.select().from(documents)\n      .where(eq(documents.status, 'active'))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async getDocumentById(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document;\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const [newDocument] = await db.insert(documents).values(document).returning();\n    return newDocument;\n  }\n\n  async updateDocument(id: string, document: Partial<InsertDocument>): Promise<Document> {\n    const [updatedDocument] = await db\n      .update(documents)\n      .set({ ...document, updatedAt: new Date() })\n      .where(eq(documents.id, id))\n      .returning();\n    return updatedDocument;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.update(documents)\n      .set({ status: 'archived', updatedAt: new Date() })\n      .where(eq(documents.id, id));\n  }\n\n  async getExpiringDocuments(days: number = 30): Promise<Document[]> {\n    const futureDate = new Date();\n    futureDate.setDate(futureDate.getDate() + days);\n    const futureDateStr = futureDate.toISOString().split('T')[0];\n\n    return await db.select().from(documents)\n      .where(\n        and(\n          eq(documents.status, 'active'),\n          sql`${documents.expiryDate} IS NOT NULL`,\n          sql`${documents.expiryDate} <= ${futureDateStr}`\n        )\n      )\n      .orderBy(documents.expiryDate);\n  }\n\n  // Performance evaluations operations\n  async getPerformanceEvaluations(personnelId?: string): Promise<PerformanceEvaluationWithRelations[]> {\n    let baseQuery = db\n      .select({\n        id: performanceEvaluations.id,\n        personnelId: performanceEvaluations.personnelId,\n        evaluatorId: performanceEvaluations.evaluatorId,\n        evaluationPeriod: performanceEvaluations.evaluationPeriod,\n        overallScore: performanceEvaluations.overallScore,\n        goals: performanceEvaluations.goals,\n        achievements: performanceEvaluations.achievements,\n        areasOfImprovement: performanceEvaluations.areasOfImprovement,\n        feedback: performanceEvaluations.feedback,\n        recommendedActions: performanceEvaluations.recommendedActions,\n        status: performanceEvaluations.status,\n        isPromotionRecommended: performanceEvaluations.isPromotionRecommended,\n        createdAt: performanceEvaluations.createdAt,\n        updatedAt: performanceEvaluations.updatedAt,\n        personnel: personnel,\n        evaluator: users,\n      })\n      .from(performanceEvaluations)\n      .leftJoin(personnel, eq(performanceEvaluations.personnelId, personnel.id))\n      .leftJoin(users, eq(performanceEvaluations.evaluatorId, users.id));\n\n    if (personnelId) {\n      baseQuery = baseQuery.where(eq(performanceEvaluations.personnelId, personnelId)) as any;\n    }\n\n    const result = await baseQuery.orderBy(desc(performanceEvaluations.createdAt));\n    \n    return result.map(row => ({\n      ...row,\n      personnel: row.personnel || undefined,\n      evaluator: row.evaluator || undefined\n    }));\n  }\n\n  async createPerformanceEvaluation(evaluation: InsertPerformanceEvaluation): Promise<PerformanceEvaluation> {\n    const [newEvaluation] = await db.insert(performanceEvaluations).values(evaluation).returning();\n    return newEvaluation;\n  }\n\n  async updatePerformanceEvaluation(id: string, evaluation: Partial<InsertPerformanceEvaluation>): Promise<PerformanceEvaluation> {\n    const [updatedEvaluation] = await db\n      .update(performanceEvaluations)\n      .set({ ...evaluation, updatedAt: new Date() })\n      .where(eq(performanceEvaluations.id, id))\n      .returning();\n    return updatedEvaluation;\n  }\n\n  async deletePerformanceEvaluation(id: string): Promise<void> {\n    await db.delete(performanceEvaluations).where(eq(performanceEvaluations.id, id));\n  }\n\n  // QR Code operations\n  async getQrCodes(branchId?: string): Promise<QrCode[]> {\n    if (branchId) {\n      return await db.select().from(qrCodes)\n        .where(and(eq(qrCodes.branchId, branchId), eq(qrCodes.isActive, true)))\n        .orderBy(desc(qrCodes.createdAt));\n    }\n    return await db.select().from(qrCodes)\n      .where(eq(qrCodes.isActive, true))\n      .orderBy(desc(qrCodes.createdAt));\n  }\n\n  async createQrCode(qrCode: InsertQrCode): Promise<QrCode> {\n    const [newQrCode] = await db.insert(qrCodes).values(qrCode).returning();\n    return newQrCode;\n  }\n\n  async updateQrCode(id: string, qrCode: Partial<InsertQrCode>): Promise<QrCode> {\n    const [updatedQrCode] = await db\n      .update(qrCodes)\n      .set({ ...qrCode, updatedAt: new Date() })\n      .where(eq(qrCodes.id, id))\n      .returning();\n    return updatedQrCode;\n  }\n\n  async deleteQrCode(id: string): Promise<void> {\n    await db.update(qrCodes)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(qrCodes.id, id));\n  }\n\n  async getActiveQrCodeByValue(codeValue: string): Promise<QrCode | undefined> {\n    const [qrCode] = await db.select().from(qrCodes)\n      .where(and(eq(qrCodes.codeValue, codeValue), eq(qrCodes.isActive, true)));\n    return qrCode;\n  }\n\n  // Calendar and Holiday operations\n  async getCalendarEvents(startDate?: string, endDate?: string): Promise<CalendarEventWithRelations[]> {\n    let baseQuery = db\n      .select({\n        id: calendarEvents.id,\n        title: calendarEvents.title,\n        description: calendarEvents.description,\n        eventDate: calendarEvents.eventDate,\n        startTime: calendarEvents.startTime,\n        endTime: calendarEvents.endTime,\n        type: calendarEvents.type,\n        isRecurring: calendarEvents.isRecurring,\n        recurrencePattern: calendarEvents.recurrencePattern,\n        location: calendarEvents.location,\n        organizerId: calendarEvents.organizerId,\n        attendees: calendarEvents.attendees,\n        color: calendarEvents.color,\n        isPublic: calendarEvents.isPublic,\n        reminderMinutes: calendarEvents.reminderMinutes,\n        createdAt: calendarEvents.createdAt,\n        updatedAt: calendarEvents.updatedAt,\n        organizer: users,\n      })\n      .from(calendarEvents)\n      .leftJoin(users, eq(calendarEvents.organizerId, users.id));\n\n    if (startDate && endDate) {\n      baseQuery = baseQuery.where(\n        and(\n          sql`${calendarEvents.eventDate} >= ${startDate}`,\n          sql`${calendarEvents.eventDate} <= ${endDate}`\n        )\n      ) as any;\n    }\n\n    const result = await baseQuery.orderBy(calendarEvents.eventDate);\n    \n    return result.map(row => ({\n      ...row,\n      organizer: row.organizer || undefined\n    }));\n  }\n\n  async createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent> {\n    const [newEvent] = await db.insert(calendarEvents).values(event).returning();\n    return newEvent;\n  }\n\n  async updateCalendarEvent(id: string, event: Partial<InsertCalendarEvent>): Promise<CalendarEvent> {\n    const [updatedEvent] = await db\n      .update(calendarEvents)\n      .set({ ...event, updatedAt: new Date() })\n      .where(eq(calendarEvents.id, id))\n      .returning();\n    return updatedEvent;\n  }\n\n  async deleteCalendarEvent(id: string): Promise<void> {\n    await db.delete(calendarEvents).where(eq(calendarEvents.id, id));\n  }\n\n  async getHolidays(year?: string): Promise<Holiday[]> {\n    if (year) {\n      return await db.select().from(holidays)\n        .where(eq(holidays.year, year))\n        .orderBy(holidays.date);\n    }\n    return await db.select().from(holidays)\n      .orderBy(holidays.date);\n  }\n\n  async createHoliday(holiday: InsertHoliday): Promise<Holiday> {\n    const [newHoliday] = await db.insert(holidays).values(holiday).returning();\n    return newHoliday;\n  }\n\n  // Notification operations\n  async getNotifications(recipientId: string): Promise<NotificationWithRelations[]> {\n    const result = await db\n      .select({\n        id: notifications.id,\n        recipientId: notifications.recipientId,\n        title: notifications.title,\n        message: notifications.message,\n        type: notifications.type,\n        status: notifications.status,\n        priority: notifications.priority,\n        scheduledFor: notifications.scheduledFor,\n        sentAt: notifications.sentAt,\n        deliveredAt: notifications.deliveredAt,\n        readAt: notifications.readAt,\n        relatedEntity: notifications.relatedEntity,\n        relatedEntityId: notifications.relatedEntityId,\n        createdAt: notifications.createdAt,\n        updatedAt: notifications.updatedAt,\n        recipient: users,\n      })\n      .from(notifications)\n      .leftJoin(users, eq(notifications.recipientId, users.id))\n      .where(eq(notifications.recipientId, recipientId))\n      .orderBy(desc(notifications.createdAt));\n\n    return result.map(row => ({\n      ...row,\n      recipient: row.recipient || undefined\n    }));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db.update(notifications)\n      .set({ readAt: new Date(), updatedAt: new Date() })\n      .where(eq(notifications.id, id));\n  }\n\n  async markNotificationAsSent(id: string): Promise<void> {\n    await db.update(notifications)\n      .set({ status: 'sent', sentAt: new Date(), updatedAt: new Date() })\n      .where(eq(notifications.id, id));\n  }\n\n  // Mobile device operations\n  async getMobileDevices(userId?: string): Promise<MobileDevice[]> {\n    if (userId) {\n      return await db.select().from(mobileDevices)\n        .where(and(eq(mobileDevices.userId, userId), eq(mobileDevices.isActive, true)))\n        .orderBy(desc(mobileDevices.lastUsed));\n    }\n    return await db.select().from(mobileDevices)\n      .where(eq(mobileDevices.isActive, true))\n      .orderBy(desc(mobileDevices.lastUsed));\n  }\n\n  async createMobileDevice(device: InsertMobileDevice): Promise<MobileDevice> {\n    const [newDevice] = await db.insert(mobileDevices).values(device).returning();\n    return newDevice;\n  }\n\n  async updateMobileDevice(id: string, device: Partial<InsertMobileDevice>): Promise<MobileDevice> {\n    const [updatedDevice] = await db\n      .update(mobileDevices)\n      .set({ ...device, updatedAt: new Date() })\n      .where(eq(mobileDevices.id, id))\n      .returning();\n    return updatedDevice;\n  }\n\n  async deleteMobileDevice(id: string): Promise<void> {\n    await db.update(mobileDevices)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(mobileDevices.id, id));\n  }\n\n  async deactivateUserDevices(userId: string): Promise<void> {\n    await db.update(mobileDevices)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(mobileDevices.userId, userId));\n  }\n\n  // System settings operations\n  async getSystemSettings(category?: string): Promise<SystemSetting[]> {\n    if (category) {\n      return await db.select().from(systemSettings)\n        .where(eq(systemSettings.category, category))\n        .orderBy(systemSettings.key);\n    }\n    return await db.select().from(systemSettings)\n      .orderBy(systemSettings.category, systemSettings.key);\n  }\n\n  async getSystemSetting(key: string): Promise<SystemSetting | undefined> {\n    const [setting] = await db.select().from(systemSettings)\n      .where(eq(systemSettings.key, key));\n    return setting;\n  }\n\n  async updateSystemSetting(key: string, value: string): Promise<SystemSetting> {\n    const [updatedSetting] = await db\n      .update(systemSettings)\n      .set({ value, updatedAt: new Date() })\n      .where(eq(systemSettings.key, key))\n      .returning();\n    return updatedSetting;\n  }\n\n  // Shift templates and change requests operations\n  async getShiftTemplates(): Promise<ShiftTemplate[]> {\n    return await db.select().from(shiftTemplates)\n      .where(eq(shiftTemplates.isActive, true))\n      .orderBy(desc(shiftTemplates.createdAt));\n  }\n\n  async createShiftTemplate(template: InsertShiftTemplate): Promise<ShiftTemplate> {\n    const [newTemplate] = await db.insert(shiftTemplates).values(template).returning();\n    return newTemplate;\n  }\n\n  async deleteShiftTemplate(id: string): Promise<void> {\n    await db.update(shiftTemplates)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(shiftTemplates.id, id));\n  }\n\n  async getShiftChangeRequests(status?: string): Promise<ShiftChangeRequestWithRelations[]> {\n    let baseQuery = db\n      .select({\n        id: shiftChangeRequests.id,\n        requesterId: shiftChangeRequests.requesterId,\n        originalShiftId: shiftChangeRequests.originalShiftId,\n        proposedShiftId: shiftChangeRequests.proposedShiftId,\n        targetPersonnelId: shiftChangeRequests.targetPersonnelId,\n        reason: shiftChangeRequests.reason,\n        status: shiftChangeRequests.status,\n        approvedBy: shiftChangeRequests.approvedBy,\n        approvedAt: shiftChangeRequests.approvedAt,\n        rejectionReason: shiftChangeRequests.rejectionReason,\n        createdAt: shiftChangeRequests.createdAt,\n        updatedAt: shiftChangeRequests.updatedAt,\n        requester: personnel,\n        originalShift: shiftAssignments,\n        proposedShift: {\n          id: shiftAssignments.id,\n          personnelId: shiftAssignments.personnelId,\n          shiftId: shiftAssignments.shiftId,\n          date: shiftAssignments.date,\n          isActive: shiftAssignments.isActive,\n          createdAt: shiftAssignments.createdAt,\n          updatedAt: shiftAssignments.updatedAt,\n        },\n        targetPersonnel: {\n          id: personnel.id,\n          userId: personnel.userId,\n          employeeId: personnel.employeeId,\n          firstName: personnel.firstName,\n          lastName: personnel.lastName,\n          email: personnel.email,\n          phone: personnel.phone,\n          tcNo: personnel.tcNo,\n          dateOfBirth: personnel.dateOfBirth,\n          address: personnel.address,\n          departmentId: personnel.departmentId,\n          branchId: personnel.branchId,\n          position: personnel.position,\n          salary: personnel.salary,\n          hireDate: personnel.hireDate,\n          terminationDate: personnel.terminationDate,\n          status: personnel.status,\n          createdAt: personnel.createdAt,\n          updatedAt: personnel.updatedAt,\n        },\n        approver: users,\n      })\n      .from(shiftChangeRequests)\n      .leftJoin(personnel, eq(shiftChangeRequests.requesterId, personnel.id))\n      .leftJoin(shiftAssignments, eq(shiftChangeRequests.originalShiftId, shiftAssignments.id))\n      .leftJoin(users, eq(shiftChangeRequests.approvedBy, users.id));\n\n    if (status) {\n      baseQuery = baseQuery.where(eq(shiftChangeRequests.status, status)) as any;\n    }\n\n    const result = await baseQuery.orderBy(desc(shiftChangeRequests.createdAt));\n    \n    return result.map(row => ({\n      ...row,\n      requester: row.requester || undefined,\n      originalShift: row.originalShift || undefined,\n      proposedShift: row.proposedShift || undefined,\n      targetPersonnel: row.targetPersonnel || undefined,\n      approver: row.approver || undefined\n    }));\n  }\n\n  async createShiftChangeRequest(request: InsertShiftChangeRequest): Promise<ShiftChangeRequest> {\n    const [newRequest] = await db.insert(shiftChangeRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async updateShiftChangeRequest(id: string, request: Partial<InsertShiftChangeRequest>): Promise<ShiftChangeRequest> {\n    const [updatedRequest] = await db\n      .update(shiftChangeRequests)\n      .set({ ...request, updatedAt: new Date() })\n      .where(eq(shiftChangeRequests.id, id))\n      .returning();\n    return updatedRequest;\n  }\n\n  // Security operations implementation\n  async logSecurityEvent(event: InsertSecurityLog): Promise<void> {\n    await db.insert(securityLogs).values(event);\n  }\n\n  async createUserSession(session: InsertUserSession): Promise<UserSession> {\n    const [newSession] = await db.insert(userSessions).values(session).returning();\n    return newSession;\n  }\n\n  async getUserSessions(userId: string): Promise<UserSession[]> {\n    return await db\n      .select()\n      .from(userSessions)\n      .where(and(eq(userSessions.userId, userId), eq(userSessions.isActive, true)))\n      .orderBy(desc(userSessions.lastActivity));\n  }\n\n  async terminateUserSession(sessionId: string): Promise<void> {\n    await db\n      .update(userSessions)\n      .set({ isActive: false })\n      .where(eq(userSessions.sessionId, sessionId));\n  }\n\n  async terminateAllUserSessions(userId: string): Promise<void> {\n    await db\n      .update(userSessions)\n      .set({ isActive: false })\n      .where(eq(userSessions.userId, userId));\n  }\n\n  async createUserDevice(device: InsertUserDevice): Promise<UserDevice> {\n    const [newDevice] = await db.insert(userDevices).values(device).returning();\n    return newDevice;\n  }\n\n  async getUserDevices(userId: string): Promise<UserDevice[]> {\n    return await db\n      .select()\n      .from(userDevices)\n      .where(eq(userDevices.userId, userId))\n      .orderBy(desc(userDevices.lastUsed));\n  }\n\n  async updateDeviceTrusted(deviceId: string, trusted: boolean): Promise<void> {\n    await db\n      .update(userDevices)\n      .set({ isTrusted: trusted })\n      .where(eq(userDevices.id, deviceId));\n  }\n\n  async removeUserDevice(deviceId: string): Promise<void> {\n    await db.delete(userDevices).where(eq(userDevices.id, deviceId));\n  }\n\n  async logLoginAttempt(attempt: InsertLoginAttempt): Promise<void> {\n    await db.insert(loginAttempts).values(attempt);\n  }\n\n  async getRecentLoginAttempts(ipAddress: string): Promise<LoginAttempt[]> {\n    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);\n    return await db\n      .select()\n      .from(loginAttempts)\n      .where(\n        and(\n          eq(loginAttempts.ipAddress, ipAddress),\n          sql`${loginAttempts.attemptedAt} >= ${thirtyMinutesAgo}`\n        )\n      )\n      .orderBy(desc(loginAttempts.attemptedAt));\n  }\n\n  async enable2FA(userId: string, secret: string, backupCodes: string[]): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Update user with 2FA enabled\n      await tx\n        .update(users)\n        .set({ \n          twoFactorEnabled: true, \n          twoFactorSecret: secret,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n\n      // Insert backup codes\n      const backupCodeRecords = backupCodes.map(code => ({\n        userId,\n        code,\n        used: false,\n      }));\n      await tx.insert(twoFactorBackupCodes).values(backupCodeRecords);\n\n      // Log security event\n      await tx.insert(securityLogs).values({\n        userId,\n        eventType: \"2fa_enabled\",\n        eventLevel: \"info\",\n        success: true,\n      });\n    });\n  }\n\n  async disable2FA(userId: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Update user with 2FA disabled\n      await tx\n        .update(users)\n        .set({ \n          twoFactorEnabled: false, \n          twoFactorSecret: null,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n\n      // Remove backup codes\n      await tx.delete(twoFactorBackupCodes).where(eq(twoFactorBackupCodes.userId, userId));\n\n      // Log security event\n      await tx.insert(securityLogs).values({\n        userId,\n        eventType: \"2fa_disabled\",\n        eventLevel: \"warning\",\n        success: true,\n      });\n    });\n  }\n\n  async verify2FABackupCode(userId: string, code: string): Promise<boolean> {\n    const result = await db.transaction(async (tx) => {\n      const [backupCode] = await tx\n        .select()\n        .from(twoFactorBackupCodes)\n        .where(\n          and(\n            eq(twoFactorBackupCodes.userId, userId),\n            eq(twoFactorBackupCodes.code, code),\n            eq(twoFactorBackupCodes.used, false)\n          )\n        );\n\n      if (!backupCode) {\n        return false;\n      }\n\n      // Mark backup code as used\n      await tx\n        .update(twoFactorBackupCodes)\n        .set({ used: true, usedAt: new Date() })\n        .where(eq(twoFactorBackupCodes.id, backupCode.id));\n\n      // Log security event\n      await tx.insert(securityLogs).values({\n        userId,\n        eventType: \"2fa_backup_code_used\",\n        eventLevel: \"info\",\n        success: true,\n      });\n\n      return true;\n    });\n\n    return result;\n  }\n\n  async getSecurityLogs(userId?: string, limit: number = 100): Promise<SecurityLog[]> {\n    let query = db.select().from(securityLogs);\n    \n    if (userId) {\n      query = query.where(eq(securityLogs.userId, userId));\n    }\n    \n    return await query\n      .orderBy(desc(securityLogs.createdAt))\n      .limit(limit);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":43374},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  date,\n  decimal,\n  boolean,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"personnel\"), // personnel, admin, hr, manager, super_admin\n  // Security enhancements\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false),\n  twoFactorSecret: varchar(\"two_factor_secret\"), // TOTP secret\n  phoneNumber: varchar(\"phone_number\"), // For SMS 2FA\n  lastLoginAt: timestamp(\"last_login_at\"),\n  failedLoginAttempts: integer(\"failed_login_attempts\").default(0),\n  accountLockedUntil: timestamp(\"account_locked_until\"),\n  passwordResetToken: varchar(\"password_reset_token\"),\n  passwordResetExpires: timestamp(\"password_reset_expires\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Departments table\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Branches table\nexport const branches = pgTable(\"branches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Personnel table\nexport const personnel = pgTable(\"personnel\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  employeeId: varchar(\"employee_id\").unique().notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\").unique(),\n  phone: varchar(\"phone\"),\n  tcNo: varchar(\"tc_no\").unique(),\n  dateOfBirth: date(\"date_of_birth\"),\n  address: text(\"address\"),\n  departmentId: varchar(\"department_id\").references(() => departments.id),\n  branchId: varchar(\"branch_id\").references(() => branches.id),\n  position: varchar(\"position\"),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }),\n  hireDate: date(\"hire_date\"),\n  terminationDate: date(\"termination_date\"),\n  status: varchar(\"status\").default(\"active\"), // active, inactive, terminated\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leave types table\nexport const leaveTypes = pgTable(\"leave_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  maxDays: decimal(\"max_days\", { precision: 5, scale: 2 }),\n  maxDaysPerYear: decimal(\"max_days_per_year\", { precision: 5, scale: 2 }),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leave requests table\nexport const leaveRequests = pgTable(\"leave_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").references(() => personnel.id),\n  leaveTypeId: varchar(\"leave_type_id\").references(() => leaveTypes.id),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  days: decimal(\"days\", { precision: 5, scale: 2 }).notNull(),\n  reason: text(\"reason\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, approved, rejected\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Shifts table\nexport const shifts = pgTable(\"shifts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: varchar(\"description\"),\n  startTime: varchar(\"start_time\").notNull(), // \"08:00\"\n  endTime: varchar(\"end_time\").notNull(), // \"16:00\"\n  workingHours: varchar(\"working_hours\"),\n  color: varchar(\"color\").default(\"#3B82F6\"), // Color code for display\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Shift assignments table\nexport const shiftAssignments = pgTable(\"shift_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").references(() => personnel.id),\n  shiftId: varchar(\"shift_id\").references(() => shifts.id),\n  date: date(\"date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Attendance records table\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").references(() => personnel.id),\n  date: date(\"date\").notNull(),\n  checkIn: timestamp(\"check_in\"),\n  checkOut: timestamp(\"check_out\"),\n  workHours: decimal(\"work_hours\", { precision: 5, scale: 2 }),\n  status: varchar(\"status\"), // present, absent, late, early_leave\n  notes: text(\"notes\"),\n  qrCodeUsed: boolean(\"qr_code_used\").default(false),\n  ipAddress: varchar(\"ip_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Education records table\nexport const educationRecords = pgTable(\"education_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").references(() => personnel.id).notNull(),\n  type: varchar(\"type\").notNull(), // degree, certification, course\n  institutionName: varchar(\"institution_name\").notNull(),\n  fieldOfStudy: varchar(\"field_of_study\"),\n  degree: varchar(\"degree\"), // Bachelor, Master, PhD, etc.\n  startDate: date(\"start_date\"),\n  endDate: date(\"end_date\"),\n  graduationYear: varchar(\"graduation_year\"),\n  grade: varchar(\"grade\"),\n  description: text(\"description\"),\n  certificateNumber: varchar(\"certificate_number\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Health records table\nexport const healthRecords = pgTable(\"health_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").references(() => personnel.id).notNull(),\n  type: varchar(\"type\").notNull(), // periodic_checkup, work_accident, occupational_disease, special_condition\n  recordDate: date(\"record_date\").notNull(),\n  description: text(\"description\"),\n  diagnosis: text(\"diagnosis\"),\n  treatment: text(\"treatment\"),\n  doctorName: varchar(\"doctor_name\"),\n  hospitalName: varchar(\"hospital_name\"),\n  isConfidential: boolean(\"is_confidential\").default(true),\n  followUpRequired: boolean(\"follow_up_required\").default(false),\n  followUpDate: date(\"follow_up_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Document management table\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").references(() => personnel.id),\n  category: varchar(\"category\").notNull(), // contract, certificate, medical, legal, personal\n  documentName: varchar(\"document_name\").notNull(),\n  documentType: varchar(\"document_type\"), // pdf, doc, image, etc.\n  filePath: varchar(\"file_path\"),\n  fileSize: decimal(\"file_size\", { precision: 10, scale: 2 }),\n  issueDate: date(\"issue_date\"),\n  expiryDate: date(\"expiry_date\"),\n  issuingAuthority: varchar(\"issuing_authority\"),\n  documentNumber: varchar(\"document_number\"),\n  status: varchar(\"status\").default(\"active\"), // active, expired, renewed, archived\n  isDigitallySigned: boolean(\"is_digitally_signed\").default(false),\n  reminderDays: decimal(\"reminder_days\", { precision: 3, scale: 0 }).default(\"30\"), // Days before expiry to send reminder\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Performance evaluations table\nexport const performanceEvaluations = pgTable(\"performance_evaluations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").references(() => personnel.id).notNull(),\n  evaluatorId: varchar(\"evaluator_id\").references(() => users.id).notNull(),\n  evaluationPeriod: varchar(\"evaluation_period\").notNull(), // Q1-2024, 2024-Annual\n  overallScore: decimal(\"overall_score\", { precision: 3, scale: 1 }), // 1.0 to 5.0\n  goals: text(\"goals\"),\n  achievements: text(\"achievements\"),\n  areasOfImprovement: text(\"areas_of_improvement\"),\n  feedback: text(\"feedback\"),\n  recommendedActions: text(\"recommended_actions\"),\n  status: varchar(\"status\").default(\"draft\"), // draft, completed, approved\n  isPromotionRecommended: boolean(\"is_promotion_recommended\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// QR Codes table for entry/exit\nexport const qrCodes = pgTable(\"qr_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  codeValue: varchar(\"code_value\").unique().notNull(),\n  branchId: varchar(\"branch_id\").references(() => branches.id),\n  location: varchar(\"location\"),\n  pinCode: varchar(\"pin_code\"),\n  securityHash: varchar(\"security_hash\"),\n  isActive: boolean(\"is_active\").default(true),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Calendar events and holidays table\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  eventDate: date(\"event_date\").notNull(),\n  startTime: varchar(\"start_time\"),\n  endTime: varchar(\"end_time\"),\n  type: varchar(\"type\").notNull(), // holiday, corporate_event, meeting, training\n  isRecurring: boolean(\"is_recurring\").default(false),\n  recurrencePattern: varchar(\"recurrence_pattern\"), // daily, weekly, monthly, yearly\n  location: varchar(\"location\"),\n  organizerId: varchar(\"organizer_id\").references(() => users.id),\n  attendees: text(\"attendees\"), // JSON array of personnel IDs\n  color: varchar(\"color\").default(\"#3B82F6\"),\n  isPublic: boolean(\"is_public\").default(true),\n  reminderMinutes: decimal(\"reminder_minutes\", { precision: 5, scale: 0 }).default(\"30\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Turkish holidays table\nexport const holidays = pgTable(\"holidays\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  date: date(\"date\").notNull(),\n  type: varchar(\"type\").notNull(), // national, religious, local\n  isOfficial: boolean(\"is_official\").default(true),\n  description: text(\"description\"),\n  year: varchar(\"year\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  recipientId: varchar(\"recipient_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\").notNull(), // sms, email, push, system\n  status: varchar(\"status\").default(\"pending\"), // pending, sent, delivered, failed\n  priority: varchar(\"priority\").default(\"normal\"), // low, normal, high, urgent\n  scheduledFor: timestamp(\"scheduled_for\"),\n  sentAt: timestamp(\"sent_at\"),\n  deliveredAt: timestamp(\"delivered_at\"),\n  readAt: timestamp(\"read_at\"),\n  relatedEntity: varchar(\"related_entity\"), // leave_request, shift_assignment, etc.\n  relatedEntityId: varchar(\"related_entity_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Mobile device management table\nexport const mobileDevices = pgTable(\"mobile_devices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  deviceId: varchar(\"device_id\").unique().notNull(),\n  deviceName: varchar(\"device_name\"),\n  platform: varchar(\"platform\"), // ios, android\n  appVersion: varchar(\"app_version\"),\n  isActive: boolean(\"is_active\").default(true),\n  lastUsed: timestamp(\"last_used\"),\n  fcmToken: varchar(\"fcm_token\"), // For push notifications\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// System settings table\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").unique().notNull(),\n  value: text(\"value\"),\n  description: text(\"description\"),\n  category: varchar(\"category\").default(\"general\"), // general, security, notification, mobile\n  dataType: varchar(\"data_type\").default(\"string\"), // string, number, boolean, json\n  isEditable: boolean(\"is_editable\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Shift templates table\nexport const shiftTemplates = pgTable(\"shift_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  templateData: jsonb(\"template_data\").notNull(), // JSON with shift patterns\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Shift change requests table\nexport const shiftChangeRequests = pgTable(\"shift_change_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requesterId: varchar(\"requester_id\").references(() => personnel.id).notNull(),\n  originalShiftId: varchar(\"original_shift_id\").references(() => shiftAssignments.id).notNull(),\n  proposedShiftId: varchar(\"proposed_shift_id\").references(() => shiftAssignments.id),\n  targetPersonnelId: varchar(\"target_personnel_id\").references(() => personnel.id), // For shift swaps\n  reason: text(\"reason\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, approved, rejected\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  personnel: one(personnel, {\n    fields: [users.id],\n    references: [personnel.userId],\n  }),\n  managedDepartments: many(departments),\n  managedBranches: many(branches),\n  approvedLeaves: many(leaveRequests),\n}));\n\nexport const departmentsRelations = relations(departments, ({ one, many }) => ({\n  manager: one(users, {\n    fields: [departments.managerId],\n    references: [users.id],\n  }),\n  personnel: many(personnel),\n}));\n\nexport const branchesRelations = relations(branches, ({ one, many }) => ({\n  manager: one(users, {\n    fields: [branches.managerId],\n    references: [users.id],\n  }),\n  personnel: many(personnel),\n}));\n\nexport const personnelRelations = relations(personnel, ({ one, many }) => ({\n  user: one(users, {\n    fields: [personnel.userId],\n    references: [users.id],\n  }),\n  department: one(departments, {\n    fields: [personnel.departmentId],\n    references: [departments.id],\n  }),\n  branch: one(branches, {\n    fields: [personnel.branchId],\n    references: [branches.id],\n  }),\n  leaveRequests: many(leaveRequests),\n  shiftAssignments: many(shiftAssignments),\n  attendanceRecords: many(attendanceRecords),\n  educationRecords: many(educationRecords),\n  healthRecords: many(healthRecords),\n  documents: many(documents),\n  performanceEvaluations: many(performanceEvaluations),\n  shiftChangeRequests: many(shiftChangeRequests),\n}));\n\nexport const leaveTypesRelations = relations(leaveTypes, ({ many }) => ({\n  leaveRequests: many(leaveRequests),\n}));\n\nexport const leaveRequestsRelations = relations(leaveRequests, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [leaveRequests.personnelId],\n    references: [personnel.id],\n  }),\n  leaveType: one(leaveTypes, {\n    fields: [leaveRequests.leaveTypeId],\n    references: [leaveTypes.id],\n  }),\n  approver: one(users, {\n    fields: [leaveRequests.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const shiftsRelations = relations(shifts, ({ many }) => ({\n  assignments: many(shiftAssignments),\n}));\n\nexport const shiftAssignmentsRelations = relations(shiftAssignments, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [shiftAssignments.personnelId],\n    references: [personnel.id],\n  }),\n  shift: one(shifts, {\n    fields: [shiftAssignments.shiftId],\n    references: [shifts.id],\n  }),\n}));\n\nexport const attendanceRecordsRelations = relations(attendanceRecords, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [attendanceRecords.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\n// New table relations\nexport const educationRecordsRelations = relations(educationRecords, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [educationRecords.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\nexport const healthRecordsRelations = relations(healthRecords, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [healthRecords.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [documents.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\nexport const performanceEvaluationsRelations = relations(performanceEvaluations, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [performanceEvaluations.personnelId],\n    references: [personnel.id],\n  }),\n  evaluator: one(users, {\n    fields: [performanceEvaluations.evaluatorId],\n    references: [users.id],\n  }),\n}));\n\nexport const qrCodesRelations = relations(qrCodes, ({ one }) => ({\n  branch: one(branches, {\n    fields: [qrCodes.branchId],\n    references: [branches.id],\n  }),\n}));\n\nexport const calendarEventsRelations = relations(calendarEvents, ({ one }) => ({\n  organizer: one(users, {\n    fields: [calendarEvents.organizerId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  recipient: one(users, {\n    fields: [notifications.recipientId],\n    references: [users.id],\n  }),\n}));\n\nexport const mobileDevicesRelations = relations(mobileDevices, ({ one }) => ({\n  user: one(users, {\n    fields: [mobileDevices.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const shiftTemplatesRelations = relations(shiftTemplates, ({ one }) => ({\n  creator: one(users, {\n    fields: [shiftTemplates.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const shiftChangeRequestsRelations = relations(shiftChangeRequests, ({ one }) => ({\n  requester: one(personnel, {\n    fields: [shiftChangeRequests.requesterId],\n    references: [personnel.id],\n  }),\n  originalShift: one(shiftAssignments, {\n    fields: [shiftChangeRequests.originalShiftId],\n    references: [shiftAssignments.id],\n  }),\n  proposedShift: one(shiftAssignments, {\n    fields: [shiftChangeRequests.proposedShiftId],\n    references: [shiftAssignments.id],\n  }),\n  targetPersonnel: one(personnel, {\n    fields: [shiftChangeRequests.targetPersonnelId],\n    references: [personnel.id],\n  }),\n  approver: one(users, {\n    fields: [shiftChangeRequests.approvedBy],\n    references: [users.id],\n  }),\n}));\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertBranchSchema = createInsertSchema(branches).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertPersonnelSchema = createInsertSchema(personnel).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertLeaveTypeSchema = createInsertSchema(leaveTypes).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertShiftSchema = createInsertSchema(shifts).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertShiftAssignmentSchema = createInsertSchema(shiftAssignments).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertAttendanceRecordSchema = createInsertSchema(attendanceRecords).omit({ id: true, createdAt: true, updatedAt: true });\n\n// New table schemas\nexport const insertEducationRecordSchema = createInsertSchema(educationRecords).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertHealthRecordSchema = createInsertSchema(healthRecords).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertDocumentSchema = createInsertSchema(documents).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertPerformanceEvaluationSchema = createInsertSchema(performanceEvaluations).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertQrCodeSchema = createInsertSchema(qrCodes).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertHolidaySchema = createInsertSchema(holidays).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertMobileDeviceSchema = createInsertSchema(mobileDevices).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertSystemSettingSchema = createInsertSchema(systemSettings).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertShiftTemplateSchema = createInsertSchema(shiftTemplates).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertShiftChangeRequestSchema = createInsertSchema(shiftChangeRequests).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Department = typeof departments.$inferSelect;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type Branch = typeof branches.$inferSelect;\nexport type InsertBranch = z.infer<typeof insertBranchSchema>;\nexport type Personnel = typeof personnel.$inferSelect;\nexport type InsertPersonnel = z.infer<typeof insertPersonnelSchema>;\nexport type LeaveType = typeof leaveTypes.$inferSelect;\nexport type InsertLeaveType = z.infer<typeof insertLeaveTypeSchema>;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;\nexport type InsertLeaveRequest = z.infer<typeof insertLeaveRequestSchema>;\nexport type Shift = typeof shifts.$inferSelect;\nexport type InsertShift = z.infer<typeof insertShiftSchema>;\nexport type ShiftAssignment = typeof shiftAssignments.$inferSelect;\nexport type InsertShiftAssignment = z.infer<typeof insertShiftAssignmentSchema>;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertAttendanceRecord = z.infer<typeof insertAttendanceRecordSchema>;\n\n// New table types\nexport type EducationRecord = typeof educationRecords.$inferSelect;\nexport type InsertEducationRecord = z.infer<typeof insertEducationRecordSchema>;\nexport type HealthRecord = typeof healthRecords.$inferSelect;\nexport type InsertHealthRecord = z.infer<typeof insertHealthRecordSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type PerformanceEvaluation = typeof performanceEvaluations.$inferSelect;\nexport type InsertPerformanceEvaluation = z.infer<typeof insertPerformanceEvaluationSchema>;\nexport type QrCode = typeof qrCodes.$inferSelect;\nexport type InsertQrCode = z.infer<typeof insertQrCodeSchema>;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type Holiday = typeof holidays.$inferSelect;\nexport type InsertHoliday = z.infer<typeof insertHolidaySchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type MobileDevice = typeof mobileDevices.$inferSelect;\nexport type InsertMobileDevice = z.infer<typeof insertMobileDeviceSchema>;\nexport type SystemSetting = typeof systemSettings.$inferSelect;\nexport type InsertSystemSetting = z.infer<typeof insertSystemSettingSchema>;\nexport type ShiftTemplate = typeof shiftTemplates.$inferSelect;\nexport type InsertShiftTemplate = z.infer<typeof insertShiftTemplateSchema>;\nexport type ShiftChangeRequest = typeof shiftChangeRequests.$inferSelect;\nexport type InsertShiftChangeRequest = z.infer<typeof insertShiftChangeRequestSchema>;\n\n// Extended types with relations\nexport type PersonnelWithRelations = Personnel & {\n  department?: Department;\n  branch?: Branch;\n  user?: User;\n  educationRecords?: EducationRecord[];\n  healthRecords?: HealthRecord[];\n  documents?: Document[];\n  performanceEvaluations?: PerformanceEvaluation[];\n};\n\nexport type LeaveRequestWithRelations = LeaveRequest & {\n  personnel?: Personnel;\n  leaveType?: LeaveType;\n  approver?: User;\n};\n\nexport type ShiftAssignmentWithRelations = ShiftAssignment & {\n  personnel?: Personnel;\n  shift?: Shift;\n};\n\nexport type PerformanceEvaluationWithRelations = PerformanceEvaluation & {\n  personnel?: Personnel;\n  evaluator?: User;\n};\n\nexport type CalendarEventWithRelations = CalendarEvent & {\n  organizer?: User;\n};\n\nexport type ShiftChangeRequestWithRelations = ShiftChangeRequest & {\n  requester?: Personnel;\n  originalShift?: ShiftAssignment;\n  proposedShift?: ShiftAssignment;\n  targetPersonnel?: Personnel;\n  approver?: User;\n};\n\nexport type NotificationWithRelations = Notification & {\n  recipient?: User;\n};\n\n// Security Enhancement Tables\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  sessionId: varchar(\"session_id\").notNull(),\n  deviceInfo: jsonb(\"device_info\"), // Browser, OS, etc.\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: varchar(\"user_agent\"),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userDevices = pgTable(\"user_devices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  deviceFingerprint: varchar(\"device_fingerprint\").notNull(),\n  deviceName: varchar(\"device_name\"),\n  deviceType: varchar(\"device_type\"), // desktop, mobile, tablet\n  browser: varchar(\"browser\"),\n  os: varchar(\"os\"),\n  isTrusted: boolean(\"is_trusted\").default(false),\n  lastUsed: timestamp(\"last_used\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const securityLogs = pgTable(\"security_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  eventType: varchar(\"event_type\").notNull(), // login, logout, 2fa_enabled, password_reset, etc.\n  eventLevel: varchar(\"event_level\").default(\"info\"), // info, warning, error, critical\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: varchar(\"user_agent\"),\n  details: jsonb(\"details\"), // Additional event details\n  success: boolean(\"success\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const loginAttempts = pgTable(\"login_attempts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\"),\n  ipAddress: varchar(\"ip_address\").notNull(),\n  userAgent: varchar(\"user_agent\"),\n  success: boolean(\"success\").notNull(),\n  failureReason: varchar(\"failure_reason\"),\n  blocked: boolean(\"blocked\").default(false),\n  attemptedAt: timestamp(\"attempted_at\").defaultNow(),\n});\n\nexport const twoFactorBackupCodes = pgTable(\"two_factor_backup_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  code: varchar(\"code\").notNull(),\n  used: boolean(\"used\").default(false),\n  usedAt: timestamp(\"used_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Security table relations\nexport const securityRelations = relations(users, ({ many }) => ({\n  userSessions: many(userSessions),\n  userDevices: many(userDevices),\n  securityLogs: many(securityLogs),\n  backupCodes: many(twoFactorBackupCodes),\n}));\n\nexport const userSessionRelations = relations(userSessions, ({ one }) => ({\n  user: one(users, {\n    fields: [userSessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userDeviceRelations = relations(userDevices, ({ one }) => ({\n  user: one(users, {\n    fields: [userDevices.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const securityLogRelations = relations(securityLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [securityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const backupCodeRelations = relations(twoFactorBackupCodes, ({ one }) => ({\n  user: one(users, {\n    fields: [twoFactorBackupCodes.userId],\n    references: [users.id],\n  }),\n}));\n\n// Security types\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = typeof userSessions.$inferInsert;\n\nexport type UserDevice = typeof userDevices.$inferSelect;\nexport type InsertUserDevice = typeof userDevices.$inferInsert;\n\nexport type SecurityLog = typeof securityLogs.$inferSelect;\nexport type InsertSecurityLog = typeof securityLogs.$inferInsert;\n\nexport type LoginAttempt = typeof loginAttempts.$inferSelect;\nexport type InsertLoginAttempt = typeof loginAttempts.$inferInsert;\n\nexport type TwoFactorBackupCode = typeof twoFactorBackupCodes.$inferSelect;\nexport type InsertTwoFactorBackupCode = typeof twoFactorBackupCodes.$inferInsert;\n","size_bytes":31877},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { MainLayout } from \"@/components/Layout/MainLayout\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Pages\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Personnel from \"@/pages/Personnel\";\nimport Leave from \"@/pages/Leave\";\nimport Shift from \"@/pages/Shift\";\nimport QrCodeManagement from \"@/pages/QrCodeManagement\";\nimport Branch from \"@/pages/Branch\";\nimport Calendar from \"@/pages/Calendar\";\nimport Notifications from \"@/pages/Notifications\";\nimport Reports from \"@/pages/Reports\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [activeMenuItem, setActiveMenuItem] = useState(\"dashboard\");\n\n  const handleMenuItemChange = (item: string) => {\n    setActiveMenuItem(item);\n  };\n\n  const handleAddPersonnel = () => {\n    setActiveMenuItem(\"personnel\");\n  };\n\n  const handleCreateShift = () => {\n    toast({\n      title: \"Vardiya Oluştur\",\n      description: \"Vardiya oluşturma özelliği yakında eklenecek.\",\n    });\n  };\n\n  const handleGenerateReport = () => {\n    setActiveMenuItem(\"reports\");\n  };\n\n  const handleSendNotification = () => {\n    toast({\n      title: \"Bildirim Gönder\",\n      description: \"Bildirim gönderme özelliği yakında eklenecek.\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <Route path=\"/\">\n          {() => (\n            <MainLayout \n              activeMenuItem={activeMenuItem} \n              onMenuItemChange={handleMenuItemChange}\n            >\n              {activeMenuItem === \"dashboard\" && (\n                <Dashboard\n                  onAddPersonnel={handleAddPersonnel}\n                  onCreateShift={handleCreateShift}\n                  onGenerateReport={handleGenerateReport}\n                  onSendNotification={handleSendNotification}\n                />\n              )}\n              {activeMenuItem === \"personnel\" && <Personnel />}\n              {activeMenuItem === \"leave\" && <Leave />}\n              {activeMenuItem === \"shift\" && <Shift />}\n              {activeMenuItem === \"attendance\" && <QrCodeManagement />}\n              {activeMenuItem === \"calendar\" && <Calendar />}\n              {activeMenuItem === \"notifications\" && <Notifications />}\n              {activeMenuItem === \"branch\" && <Branch />}\n              {activeMenuItem === \"calendar\" && (\n                <div className=\"px-4 py-6 sm:px-6 lg:px-8\">\n                  <h1 className=\"text-2xl font-bold\">Takvim</h1>\n                  <p className=\"text-muted-foreground mt-2\">Bu özellik yakında eklenecek.</p>\n                </div>\n              )}\n              {activeMenuItem === \"reports\" && <Reports />}\n              {activeMenuItem === \"settings\" && (\n                <div className=\"px-4 py-6 sm:px-6 lg:px-8\">\n                  <h1 className=\"text-2xl font-bold\">Ayarlar</h1>\n                  <p className=\"text-muted-foreground mt-2\">Bu özellik yakında eklenecek.</p>\n                </div>\n              )}\n            </MainLayout>\n          )}\n        </Route>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3995},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n.sidebar-transition {\n  transition: transform 0.3s ease-in-out;\n}\n\n.modal-backdrop {\n  backdrop-filter: blur(2px);\n}\n","size_bytes":3866},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Calendar.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Calendar, Plus, MapPin, Clock, Users, Star, Download } from 'lucide-react';\nimport type { CalendarEvent, CalendarEventWithRelations, Holiday } from '@shared/schema';\n\ninterface CalendarEventWithImage extends CalendarEventWithRelations {\n  attendeesCount?: number;\n}\n\nexport default function CalendarPage() {\n  const [events, setEvents] = useState<CalendarEventWithImage[]>([]);\n  const [holidays, setHolidays] = useState<Holiday[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [viewMode, setViewMode] = useState<'month' | 'week' | 'day'>('month');\n\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    description: '',\n    eventDate: new Date().toISOString().split('T')[0],\n    startTime: '09:00',\n    endTime: '17:00',\n    type: 'meeting' as const,\n    location: '',\n    isRecurring: false,\n    recurrencePattern: '',\n    color: '#3B82F6',\n    isPublic: true,\n    reminderMinutes: 15,\n    attendees: [] as string[],\n  });\n\n  useEffect(() => {\n    loadEvents();\n    loadHolidays();\n  }, [selectedDate, viewMode]);\n\n  const loadEvents = async () => {\n    try {\n      const startDate = getViewStartDate();\n      const endDate = getViewEndDate();\n      \n      const response = await fetch(`/api/calendar/events?startDate=${startDate}&endDate=${endDate}`, {\n        headers: { 'Accept': 'application/json' }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setEvents(data);\n      }\n    } catch (error) {\n      console.error('Error loading events:', error);\n      setMessage('Etkinlikler yüklenirken hata oluştu');\n    }\n  };\n\n  const loadHolidays = async () => {\n    try {\n      const currentYear = new Date(selectedDate).getFullYear().toString();\n      const response = await fetch(`/api/calendar/holidays?year=${currentYear}`, {\n        headers: { 'Accept': 'application/json' }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setHolidays(data);\n      }\n    } catch (error) {\n      console.error('Error loading holidays:', error);\n    }\n  };\n\n  const createEvent = async () => {\n    if (!newEvent.title || !newEvent.eventDate) {\n      setMessage('Başlık ve tarih bilgileri zorunludur');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/calendar/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          ...newEvent,\n          attendees: JSON.stringify(newEvent.attendees),\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setEvents([...events, data]);\n        setNewEvent({\n          title: '',\n          description: '',\n          eventDate: new Date().toISOString().split('T')[0],\n          startTime: '09:00',\n          endTime: '17:00',\n          type: 'meeting' as const,\n          location: '',\n          isRecurring: false,\n          recurrencePattern: '',\n          color: '#3B82F6',\n          isPublic: true,\n          reminderMinutes: 15,\n          attendees: [],\n        });\n        setShowCreateForm(false);\n        setMessage('Etkinlik başarıyla oluşturuldu');\n      } else {\n        const error = await response.json();\n        setMessage(error.message || 'Etkinlik oluşturulamadı');\n      }\n    } catch (error) {\n      console.error('Error creating event:', error);\n      setMessage('Etkinlik oluşturulurken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const populateTurkishHolidays = async () => {\n    const currentYear = new Date(selectedDate).getFullYear().toString();\n    setLoading(true);\n    try {\n      const response = await fetch('/api/calendar/holidays/populate-turkish', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ year: currentYear }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setMessage(data.message);\n        loadHolidays(); // Refresh holidays list\n      } else {\n        const error = await response.json();\n        setMessage(error.message || 'Tatiller eklenemedi');\n      }\n    } catch (error) {\n      console.error('Error populating holidays:', error);\n      setMessage('Tatiller eklenirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getViewStartDate = () => {\n    const date = new Date(selectedDate);\n    switch (viewMode) {\n      case 'week':\n        const startOfWeek = new Date(date);\n        startOfWeek.setDate(date.getDate() - date.getDay());\n        return startOfWeek.toISOString().split('T')[0];\n      case 'day':\n        return selectedDate;\n      default: // month\n        const startOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n        return startOfMonth.toISOString().split('T')[0];\n    }\n  };\n\n  const getViewEndDate = () => {\n    const date = new Date(selectedDate);\n    switch (viewMode) {\n      case 'week':\n        const endOfWeek = new Date(date);\n        endOfWeek.setDate(date.getDate() - date.getDay() + 6);\n        return endOfWeek.toISOString().split('T')[0];\n      case 'day':\n        return selectedDate;\n      default: // month\n        const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n        return endOfMonth.toISOString().split('T')[0];\n    }\n  };\n\n  const getEventTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      meeting: 'bg-blue-100 text-blue-800',\n      training: 'bg-green-100 text-green-800',\n      holiday: 'bg-red-100 text-red-800',\n      deadline: 'bg-orange-100 text-orange-800',\n      celebration: 'bg-purple-100 text-purple-800',\n      other: 'bg-gray-100 text-gray-800',\n    };\n    return colors[type] || colors.other;\n  };\n\n  const formatTime = (time: string | null) => {\n    if (!time) return '';\n    return time.slice(0, 5); // Show only HH:MM\n  };\n\n  const isHoliday = (date: string) => {\n    return holidays.some(holiday => holiday.date === date);\n  };\n\n  const getHolidayForDate = (date: string) => {\n    return holidays.find(holiday => holiday.date === date);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <Calendar className=\"h-8 w-8\" />\n          <h1 className=\"text-3xl font-bold\">Takvim</h1>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant={viewMode === 'month' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setViewMode('month')}\n            >\n              Ay\n            </Button>\n            <Button\n              variant={viewMode === 'week' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setViewMode('week')}\n            >\n              Hafta\n            </Button>\n            <Button\n              variant={viewMode === 'day' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setViewMode('day')}\n            >\n              Gün\n            </Button>\n          </div>\n          <Input\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n            className=\"w-auto\"\n          />\n          <Button onClick={() => setShowCreateForm(true)} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Yeni Etkinlik\n          </Button>\n        </div>\n      </div>\n\n      {message && (\n        <Alert className=\"mb-6\">\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Main Calendar View */}\n        <div className=\"lg:col-span-3\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>\n                  {viewMode === 'month' && new Date(selectedDate).toLocaleDateString('tr-TR', { year: 'numeric', month: 'long' })}\n                  {viewMode === 'week' && `${getViewStartDate()} - ${getViewEndDate()}`}\n                  {viewMode === 'day' && new Date(selectedDate).toLocaleDateString('tr-TR', { \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric',\n                    weekday: 'long'\n                  })}\n                </CardTitle>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={populateTurkishHolidays}\n                  disabled={loading}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Download className=\"h-3 w-3\" />\n                  {loading ? 'Ekleniyor...' : 'TR Tatilleri Ekle'}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {events.map((event) => (\n                  <div \n                    key={event.id} \n                    className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\"\n                    style={{ borderLeftColor: event.color || '#3B82F6', borderLeftWidth: '4px' }}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold\">{event.title}</h3>\n                          <Badge className={getEventTypeColor(event.type)}>\n                            {event.type === 'meeting' && 'Toplantı'}\n                            {event.type === 'training' && 'Eğitim'}\n                            {event.type === 'holiday' && 'Tatil'}\n                            {event.type === 'deadline' && 'Son Tarih'}\n                            {event.type === 'celebration' && 'Kutlama'}\n                            {event.type === 'other' && 'Diğer'}\n                          </Badge>\n                          {!event.isPublic && (\n                            <Badge variant=\"outline\">Özel</Badge>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-1 text-sm text-gray-600\">\n                          <div className=\"flex items-center gap-2\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>\n                              {new Date(event.eventDate).toLocaleDateString('tr-TR')} \n                              {event.startTime && event.endTime && \n                                ` • ${formatTime(event.startTime)} - ${formatTime(event.endTime)}`\n                              }\n                            </span>\n                          </div>\n                          \n                          {event.location && (\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"h-3 w-3\" />\n                              <span>{event.location}</span>\n                            </div>\n                          )}\n                          \n                          {event.attendees && (\n                            <div className=\"flex items-center gap-2\">\n                              <Users className=\"h-3 w-3\" />\n                              <span>{JSON.parse(event.attendees as string || '[]').length} katılımcı</span>\n                            </div>\n                          )}\n                          \n                          {event.isRecurring && (\n                            <div className=\"flex items-center gap-2\">\n                              <Star className=\"h-3 w-3\" />\n                              <span>Tekrarlanan etkinlik</span>\n                            </div>\n                          )}\n                        </div>\n                        \n                        {event.description && (\n                          <p className=\"mt-2 text-sm text-gray-700\">{event.description}</p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                \n                {events.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    Bu tarih aralığında etkinlik bulunmuyor\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Holidays */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Tatiller</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {holidays.slice(0, 5).map((holiday) => (\n                  <div key={holiday.id} className=\"border-l-4 border-red-400 pl-3\">\n                    <p className=\"font-medium text-sm\">{holiday.name}</p>\n                    <p className=\"text-xs text-gray-600\">\n                      {new Date(holiday.date).toLocaleDateString('tr-TR')}\n                    </p>\n                    <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                      {holiday.type === 'public' ? 'Resmi' : 'Dini'} Tatil\n                    </Badge>\n                  </div>\n                ))}\n                {holidays.length === 0 && (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    Henüz tatil eklenmemiş\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Özet</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Bu Ay Etkinlik</span>\n                  <Badge variant=\"secondary\">{events.length}</Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Yaklaşan Tatiller</span>\n                  <Badge variant=\"secondary\">\n                    {holidays.filter(h => new Date(h.date) > new Date()).length}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Toplam Tatil</span>\n                  <Badge variant=\"secondary\">{holidays.length}</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Create Event Dialog */}\n      <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Yeni Etkinlik Oluştur</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"title\">Başlık *</Label>\n              <Input\n                id=\"title\"\n                value={newEvent.title}\n                onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n                placeholder=\"Etkinlik başlığı\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"event-date\">Tarih *</Label>\n                <Input\n                  id=\"event-date\"\n                  type=\"date\"\n                  value={newEvent.eventDate}\n                  onChange={(e) => setNewEvent({ ...newEvent, eventDate: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"event-type\">Tür</Label>\n                <Select\n                  value={newEvent.type}\n                  onValueChange={(value: any) => setNewEvent({ ...newEvent, type: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Etkinlik türü\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"meeting\">Toplantı</SelectItem>\n                    <SelectItem value=\"training\">Eğitim</SelectItem>\n                    <SelectItem value=\"holiday\">Tatil</SelectItem>\n                    <SelectItem value=\"deadline\">Son Tarih</SelectItem>\n                    <SelectItem value=\"celebration\">Kutlama</SelectItem>\n                    <SelectItem value=\"other\">Diğer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"start-time\">Başlangıç Saati</Label>\n                <Input\n                  id=\"start-time\"\n                  type=\"time\"\n                  value={newEvent.startTime}\n                  onChange={(e) => setNewEvent({ ...newEvent, startTime: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"end-time\">Bitiş Saati</Label>\n                <Input\n                  id=\"end-time\"\n                  type=\"time\"\n                  value={newEvent.endTime}\n                  onChange={(e) => setNewEvent({ ...newEvent, endTime: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"location\">Konum</Label>\n              <Input\n                id=\"location\"\n                value={newEvent.location}\n                onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\n                placeholder=\"Toplantı salonu, adres vb.\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Açıklama</Label>\n              <Textarea\n                id=\"description\"\n                value={newEvent.description}\n                onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n                placeholder=\"Etkinlik detayları\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"is-public\"\n                  checked={newEvent.isPublic}\n                  onChange={(e) => setNewEvent({ ...newEvent, isPublic: e.target.checked })}\n                />\n                <Label htmlFor=\"is-public\">Herkese açık</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"is-recurring\"\n                  checked={newEvent.isRecurring}\n                  onChange={(e) => setNewEvent({ ...newEvent, isRecurring: e.target.checked })}\n                />\n                <Label htmlFor=\"is-recurring\">Tekrarlanan</Label>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={createEvent} \n                disabled={loading || !newEvent.title || !newEvent.eventDate}\n                className=\"flex-1\"\n              >\n                {loading ? 'Oluşturuluyor...' : 'Oluştur'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowCreateForm(false)}\n                className=\"flex-1\"\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20795},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { StatsCards } from \"@/components/Dashboard/StatsCards\";\nimport { RecentActivities } from \"@/components/Dashboard/RecentActivities\";\nimport { QuickActions } from \"@/components/Dashboard/QuickActions\";\nimport { TodaysSchedule } from \"@/components/Dashboard/TodaysSchedule\";\n\ninterface DashboardProps {\n  onAddPersonnel: () => void;\n  onCreateShift: () => void;\n  onGenerateReport: () => void;\n  onSendNotification: () => void;\n}\n\nexport default function Dashboard({ \n  onAddPersonnel, \n  onCreateShift, \n  onGenerateReport, \n  onSendNotification \n}: DashboardProps) {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Yetki Hatası\",\n        description: \"Oturumunuz sona erdi. Yeniden giriş yapılıyor...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading, error } = useQuery<{\n    totalPersonnel: number;\n    onLeaveToday: number;\n    activeShifts: number;\n    pendingLeaves: number;\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  // Handle unauthorized error\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Yetki Hatası\",\n        description: \"Oturumunuz sona erdi. Yeniden giriş yapılıyor...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const defaultStats = {\n    totalPersonnel: 0,\n    onLeaveToday: 0,\n    activeShifts: 0,\n    pendingLeaves: 0,\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be redirected\n  }\n\n  return (\n    <div className=\"px-4 py-6 sm:px-6 lg:px-8\">\n      {/* Page Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-foreground\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">Personel yönetim sistemi genel görünümü</p>\n      </div>\n\n      {/* Stats Cards */}\n      <StatsCards \n        stats={stats || defaultStats} \n        isLoading={statsLoading} \n      />\n\n      {/* Main Dashboard Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Recent Activities */}\n        <div className=\"lg:col-span-2\">\n          <RecentActivities />\n        </div>\n\n        {/* Quick Actions & Today's Schedule */}\n        <div className=\"space-y-6\">\n          <QuickActions \n            onAddPersonnel={onAddPersonnel}\n            onCreateShift={onCreateShift}\n            onGenerateReport={onGenerateReport}\n            onSendNotification={onSendNotification}\n          />\n          <TodaysSchedule />\n        </div>\n      </div>\n\n      {error && !isUnauthorizedError(error) && (\n        <div className=\"mt-6 p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n          <p className=\"text-destructive font-medium\">Dashboard verileri yüklenirken hata oluştu</p>\n          <p className=\"text-sm text-muted-foreground mt-1\">{error.message}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3730},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Shield, Clock, BarChart3, Calendar, Building } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const features = [\n    {\n      icon: Users,\n      title: \"Personel Yönetimi\",\n      description: \"Tüm personel bilgilerini merkezi bir sistemde yönetin\"\n    },\n    {\n      icon: Calendar,\n      title: \"İzin Yönetimi\",\n      description: \"İzin talepleri ve onay süreçlerini dijital ortamda takip edin\"\n    },\n    {\n      icon: Clock,\n      title: \"Vardiya Yönetimi\",\n      description: \"Çalışma saatleri ve vardiya planlamalarını organize edin\"\n    },\n    {\n      icon: Shield,\n      title: \"QR Kod Giriş-Çıkış\",\n      description: \"Güvenli ve hızlı personel giriş-çıkış takibi\"\n    },\n    {\n      icon: Building,\n      title: \"Şube Yönetimi\",\n      description: \"Çoklu şube operasyonlarını tek platformdan yönetin\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Raporlama\",\n      description: \"Detaylı analiz ve raporlarla performansı izleyin\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center space-x-2 mb-6\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <Users className=\"h-8 w-8 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Personel Yönetim Sistemi</h1>\n          </div>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Modern teknolojilerle geliştirilmiş kapsamlı personel yönetim sistemi. \n            İnsan kaynakları süreçlerinizi dijitalleştirin ve verimliliğinizi artırın.\n          </p>\n          <Button size=\"lg\" onClick={handleLogin} data-testid=\"login-button\">\n            Sisteme Giriş Yap\n          </Button>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <Card key={index} className=\"shadow-sm hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <Icon className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription>{feature.description}</CardDescription>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Benefits */}\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-8\">Neden Bu Sistemi Seçmelisiniz?</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                <Clock className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold\">Zaman Tasarrufu</h3>\n              <p className=\"text-muted-foreground\">\n                Manuel süreçleri otomatikleştirerek zamanınızı daha verimli kullanın\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\n                <Shield className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold\">Güvenli Veriler</h3>\n              <p className=\"text-muted-foreground\">\n                Tüm personel verileri güvenli şekilde saklanır ve korunur\n              </p>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto\">\n                <BarChart3 className=\"h-8 w-8 text-purple-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold\">Akıllı Analiz</h3>\n              <p className=\"text-muted-foreground\">\n                Detaylı raporlar ve analizlerle daha iyi kararlar alın\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center mt-16 pt-8 border-t border-border\">\n          <p className=\"text-muted-foreground\">\n            © 2024 Personel Yönetim Sistemi. Tüm hakları saklıdır.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5060},"client/src/pages/Leave.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LeaveRequestList } from \"@/components/Leave/LeaveRequestList\";\nimport { LeaveTypesList } from \"@/components/Leave/LeaveTypesList\";\nimport { LeaveRequestModal } from \"@/components/Leave/LeaveRequestModal\";\nimport { LeaveTypeModal } from \"@/components/Leave/LeaveTypeModal\";\nimport { LeaveCalendarView } from \"@/components/Leave/LeaveCalendarView\";\nimport { LeaveStatistics } from \"@/components/Leave/LeaveStatistics\";\nimport { CalendarPlus, Settings } from \"lucide-react\";\n\nexport default function Leave() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [requestModalOpen, setRequestModalOpen] = useState(false);\n  const [typeModalOpen, setTypeModalOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Yetki Hatası\",\n        description: \"Oturumunuz sona erdi. Yeniden giriş yapılıyor...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be redirected\n  }\n\n  return (\n    <div className=\"px-4 py-6 sm:px-6 lg:px-8\">\n      {/* Page Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">İzin Yönetimi</h1>\n            <p className=\"text-muted-foreground\">\n              İzin talepleri ve izin türlerini yönetin\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => setRequestModalOpen(true)}\n              data-testid=\"button-new-leave-request\"\n            >\n              <CalendarPlus className=\"mr-2 h-4 w-4\" />\n              Yeni İzin Talebi\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setTypeModalOpen(true)}\n              data-testid=\"button-manage-leave-types\"\n            >\n              <Settings className=\"mr-2 h-4 w-4\" />\n              İzin Türleri\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"requests\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"requests\" data-testid=\"tab-leave-requests\">\n            İzin Talepleri\n          </TabsTrigger>\n          <TabsTrigger value=\"calendar\" data-testid=\"tab-leave-calendar\">\n            İzin Takvimi\n          </TabsTrigger>\n          <TabsTrigger value=\"statistics\" data-testid=\"tab-leave-statistics\">\n            İstatistikler\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"requests\" className=\"space-y-4\">\n          <LeaveRequestList />\n        </TabsContent>\n\n        <TabsContent value=\"calendar\" className=\"space-y-4\">\n          <LeaveCalendarView />\n        </TabsContent>\n\n        <TabsContent value=\"statistics\" className=\"space-y-4\">\n          <LeaveStatistics />\n        </TabsContent>\n      </Tabs>\n\n      {/* Modals */}\n      <LeaveRequestModal\n        open={requestModalOpen}\n        onOpenChange={setRequestModalOpen}\n      />\n\n      <LeaveTypeModal\n        open={typeModalOpen}\n        onOpenChange={setTypeModalOpen}\n      />\n    </div>\n  );\n}","size_bytes":3959},"client/src/pages/Notifications.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Bell, \n  Plus, \n  Send, \n  Users, \n  MessageSquare, \n  Clock, \n  CheckCircle, \n  AlertCircle,\n  Mail,\n  Smartphone,\n  FileText,\n  Filter\n} from 'lucide-react';\nimport type { Notification, NotificationWithRelations, Employee } from '@shared/schema';\n\ninterface NotificationTemplate {\n  id: string;\n  name: string;\n  title: string;\n  content: string;\n  type: string;\n  variables: string[];\n}\n\nexport default function NotificationsPage() {\n  const [notifications, setNotifications] = useState<NotificationWithRelations[]>([]);\n  const [templates, setTemplates] = useState<NotificationTemplate[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [selectedTab, setSelectedTab] = useState('list');\n  \n  // Filters\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n\n  // Create single notification form\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [newNotification, setNewNotification] = useState({\n    title: '',\n    content: '',\n    type: 'info' as const,\n    priority: 'normal' as const,\n    recipientId: '',\n    scheduledFor: '',\n    smsEnabled: false,\n    pushEnabled: true,\n    emailEnabled: false,\n  });\n\n  // Bulk notification form\n  const [showBulkForm, setShowBulkForm] = useState(false);\n  const [bulkNotification, setBulkNotification] = useState({\n    title: '',\n    content: '',\n    type: 'info' as const,\n    priority: 'normal' as const,\n    recipientIds: [] as string[],\n    templateId: '',\n    templateVariables: {} as Record<string, string>,\n  });\n\n  useEffect(() => {\n    loadNotifications();\n    loadTemplates();\n    loadEmployees();\n  }, [statusFilter, typeFilter]);\n\n  const loadNotifications = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      if (typeFilter !== 'all') params.append('type', typeFilter);\n      \n      const response = await fetch(`/api/notifications?${params.toString()}`, {\n        headers: { 'Accept': 'application/json' }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setNotifications(data);\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n      setMessage('Bildirimler yüklenirken hata oluştu');\n    }\n  };\n\n  const loadTemplates = async () => {\n    try {\n      const response = await fetch('/api/notifications/templates', {\n        headers: { 'Accept': 'application/json' }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTemplates(data);\n      }\n    } catch (error) {\n      console.error('Error loading templates:', error);\n    }\n  };\n\n  const loadEmployees = async () => {\n    try {\n      const response = await fetch('/api/personnel', {\n        headers: { 'Accept': 'application/json' }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setEmployees(data);\n      }\n    } catch (error) {\n      console.error('Error loading employees:', error);\n    }\n  };\n\n  const createNotification = async () => {\n    if (!newNotification.title || !newNotification.content || !newNotification.recipientId) {\n      setMessage('Başlık, içerik ve alıcı bilgileri zorunludur');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/notifications', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(newNotification),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setNotifications([data, ...notifications]);\n        setNewNotification({\n          title: '',\n          content: '',\n          type: 'info',\n          priority: 'normal',\n          recipientId: '',\n          scheduledFor: '',\n          smsEnabled: false,\n          pushEnabled: true,\n          emailEnabled: false,\n        });\n        setShowCreateForm(false);\n        setMessage('Bildirim başarıyla oluşturuldu');\n      } else {\n        const error = await response.json();\n        setMessage(error.message || 'Bildirim oluşturulamadı');\n      }\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      setMessage('Bildirim oluşturulurken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendBulkNotifications = async () => {\n    if (!bulkNotification.title || !bulkNotification.content || bulkNotification.recipientIds.length === 0) {\n      setMessage('Başlık, içerik ve en az bir alıcı seçimi zorunludur');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/notifications/send-bulk', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          recipientIds: bulkNotification.recipientIds,\n          title: bulkNotification.title,\n          content: bulkNotification.content,\n          type: bulkNotification.type,\n          priority: bulkNotification.priority,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setMessage(data.message);\n        setBulkNotification({\n          title: '',\n          content: '',\n          type: 'info',\n          priority: 'normal',\n          recipientIds: [],\n          templateId: '',\n          templateVariables: {},\n        });\n        setShowBulkForm(false);\n        loadNotifications(); // Refresh list\n      } else {\n        const error = await response.json();\n        setMessage(error.message || 'Toplu bildirim gönderilemedi');\n      }\n    } catch (error) {\n      console.error('Error sending bulk notifications:', error);\n      setMessage('Toplu bildirim gönderilirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (notificationId: string) => {\n    try {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'PATCH',\n        headers: { 'Accept': 'application/json' }\n      });\n\n      if (response.ok) {\n        const updatedNotification = await response.json();\n        setNotifications(notifications.map(n => \n          n.id === notificationId ? updatedNotification : n\n        ));\n      }\n    } catch (error) {\n      console.error('Error marking as read:', error);\n    }\n  };\n\n  const sendNotification = async (notificationId: string) => {\n    try {\n      const response = await fetch(`/api/notifications/${notificationId}/send`, {\n        method: 'POST',\n        headers: { 'Accept': 'application/json' }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setMessage(data.message);\n        loadNotifications(); // Refresh to show updated status\n      }\n    } catch (error) {\n      console.error('Error sending notification:', error);\n    }\n  };\n\n  const useTemplate = (template: NotificationTemplate) => {\n    setBulkNotification({\n      ...bulkNotification,\n      templateId: template.id,\n      title: template.title,\n      content: template.content,\n      type: template.type as any,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      draft: 'bg-gray-100 text-gray-800',\n      sent: 'bg-green-100 text-green-800',\n      read: 'bg-blue-100 text-blue-800',\n      failed: 'bg-red-100 text-red-800',\n    };\n    return colors[status as keyof typeof colors] || colors.draft;\n  };\n\n  const getTypeColor = (type: string) => {\n    const colors = {\n      info: 'bg-blue-100 text-blue-800',\n      success: 'bg-green-100 text-green-800',\n      warning: 'bg-yellow-100 text-yellow-800',\n      error: 'bg-red-100 text-red-800',\n      celebration: 'bg-purple-100 text-purple-800',\n    };\n    return colors[type as keyof typeof colors] || colors.info;\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high': return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'normal': return <Clock className=\"h-4 w-4 text-blue-500\" />;\n      case 'low': return <CheckCircle className=\"h-4 w-4 text-gray-500\" />;\n      default: return <Clock className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const toggleRecipientSelection = (employeeId: string) => {\n    const currentSelection = bulkNotification.recipientIds;\n    if (currentSelection.includes(employeeId)) {\n      setBulkNotification({\n        ...bulkNotification,\n        recipientIds: currentSelection.filter(id => id !== employeeId)\n      });\n    } else {\n      setBulkNotification({\n        ...bulkNotification,\n        recipientIds: [...currentSelection, employeeId]\n      });\n    }\n  };\n\n  const selectAllEmployees = () => {\n    setBulkNotification({\n      ...bulkNotification,\n      recipientIds: employees.map(emp => emp.id)\n    });\n  };\n\n  const clearSelection = () => {\n    setBulkNotification({\n      ...bulkNotification,\n      recipientIds: []\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <Bell className=\"h-8 w-8\" />\n          <h1 className=\"text-3xl font-bold\">Bildirim Sistemi</h1>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Button onClick={() => setShowCreateForm(true)} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Tekli Bildirim\n          </Button>\n          <Button onClick={() => setShowBulkForm(true)} variant=\"outline\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Toplu Bildirim\n          </Button>\n        </div>\n      </div>\n\n      {message && (\n        <Alert className=\"mb-6\">\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"list\">Bildirimler</TabsTrigger>\n          <TabsTrigger value=\"templates\">Şablonlar</TabsTrigger>\n          <TabsTrigger value=\"analytics\">İstatistikler</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"list\" className=\"space-y-6\">\n          {/* Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" />\n                Filtreler\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <Label>Durum</Label>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tümü</SelectItem>\n                      <SelectItem value=\"draft\">Taslak</SelectItem>\n                      <SelectItem value=\"sent\">Gönderildi</SelectItem>\n                      <SelectItem value=\"read\">Okundu</SelectItem>\n                      <SelectItem value=\"failed\">Başarısız</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex-1\">\n                  <Label>Tür</Label>\n                  <Select value={typeFilter} onValueChange={setTypeFilter}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tümü</SelectItem>\n                      <SelectItem value=\"info\">Bilgi</SelectItem>\n                      <SelectItem value=\"success\">Başarılı</SelectItem>\n                      <SelectItem value=\"warning\">Uyarı</SelectItem>\n                      <SelectItem value=\"error\">Hata</SelectItem>\n                      <SelectItem value=\"celebration\">Kutlama</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notifications List */}\n          <div className=\"grid gap-4\">\n            {notifications.map((notification) => (\n              <Card key={notification.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        {getPriorityIcon(notification.priority)}\n                        <h3 className=\"font-semibold\">{notification.title}</h3>\n                        <Badge className={getStatusColor(notification.status)}>\n                          {notification.status === 'draft' && 'Taslak'}\n                          {notification.status === 'sent' && 'Gönderildi'}\n                          {notification.status === 'read' && 'Okundu'}\n                          {notification.status === 'failed' && 'Başarısız'}\n                        </Badge>\n                        <Badge variant=\"outline\" className={getTypeColor(notification.type)}>\n                          {notification.type === 'info' && 'Bilgi'}\n                          {notification.type === 'success' && 'Başarılı'}\n                          {notification.type === 'warning' && 'Uyarı'}\n                          {notification.type === 'error' && 'Hata'}\n                          {notification.type === 'celebration' && 'Kutlama'}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"text-gray-700 mb-3\">{notification.content}</p>\n                      \n                      <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                        <span>Alıcı: {notification.recipientId}</span>\n                        <span>\n                          Oluşturulma: {new Date(notification.createdAt).toLocaleString('tr-TR')}\n                        </span>\n                        {notification.sentAt && (\n                          <span>\n                            Gönderilme: {new Date(notification.sentAt).toLocaleString('tr-TR')}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 ml-4\">\n                      {notification.status === 'draft' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => sendNotification(notification.id)}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <Send className=\"h-3 w-3\" />\n                          Gönder\n                        </Button>\n                      )}\n                      {notification.status === 'sent' && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => markAsRead(notification.id)}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <CheckCircle className=\"h-3 w-3\" />\n                          Okundu İşaretle\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n\n            {notifications.length === 0 && (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Bell className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Henüz bildirim bulunmuyor</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"templates\" className=\"space-y-6\">\n          <div className=\"grid gap-4\">\n            {templates.map((template) => (\n              <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <FileText className=\"h-5 w-5 text-blue-500\" />\n                        <h3 className=\"font-semibold\">{template.name}</h3>\n                        <Badge variant=\"outline\" className={getTypeColor(template.type)}>\n                          {template.type === 'info' && 'Bilgi'}\n                          {template.type === 'success' && 'Başarılı'}\n                          {template.type === 'warning' && 'Uyarı'}\n                          {template.type === 'error' && 'Hata'}\n                          {template.type === 'celebration' && 'Kutlama'}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"font-medium text-gray-800 mb-2\">{template.title}</p>\n                      <p className=\"text-gray-700 mb-3\">{template.content}</p>\n                      \n                      <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                        <span>Değişkenler:</span>\n                        {template.variables.map(variable => (\n                          <Badge key={variable} variant=\"secondary\" className=\"text-xs\">\n                            {`{${variable}}`}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <Button\n                      size=\"sm\"\n                      onClick={() => useTemplate(template)}\n                      className=\"ml-4\"\n                    >\n                      Kullan\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3\">\n                  <MessageSquare className=\"h-8 w-8 text-blue-500\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Toplam Bildirim</p>\n                    <p className=\"text-2xl font-bold\">{notifications.length}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3\">\n                  <Send className=\"h-8 w-8 text-green-500\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Gönderildi</p>\n                    <p className=\"text-2xl font-bold\">\n                      {notifications.filter(n => n.status === 'sent').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3\">\n                  <CheckCircle className=\"h-8 w-8 text-purple-500\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Okundu</p>\n                    <p className=\"text-2xl font-bold\">\n                      {notifications.filter(n => n.status === 'read').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3\">\n                  <AlertCircle className=\"h-8 w-8 text-red-500\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Başarısız</p>\n                    <p className=\"text-2xl font-bold\">\n                      {notifications.filter(n => n.status === 'failed').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Create Single Notification Dialog */}\n      <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Yeni Bildirim Oluştur</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"title\">Başlık *</Label>\n              <Input\n                id=\"title\"\n                value={newNotification.title}\n                onChange={(e) => setNewNotification({ ...newNotification, title: e.target.value })}\n                placeholder=\"Bildirim başlığı\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"content\">İçerik *</Label>\n              <Textarea\n                id=\"content\"\n                value={newNotification.content}\n                onChange={(e) => setNewNotification({ ...newNotification, content: e.target.value })}\n                placeholder=\"Bildirim içeriği\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"type\">Tür</Label>\n                <Select\n                  value={newNotification.type}\n                  onValueChange={(value: any) => setNewNotification({ ...newNotification, type: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"info\">Bilgi</SelectItem>\n                    <SelectItem value=\"success\">Başarılı</SelectItem>\n                    <SelectItem value=\"warning\">Uyarı</SelectItem>\n                    <SelectItem value=\"error\">Hata</SelectItem>\n                    <SelectItem value=\"celebration\">Kutlama</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"priority\">Öncelik</Label>\n                <Select\n                  value={newNotification.priority}\n                  onValueChange={(value: any) => setNewNotification({ ...newNotification, priority: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Düşük</SelectItem>\n                    <SelectItem value=\"normal\">Normal</SelectItem>\n                    <SelectItem value=\"high\">Yüksek</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"recipient\">Alıcı *</Label>\n              <Select\n                value={newNotification.recipientId}\n                onValueChange={(value) => setNewNotification({ ...newNotification, recipientId: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Personel seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {employees.map((employee) => (\n                    <SelectItem key={employee.id} value={employee.id}>\n                      {employee.firstName} {employee.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={createNotification} \n                disabled={loading || !newNotification.title || !newNotification.content || !newNotification.recipientId}\n                className=\"flex-1\"\n              >\n                {loading ? 'Oluşturuluyor...' : 'Oluştur'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowCreateForm(false)}\n                className=\"flex-1\"\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Notification Dialog */}\n      <Dialog open={showBulkForm} onOpenChange={setShowBulkForm}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Toplu Bildirim Gönder</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"bulk-title\">Başlık *</Label>\n                <Input\n                  id=\"bulk-title\"\n                  value={bulkNotification.title}\n                  onChange={(e) => setBulkNotification({ ...bulkNotification, title: e.target.value })}\n                  placeholder=\"Bildirim başlığı\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"template\">Şablon Kullan</Label>\n                <Select\n                  value={bulkNotification.templateId}\n                  onValueChange={(templateId) => {\n                    const template = templates.find(t => t.id === templateId);\n                    if (template) useTemplate(template);\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Şablon seç (isteğe bağlı)\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {templates.map((template) => (\n                      <SelectItem key={template.id} value={template.id}>\n                        {template.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"bulk-content\">İçerik *</Label>\n              <Textarea\n                id=\"bulk-content\"\n                value={bulkNotification.content}\n                onChange={(e) => setBulkNotification({ ...bulkNotification, content: e.target.value })}\n                placeholder=\"Bildirim içeriği\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"bulk-type\">Tür</Label>\n                <Select\n                  value={bulkNotification.type}\n                  onValueChange={(value: any) => setBulkNotification({ ...bulkNotification, type: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"info\">Bilgi</SelectItem>\n                    <SelectItem value=\"success\">Başarılı</SelectItem>\n                    <SelectItem value=\"warning\">Uyarı</SelectItem>\n                    <SelectItem value=\"error\">Hata</SelectItem>\n                    <SelectItem value=\"celebration\">Kutlama</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"bulk-priority\">Öncelik</Label>\n                <Select\n                  value={bulkNotification.priority}\n                  onValueChange={(value: any) => setBulkNotification({ ...bulkNotification, priority: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Düşük</SelectItem>\n                    <SelectItem value=\"normal\">Normal</SelectItem>\n                    <SelectItem value=\"high\">Yüksek</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <Label>Alıcılar * ({bulkNotification.recipientIds.length} seçildi)</Label>\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" variant=\"outline\" onClick={selectAllEmployees}>\n                    Tümünü Seç\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={clearSelection}>\n                    Temizle\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"max-h-40 overflow-y-auto border rounded-lg p-4 space-y-2\">\n                {employees.map((employee) => (\n                  <div key={employee.id} className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id={`employee-${employee.id}`}\n                      checked={bulkNotification.recipientIds.includes(employee.id)}\n                      onChange={() => toggleRecipientSelection(employee.id)}\n                    />\n                    <Label htmlFor={`employee-${employee.id}`} className=\"text-sm\">\n                      {employee.firstName} {employee.lastName} - {employee.position}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={sendBulkNotifications} \n                disabled={loading || !bulkNotification.title || !bulkNotification.content || bulkNotification.recipientIds.length === 0}\n                className=\"flex-1\"\n              >\n                {loading ? 'Gönderiliyor...' : `${bulkNotification.recipientIds.length} Kişiye Gönder`}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowBulkForm(false)}\n                className=\"flex-1\"\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":31278},"client/src/pages/Personnel.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PersonnelList } from \"@/components/Personnel/PersonnelList\";\n\nexport default function Personnel() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Yetki Hatası\",\n        description: \"Oturumunuz sona erdi. Yeniden giriş yapılıyor...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be redirected\n  }\n\n  return (\n    <div className=\"px-4 py-6 sm:px-6 lg:px-8\">\n      {/* Page Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-foreground\">Personel Yönetimi</h1>\n        <p className=\"text-muted-foreground\">\n          Şirket personellerini ekleyin, düzenleyin ve yönetin\n        </p>\n      </div>\n\n      {/* Personnel List */}\n      <PersonnelList />\n    </div>\n  );\n}\n","size_bytes":1428},"client/src/pages/QrCodeManagement.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { QrCode, RefreshCw, Plus, Trash2, Eye } from 'lucide-react';\nimport type { QrCode as QrCodeType, Branch } from '@shared/schema';\n\ninterface QrCodeWithImage extends QrCodeType {\n  qrImage?: string;\n}\n\nexport default function QrCodeManagement() {\n  const [qrCodes, setQrCodes] = useState<QrCodeWithImage[]>([]);\n  const [branches, setBranches] = useState<Branch[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedQrCode, setSelectedQrCode] = useState<QrCodeWithImage | null>(null);\n  const [regeneratePin, setRegeneratePin] = useState('');\n\n  const [newQrCode, setNewQrCode] = useState({\n    branchId: '',\n    location: '',\n    description: '',\n    pinCode: '',\n    requirePin: false,\n  });\n\n  useEffect(() => {\n    loadQrCodes();\n    loadBranches();\n  }, []);\n\n  const loadQrCodes = async () => {\n    try {\n      const response = await fetch('/api/qr-codes', {\n        headers: { 'Accept': 'application/json' }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setQrCodes(data);\n      }\n    } catch (error) {\n      console.error('Error loading QR codes:', error);\n      setMessage('QR kodları yüklenirken hata oluştu');\n    }\n  };\n\n  const loadBranches = async () => {\n    try {\n      const response = await fetch('/api/branches', {\n        headers: { 'Accept': 'application/json' }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setBranches(data);\n      }\n    } catch (error) {\n      console.error('Error loading branches:', error);\n    }\n  };\n\n  const createQrCode = async () => {\n    if (!newQrCode.branchId || !newQrCode.location) {\n      setMessage('Şube ve konum bilgileri zorunludur');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/qr-codes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          ...newQrCode,\n          pinCode: newQrCode.requirePin ? newQrCode.pinCode : null,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setQrCodes([...qrCodes, data]);\n        setNewQrCode({\n          branchId: '',\n          location: '',\n          description: '',\n          pinCode: '',\n          requirePin: false,\n        });\n        setShowCreateForm(false);\n        setMessage('QR kod başarıyla oluşturuldu');\n      } else {\n        const error = await response.json();\n        setMessage(error.message || 'QR kod oluşturulamadı');\n      }\n    } catch (error) {\n      console.error('Error creating QR code:', error);\n      setMessage('QR kod oluşturulurken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const regenerateQrCode = async (qrCodeId: string, pinCode?: string) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/qr-codes/${qrCodeId}/regenerate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ pinCode }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setQrCodes(qrCodes.map(qr => qr.id === qrCodeId ? data : qr));\n        setMessage(data.message || 'QR kod yenilendi');\n        setRegeneratePin('');\n        setSelectedQrCode(null);\n      } else {\n        const error = await response.json();\n        setMessage(error.message || 'QR kod yenilenemedi');\n      }\n    } catch (error) {\n      console.error('Error regenerating QR code:', error);\n      setMessage('QR kod yenilenirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteQrCode = async (qrCodeId: string) => {\n    if (!confirm('Bu QR kodu deaktif etmek istediğinizden emin misiniz?')) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/qr-codes/${qrCodeId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        setQrCodes(qrCodes.filter(qr => qr.id !== qrCodeId));\n        setMessage('QR kod deaktif edildi');\n      } else {\n        setMessage('QR kod silinemedi');\n      }\n    } catch (error) {\n      console.error('Error deleting QR code:', error);\n      setMessage('QR kod silinirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getBranchName = (branchId: string) => {\n    const branch = branches.find(b => b.id === branchId);\n    return branch ? branch.name : 'Bilinmeyen Şube';\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <QrCode className=\"h-8 w-8\" />\n          <h1 className=\"text-3xl font-bold\">QR Kod Yönetimi</h1>\n        </div>\n        <Button onClick={() => setShowCreateForm(true)} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          Yeni QR Kod\n        </Button>\n      </div>\n\n      {message && (\n        <Alert className=\"mb-6\">\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* QR Codes Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {qrCodes.map((qrCode) => (\n          <Card key={qrCode.id} className=\"relative\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">{getBranchName(qrCode.branchId || '')}</CardTitle>\n                <Badge variant={qrCode.isActive ? 'default' : 'secondary'}>\n                  {qrCode.isActive ? 'Aktif' : 'Pasif'}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-gray-600\">{qrCode.location || 'Konum belirtilmemiş'}</p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* QR Code Image */}\n              {qrCode.qrImage && (\n                <div className=\"flex justify-center\">\n                  <img \n                    src={qrCode.qrImage} \n                    alt=\"QR Code\" \n                    className=\"w-48 h-48 border border-gray-200 rounded-lg\"\n                  />\n                </div>\n              )}\n\n              {/* Code Info */}\n              <div className=\"space-y-2 text-sm\">\n                <div>\n                  <Label className=\"font-medium\">Kod:</Label>\n                  <p className=\"font-mono text-xs break-all bg-gray-100 p-2 rounded\">\n                    {qrCode.codeValue}\n                  </p>\n                </div>\n                {qrCode.description && (\n                  <div>\n                    <Label className=\"font-medium\">Açıklama:</Label>\n                    <p>{qrCode.description}</p>\n                  </div>\n                )}\n                <div>\n                  <Label className=\"font-medium\">Oluşturulma:</Label>\n                  <p>{qrCode.createdAt ? new Date(qrCode.createdAt).toLocaleString('tr-TR') : 'Bilinmeyen'}</p>\n                </div>\n                {qrCode.pinCode !== null && qrCode.pinCode !== undefined && (\n                  <div className=\"flex items-center gap-2\">\n                    <Label className=\"font-medium\">PIN Korumalı</Label>\n                    <Badge variant=\"outline\">🔒</Badge>\n                  </div>\n                )}\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-2 pt-2\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setSelectedQrCode(qrCode)}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                      Görüntüle\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>QR Kod Detayı</DialogTitle>\n                    </DialogHeader>\n                    {selectedQrCode && (\n                      <div className=\"space-y-4\">\n                        {selectedQrCode.qrImage && (\n                          <div className=\"flex justify-center\">\n                            <img \n                              src={selectedQrCode.qrImage} \n                              alt=\"QR Code\" \n                              className=\"w-64 h-64 border border-gray-200 rounded-lg\"\n                            />\n                          </div>\n                        )}\n                        <div className=\"space-y-2 text-sm\">\n                          <div>\n                            <Label className=\"font-medium\">Şube:</Label>\n                            <p>{getBranchName(selectedQrCode.branchId || '')}</p>\n                          </div>\n                          <div>\n                            <Label className=\"font-medium\">Konum:</Label>\n                            <p>{selectedQrCode.location || 'Konum belirtilmemiş'}</p>\n                          </div>\n                          <div>\n                            <Label className=\"font-medium\">Kod:</Label>\n                            <p className=\"font-mono text-xs break-all bg-gray-100 p-2 rounded\">\n                              {selectedQrCode.codeValue}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </DialogContent>\n                </Dialog>\n\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setSelectedQrCode(qrCode)}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <RefreshCw className=\"h-3 w-3\" />\n                      Yenile\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>QR Kod Yenile</DialogTitle>\n                    </DialogHeader>\n                    {selectedQrCode && (\n                      <div className=\"space-y-4\">\n                        <p className=\"text-sm text-gray-600\">\n                          Bu işlem mevcut QR kodunu geçersiz kılar ve yeni bir kod üretir.\n                        </p>\n                        {selectedQrCode.pinCode !== null && selectedQrCode.pinCode !== undefined && (\n                          <div>\n                            <Label htmlFor=\"regenerate-pin\">PIN Kodu</Label>\n                            <Input\n                              id=\"regenerate-pin\"\n                              type=\"password\"\n                              value={regeneratePin}\n                              onChange={(e) => setRegeneratePin(e.target.value)}\n                              placeholder=\"PIN kodunu girin\"\n                            />\n                          </div>\n                        )}\n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={() => regenerateQrCode(selectedQrCode.id, regeneratePin)}\n                            disabled={loading || (selectedQrCode.pinCode !== null && selectedQrCode.pinCode !== undefined && !regeneratePin)}\n                            className=\"flex-1\"\n                          >\n                            {loading ? 'Yenileniyor...' : 'Yenile'}\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </DialogContent>\n                </Dialog>\n\n                <Button \n                  variant=\"destructive\" \n                  size=\"sm\" \n                  onClick={() => deleteQrCode(qrCode.id)}\n                  className=\"flex items-center gap-1\"\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                  Sil\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {qrCodes.length === 0 && (\n        <div className=\"text-center py-12\">\n          <QrCode className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-500 mb-2\">Henüz QR kod bulunmuyor</h3>\n          <p className=\"text-gray-400 mb-4\">QR kod oluşturarak personel giriş-çıkış takibini başlatabilirsiniz</p>\n          <Button onClick={() => setShowCreateForm(true)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            İlk QR Kodunu Oluştur\n          </Button>\n        </div>\n      )}\n\n      {/* Create QR Code Dialog */}\n      <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Yeni QR Kod Oluştur</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"branch\">Şube *</Label>\n              <Select\n                value={newQrCode.branchId}\n                onValueChange={(value) => setNewQrCode({ ...newQrCode, branchId: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Şube seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {branches.map((branch) => (\n                    <SelectItem key={branch.id} value={branch.id}>\n                      {branch.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"location\">Konum *</Label>\n              <Input\n                id=\"location\"\n                value={newQrCode.location}\n                onChange={(e) => setNewQrCode({ ...newQrCode, location: e.target.value })}\n                placeholder=\"Örn: Ana Giriş, Personel Kapısı\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Açıklama</Label>\n              <Textarea\n                id=\"description\"\n                value={newQrCode.description}\n                onChange={(e) => setNewQrCode({ ...newQrCode, description: e.target.value })}\n                placeholder=\"QR kod hakkında açıklama\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"require-pin\"\n                checked={newQrCode.requirePin}\n                onChange={(e) => setNewQrCode({ ...newQrCode, requirePin: e.target.checked })}\n              />\n              <Label htmlFor=\"require-pin\">PIN kod ile koruma</Label>\n            </div>\n\n            {newQrCode.requirePin && (\n              <div>\n                <Label htmlFor=\"pin-code\">PIN Kodu</Label>\n                <Input\n                  id=\"pin-code\"\n                  type=\"password\"\n                  value={newQrCode.pinCode}\n                  onChange={(e) => setNewQrCode({ ...newQrCode, pinCode: e.target.value })}\n                  placeholder=\"4-6 haneli PIN\"\n                />\n              </div>\n            )}\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={createQrCode} \n                disabled={loading || !newQrCode.branchId || !newQrCode.location}\n                className=\"flex-1\"\n              >\n                {loading ? 'Oluşturuluyor...' : 'Oluştur'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowCreateForm(false)}\n                className=\"flex-1\"\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16806},"client/src/pages/Shift.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ShiftList } from \"@/components/Shift/ShiftList\";\nimport { ShiftAssignmentList } from \"@/components/Shift/ShiftAssignmentList\";\nimport { ShiftModal } from \"@/components/Shift/ShiftModal\";\nimport { ShiftAssignmentModal } from \"@/components/Shift/ShiftAssignmentModal\";\nimport { ShiftCalendar } from \"@/components/Shift/ShiftCalendar\";\nimport { ShiftTemplates } from \"@/components/Shift/ShiftTemplates\";\nimport { ShiftChangeRequests } from \"@/components/Shift/ShiftChangeRequests\";\nimport { CalendarClock, UserPlus, Clock } from \"lucide-react\";\n\nexport default function Shift() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [shiftModalOpen, setShiftModalOpen] = useState(false);\n  const [assignmentModalOpen, setAssignmentModalOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Yetki Hatası\",\n        description: \"Oturumunuz sona erdi. Yeniden giriş yapılıyor...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be redirected\n  }\n\n  return (\n    <div className=\"px-4 py-6 sm:px-6 lg:px-8\">\n      {/* Page Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Vardiya Yönetimi</h1>\n            <p className=\"text-muted-foreground\">\n              Vardiyaları tanımlayın ve personel atamalarını yönetin\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => setShiftModalOpen(true)}\n              data-testid=\"button-new-shift\"\n            >\n              <Clock className=\"mr-2 h-4 w-4\" />\n              Yeni Vardiya\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setAssignmentModalOpen(true)}\n              data-testid=\"button-assign-shift\"\n            >\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Vardiya Ataması\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"shifts\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"shifts\" data-testid=\"tab-shifts\">\n            Vardiya Tanımları\n          </TabsTrigger>\n          <TabsTrigger value=\"assignments\" data-testid=\"tab-assignments\">\n            Vardiya Atamaları\n          </TabsTrigger>\n          <TabsTrigger value=\"calendar\" data-testid=\"tab-shift-calendar\">\n            Vardiya Takvimi\n          </TabsTrigger>\n          <TabsTrigger value=\"templates\" data-testid=\"tab-shift-templates\">\n            Şablonlar\n          </TabsTrigger>\n          <TabsTrigger value=\"requests\" data-testid=\"tab-shift-requests\">\n            Değişim Talepleri\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"shifts\" className=\"space-y-4\">\n          <ShiftList />\n        </TabsContent>\n\n        <TabsContent value=\"assignments\" className=\"space-y-4\">\n          <ShiftAssignmentList />\n        </TabsContent>\n\n        <TabsContent value=\"calendar\" className=\"space-y-4\">\n          <ShiftCalendar />\n        </TabsContent>\n\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <ShiftTemplates />\n        </TabsContent>\n\n        <TabsContent value=\"requests\" className=\"space-y-4\">\n          <ShiftChangeRequests />\n        </TabsContent>\n      </Tabs>\n\n      {/* Modals */}\n      <ShiftModal\n        open={shiftModalOpen}\n        onOpenChange={setShiftModalOpen}\n      />\n\n      <ShiftAssignmentModal\n        open={assignmentModalOpen}\n        onOpenChange={setAssignmentModalOpen}\n      />\n    </div>\n  );\n}","size_bytes":4518},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/Dashboard/QuickActions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserPlus, CalendarPlus, FileText, Megaphone } from \"lucide-react\";\n\ninterface QuickActionsProps {\n  onAddPersonnel: () => void;\n  onCreateShift: () => void;\n  onGenerateReport: () => void;\n  onSendNotification: () => void;\n}\n\nexport function QuickActions({ \n  onAddPersonnel, \n  onCreateShift, \n  onGenerateReport, \n  onSendNotification \n}: QuickActionsProps) {\n  const quickActionItems = [\n    {\n      title: \"Yeni Personel Ekle\",\n      icon: UserPlus,\n      onClick: onAddPersonnel,\n      bgColor: \"bg-primary/10\",\n      iconColor: \"text-primary\",\n      testId: \"quick-action-add-personnel\"\n    },\n    {\n      title: \"Vardiya Oluştur\",\n      icon: CalendarPlus,\n      onClick: onCreateShift,\n      bgColor: \"bg-green-500/10\",\n      iconColor: \"text-green-600\",\n      testId: \"quick-action-create-shift\"\n    },\n    {\n      title: \"Rapor Oluştur\",\n      icon: FileText,\n      onClick: onGenerateReport,\n      bgColor: \"bg-blue-500/10\",\n      iconColor: \"text-blue-600\",\n      testId: \"quick-action-generate-report\"\n    },\n    {\n      title: \"Bildirim Gönder\",\n      icon: Megaphone,\n      onClick: onSendNotification,\n      bgColor: \"bg-purple-500/10\",\n      iconColor: \"text-purple-600\",\n      testId: \"quick-action-send-notification\"\n    }\n  ];\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">Hızlı İşlemler</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {quickActionItems.map((item, index) => {\n            const Icon = item.icon;\n            return (\n              <Button\n                key={index}\n                variant=\"ghost\"\n                className=\"w-full justify-start space-x-3 h-auto p-3\"\n                onClick={item.onClick}\n                data-testid={item.testId}\n              >\n                <div className={`w-8 h-8 ${item.bgColor} rounded-lg flex items-center justify-center`}>\n                  <Icon className={`text-sm ${item.iconColor}`} size={16} />\n                </div>\n                <span className=\"text-sm\">{item.title}</span>\n              </Button>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2344},"client/src/components/Dashboard/RecentActivities.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserPlus, Calendar, Clock, AlertTriangle } from \"lucide-react\";\n\n// For now using static data, will be replaced with API data later\nconst activities = [\n  {\n    id: 1,\n    type: \"user_added\",\n    user: \"Mehmet Demir\",\n    action: \"sisteme yeni personel ekledi\",\n    time: \"2 saat önce\",\n    icon: UserPlus,\n    iconBg: \"bg-green-500/10\",\n    iconColor: \"text-green-600\"\n  },\n  {\n    id: 2,\n    type: \"leave_approved\",\n    user: \"Ayşe Kaya\",\n    action: \"izin talebini onayladı\",\n    time: \"4 saat önce\",\n    icon: Calendar,\n    iconBg: \"bg-blue-500/10\",\n    iconColor: \"text-blue-600\"\n  },\n  {\n    id: 3,\n    type: \"shift_changed\",\n    user: \"Ali Özkan\",\n    action: \"vardiya değişikliği yaptı\",\n    time: \"6 saat önce\",\n    icon: Clock,\n    iconBg: \"bg-orange-500/10\",\n    iconColor: \"text-orange-600\"\n  },\n  {\n    id: 4,\n    type: \"warning\",\n    user: \"Sistem\",\n    action: \"geç kalma uyarısı gönderdi\",\n    time: \"1 gün önce\",\n    icon: AlertTriangle,\n    iconBg: \"bg-red-500/10\",\n    iconColor: \"text-red-600\"\n  }\n];\n\nexport function RecentActivities() {\n  const handleViewAllActivities = () => {\n    // TODO: Navigate to activities page\n    console.log(\"Navigate to all activities\");\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Son Aktiviteler</CardTitle>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={handleViewAllActivities}\n            data-testid=\"view-all-activities\"\n          >\n            Tümünü Gör\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities.map((activity) => {\n            const Icon = activity.icon;\n            return (\n              <div \n                key={activity.id}\n                className=\"flex items-start space-x-3 p-3 hover:bg-muted/50 rounded-lg transition-colors\"\n                data-testid={`activity-${activity.id}`}\n              >\n                <div className={`w-8 h-8 ${activity.iconBg} rounded-full flex items-center justify-center flex-shrink-0`}>\n                  <Icon className={`text-sm ${activity.iconColor}`} size={16} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-foreground\">\n                    <span className=\"font-medium\">{activity.user}</span>{\" \"}\n                    <span>{activity.action}</span>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2901},"client/src/components/Dashboard/StatsCards.tsx":{"content":"import { Users, Calendar, Clock, Hourglass } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatsData {\n  totalPersonnel: number;\n  onLeaveToday: number;\n  activeShifts: number;\n  pendingLeaves: number;\n}\n\ninterface StatsCardsProps {\n  stats: StatsData;\n  isLoading?: boolean;\n}\n\nexport function StatsCards({ stats, isLoading }: StatsCardsProps) {\n  const statsItems = [\n    {\n      title: \"Toplam Personel\",\n      value: stats.totalPersonnel,\n      icon: Users,\n      bgColor: \"bg-primary/10\",\n      iconColor: \"text-primary\",\n      change: \"+5.2%\",\n      changeText: \"geçen aya göre\",\n      changeColor: \"text-green-600\"\n    },\n    {\n      title: \"Bugün İzinli\",\n      value: stats.onLeaveToday,\n      icon: Calendar,\n      bgColor: \"bg-yellow-500/10\",\n      iconColor: \"text-yellow-600\",\n      change: \"8.2%\",\n      changeText: \"toplam personelin\",\n      changeColor: \"text-yellow-600\"\n    },\n    {\n      title: \"Aktif Vardiyalar\",\n      value: stats.activeShifts,\n      icon: Clock,\n      bgColor: \"bg-green-500/10\",\n      iconColor: \"text-green-600\",\n      change: \"Aktif\",\n      changeText: \"şu anda çalışıyor\",\n      changeColor: \"text-green-600\"\n    },\n    {\n      title: \"Bekleyen İzinler\",\n      value: stats.pendingLeaves,\n      icon: Hourglass,\n      bgColor: \"bg-orange-500/10\",\n      iconColor: \"text-orange-600\",\n      change: \"Onay bekliyor\",\n      changeText: \"işlem gerekli\",\n      changeColor: \"text-orange-600\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4 mb-8\">\n        {[1, 2, 3, 4].map((i) => (\n          <Card key={i} className=\"shadow-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-24\"></div>\n                    <div className=\"h-8 bg-muted rounded w-16\"></div>\n                  </div>\n                  <div className=\"w-12 h-12 bg-muted rounded-lg\"></div>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"h-4 bg-muted rounded w-12\"></div>\n                  <div className=\"h-4 bg-muted rounded w-20\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4 mb-8\">\n      {statsItems.map((item, index) => {\n        const Icon = item.icon;\n        return (\n          <Card key={index} className=\"shadow-sm\" data-testid={`stats-card-${index}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">\n                    {item.title}\n                  </p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid={`stats-value-${index}`}>\n                    {item.value}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${item.bgColor} rounded-lg flex items-center justify-center`}>\n                  <Icon className={`h-6 w-6 ${item.iconColor}`} />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className={`font-medium ${item.changeColor}`}>\n                  {item.change}\n                </span>\n                <span className=\"text-muted-foreground ml-1\">\n                  {item.changeText}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3831},"client/src/components/Dashboard/TodaysSchedule.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\n// For now using static data, will be replaced with API data later\nconst todaySchedule = [\n  {\n    id: 1,\n    name: \"Sabah Vardiyası\",\n    time: \"08:00 - 16:00\",\n    count: 15,\n    color: \"bg-blue-500\"\n  },\n  {\n    id: 2,\n    name: \"Akşam Vardiyası\",\n    time: \"16:00 - 00:00\",\n    count: 12,\n    color: \"bg-orange-500\"\n  },\n  {\n    id: 3,\n    name: \"Gece Vardiyası\",\n    time: \"00:00 - 08:00\",\n    count: 8,\n    color: \"bg-purple-500\"\n  }\n];\n\nexport function TodaysSchedule() {\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">Bugünün Programı</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {todaySchedule.map((shift) => (\n            <div \n              key={shift.id}\n              className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\"\n              data-testid={`schedule-shift-${shift.id}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-3 h-3 ${shift.color} rounded-full`}></div>\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {shift.name}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {shift.time}\n                  </p>\n                </div>\n              </div>\n              <span className=\"text-sm font-medium text-foreground\" data-testid={`shift-count-${shift.id}`}>\n                {shift.count} kişi\n              </span>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1741},"client/src/components/Layout/MainLayout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./Sidebar\";\nimport { TopNavigation } from \"./TopNavigation\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu } from \"lucide-react\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n  activeMenuItem: string;\n  onMenuItemChange: (item: string) => void;\n}\n\nexport function MainLayout({ children, activeMenuItem, onMenuItemChange }: MainLayoutProps) {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const handleMobileMenuToggle = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  const handleMenuItemClick = (item: string) => {\n    onMenuItemChange(item);\n    setMobileMenuOpen(false); // Close mobile menu when item is selected\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Desktop Sidebar */}\n      <Sidebar activeItem={activeMenuItem} onMenuItemClick={handleMenuItemClick} />\n\n      {/* Mobile Sidebar */}\n      <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n        <SheetContent side=\"left\" className=\"p-0 w-64\">\n          <Sidebar activeItem={activeMenuItem} onMenuItemClick={handleMenuItemClick} />\n        </SheetContent>\n      </Sheet>\n\n      {/* Main Content Area */}\n      <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\n        <TopNavigation onMobileMenuToggle={handleMobileMenuToggle} />\n        \n        <main className=\"flex-1 overflow-y-auto bg-background\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1533},"client/src/components/Layout/Sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { \n  Home, \n  Users, \n  Calendar, \n  Clock, \n  QrCode, \n  Building, \n  CalendarDays, \n  BarChart3, \n  Settings \n} from \"lucide-react\";\n\ninterface SidebarProps {\n  activeItem: string;\n  onMenuItemClick: (item: string) => void;\n}\n\nconst menuItems = [\n  { id: 'dashboard', label: 'Dashboard', icon: Home },\n  { id: 'personnel', label: 'Personel Yönetimi', icon: Users },\n  { id: 'leave', label: 'İzin Yönetimi', icon: Calendar },\n  { id: 'shift', label: 'Vardiya Yönetimi', icon: Clock },\n  { id: 'attendance', label: 'Giriş-Çıkış Takip', icon: QrCode },\n  { id: 'branch', label: 'Şube Yönetimi', icon: Building },\n  { id: 'calendar', label: 'Takvim', icon: CalendarDays },\n  { id: 'reports', label: 'Raporlar', icon: BarChart3 },\n];\n\nexport function Sidebar({ activeItem, onMenuItemClick }: SidebarProps) {\n  return (\n    <div className=\"hidden lg:flex lg:flex-shrink-0\">\n      <div className=\"flex flex-col w-64 bg-card border-r border-border\">\n        {/* Logo/Header */}\n        <div className=\"flex items-center justify-center h-16 px-4 border-b border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Users className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-lg font-semibold text-foreground\">Personel Yönetim</span>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 px-2 py-4 space-y-2 overflow-y-auto\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeItem === item.id;\n            \n            return (\n              <button\n                key={item.id}\n                onClick={() => onMenuItemClick(item.id)}\n                className={cn(\n                  \"group flex items-center w-full px-2 py-2 text-sm font-medium rounded-md transition-colors\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                data-testid={`sidebar-${item.id}`}\n              >\n                <Icon className=\"mr-3 h-4 w-4\" />\n                {item.label}\n              </button>\n            );\n          })}\n\n          <div className=\"mt-6 pt-6 border-t border-border\">\n            <button\n              onClick={() => onMenuItemClick('settings')}\n              className={cn(\n                \"group flex items-center w-full px-2 py-2 text-sm font-medium rounded-md transition-colors\",\n                activeItem === 'settings'\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n              )}\n              data-testid=\"sidebar-settings\"\n            >\n              <Settings className=\"mr-3 h-4 w-4\" />\n              Ayarlar\n            </button>\n          </div>\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3070},"client/src/components/Layout/TopNavigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Bell, Menu, Search, User, ChevronDown } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface TopNavigationProps {\n  onMobileMenuToggle: () => void;\n}\n\nexport function TopNavigation({ onMobileMenuToggle }: TopNavigationProps) {\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const getUserInitials = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.email) {\n      return user.email.slice(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  const getUserDisplayName = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user?.email) {\n      return user.email;\n    }\n    return \"Kullanıcı\";\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-4 py-3 sm:px-6 lg:px-8\">\n      <div className=\"flex items-center justify-between\">\n        {/* Mobile menu button */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"lg:hidden\"\n          onClick={onMobileMenuToggle}\n          data-testid=\"mobile-menu-button\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n\n        {/* Search Bar */}\n        <div className=\"flex-1 max-w-lg mx-4\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <Search className=\"h-4 w-4 text-muted-foreground\" />\n            </div>\n            <Input\n              type=\"text\"\n              placeholder=\"Personel ara...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-input\"\n            />\n          </div>\n        </div>\n\n        {/* Right side actions */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <div className=\"relative\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"notifications-button\">\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-destructive text-destructive-foreground rounded-full text-xs flex items-center justify-center\">\n                3\n              </span>\n            </Button>\n          </div>\n\n          {/* User Profile */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"user-menu-button\">\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarImage src={user?.profileImageUrl || \"\"} />\n                  <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                    {getUserInitials()}\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"hidden md:block text-sm\">{getUserDisplayName()}</span>\n                <ChevronDown className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem data-testid=\"user-profile-menu\">\n                <User className=\"mr-2 h-4 w-4\" />\n                <span>Profil</span>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleLogout} data-testid=\"logout-menu\">\n                <span>Çıkış Yap</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4100},"client/src/components/Leave/LeaveRequestList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  MoreHorizontal, \n  Check, \n  X, \n  Search,\n  Calendar,\n  User\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { LeaveRequestWithRelations } from \"@shared/schema\";\n\nexport function LeaveRequestList() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leaveRequests = [], isLoading, error } = useQuery<LeaveRequestWithRelations[]>({\n    queryKey: [\"/api/leave-requests\"],\n    retry: false,\n  });\n\n  const updateLeaveRequestMutation = useMutation({\n    mutationFn: async ({ id, status, rejectionReason }: { \n      id: string; \n      status: string; \n      rejectionReason?: string; \n    }) => {\n      return await apiRequest(\"PUT\", `/api/leave-requests/${id}`, {\n        status,\n        rejectionReason: rejectionReason || null,\n        approvedAt: status === \"approved\" ? new Date().toISOString() : null,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"İzin talebi durumu güncellendi.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Yetki Hatası\",\n          description: \"Oturumunuz sona erdi. Yeniden giriş yapın...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Hata\",\n        description: error.message || \"İzin talebi güncellenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (id: string) => {\n    if (window.confirm(\"Bu izin talebini onaylamak istediğinizden emin misiniz?\")) {\n      updateLeaveRequestMutation.mutate({ id, status: \"approved\" });\n    }\n  };\n\n  const handleReject = (id: string) => {\n    const reason = window.prompt(\"Red nedeni giriniz (isteğe bağlı):\");\n    if (reason !== null) { // User didn't cancel\n      updateLeaveRequestMutation.mutate({ \n        id, \n        status: \"rejected\", \n        rejectionReason: reason || \"Belirtilmemiş\" \n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\">Beklemede</Badge>;\n      case \"approved\":\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Onaylandı</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\">Reddedildi</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const filteredRequests = leaveRequests.filter((request) =>\n    request.personnel?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    request.personnel?.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    request.leaveType?.name?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      return (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">Oturumunuz sona erdi. Yeniden giriş yapılıyor...</p>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-destructive\">İzin talepleri yüklenirken bir hata oluştu.</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">{error.message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"relative max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"İzin talebi ara...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"search-leave-requests\"\n          />\n        </div>\n      </div>\n\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Personel</TableHead>\n              <TableHead>İzin Türü</TableHead>\n              <TableHead>Başlangıç Tarihi</TableHead>\n              <TableHead>Bitiş Tarihi</TableHead>\n              <TableHead>Gün Sayısı</TableHead>\n              <TableHead>Durum</TableHead>\n              <TableHead>Talep Tarihi</TableHead>\n              <TableHead className=\"text-right\">İşlemler</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              Array.from({ length: 5 }).map((_, index) => (\n                <TableRow key={index}>\n                  {Array.from({ length: 8 }).map((_, cellIndex) => (\n                    <TableCell key={cellIndex}>\n                      <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : filteredRequests.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-8\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Calendar className=\"h-8 w-8 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">\n                      {searchQuery ? \"Arama kriterlerinize uygun izin talebi bulunamadı.\" : \"Henüz izin talebi oluşturulmamış.\"}\n                    </p>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredRequests.map((request) => (\n                <TableRow key={request.id} data-testid={`leave-request-row-${request.id}`}>\n                  <TableCell className=\"font-medium\">\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>\n                        {request.personnel?.firstName} {request.personnel?.lastName}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>{request.leaveType?.name || \"-\"}</TableCell>\n                  <TableCell>{request.startDate}</TableCell>\n                  <TableCell>{request.endDate}</TableCell>\n                  <TableCell>{request.days} gün</TableCell>\n                  <TableCell>{getStatusBadge(request.status || \"pending\")}</TableCell>\n                  <TableCell>\n                    {request.createdAt ? new Date(request.createdAt).toLocaleDateString('tr-TR') : \"-\"}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    {request.status === \"pending\" && (\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button \n                            variant=\"ghost\" \n                            className=\"h-8 w-8 p-0\"\n                            data-testid={`leave-actions-${request.id}`}\n                          >\n                            <span className=\"sr-only\">İşlemler</span>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem\n                            onClick={() => handleApprove(request.id)}\n                            className=\"text-green-600\"\n                            data-testid={`approve-leave-${request.id}`}\n                          >\n                            <Check className=\"mr-2 h-4 w-4\" />\n                            Onayla\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => handleReject(request.id)}\n                            className=\"text-destructive\"\n                            data-testid={`reject-leave-${request.id}`}\n                          >\n                            <X className=\"mr-2 h-4 w-4\" />\n                            Reddet\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    )}\n                    {request.status !== \"pending\" && (\n                      <span className=\"text-sm text-muted-foreground\">\n                        {request.status === \"approved\" ? \"Onaylandı\" : \"Reddedildi\"}\n                      </span>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}","size_bytes":9500},"client/src/components/Leave/LeaveRequestModal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { LeaveType, PersonnelWithRelations } from \"@shared/schema\";\n\nconst leaveRequestFormSchema = z.object({\n  personnelId: z.string().min(1, \"Personel seçimi gereklidir\"),\n  leaveTypeId: z.string().min(1, \"İzin türü seçimi gereklidir\"),\n  startDate: z.string().min(1, \"Başlangıç tarihi gereklidir\"),\n  endDate: z.string().min(1, \"Bitiş tarihi gereklidir\"),\n  reason: z.string().optional(),\n});\n\ntype LeaveRequestFormData = z.infer<typeof leaveRequestFormSchema>;\n\ninterface LeaveRequestModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function LeaveRequestModal({ open, onOpenChange }: LeaveRequestModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LeaveRequestFormData>({\n    resolver: zodResolver(leaveRequestFormSchema),\n    defaultValues: {\n      personnelId: \"\",\n      leaveTypeId: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      reason: \"\",\n    },\n  });\n\n  // Fetch personnel\n  const { data: personnel = [] } = useQuery<PersonnelWithRelations[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  // Fetch leave types\n  const { data: leaveTypes = [] } = useQuery<LeaveType[]>({\n    queryKey: [\"/api/leave-types\"],\n  });\n\n  // Calculate days between dates\n  const calculateDays = (startDate: string, endDate: string): number => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; // +1 to include both dates\n  };\n\n  const createLeaveRequestMutation = useMutation({\n    mutationFn: async (data: LeaveRequestFormData) => {\n      const days = calculateDays(data.startDate, data.endDate);\n      \n      const payload = {\n        personnelId: data.personnelId,\n        leaveTypeId: data.leaveTypeId,\n        startDate: data.startDate,\n        endDate: data.endDate,\n        days: days.toString(),\n        reason: data.reason || null,\n        status: \"pending\",\n      };\n      \n      return await apiRequest(\"POST\", \"/api/leave-requests\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"İzin talebi başarıyla oluşturuldu.\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"İzin talebi oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LeaveRequestFormData) => {\n    // Validate dates\n    if (new Date(data.startDate) > new Date(data.endDate)) {\n      toast({\n        title: \"Hata\",\n        description: \"Başlangıç tarihi bitiş tarihinden sonra olamaz.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createLeaveRequestMutation.mutate(data);\n  };\n\n  const watchStartDate = form.watch(\"startDate\");\n  const watchEndDate = form.watch(\"endDate\");\n  const calculatedDays = watchStartDate && watchEndDate ? calculateDays(watchStartDate, watchEndDate) : 0;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Yeni İzin Talebi</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"personnelId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personel *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-personnel\">\n                          <SelectValue placeholder=\"Personel seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {personnel.map((person) => (\n                          <SelectItem key={person.id} value={person.id}>\n                            {person.firstName} {person.lastName} ({person.employeeId})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"leaveTypeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>İzin Türü *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-leave-type\">\n                          <SelectValue placeholder=\"İzin türü seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {leaveTypes.map((type) => (\n                          <SelectItem key={type.id} value={type.id}>\n                            {type.name}\n                            {type.maxDays && ` (Max: ${type.maxDays} gün)`}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Başlangıç Tarihi *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field} \n                        data-testid=\"input-start-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bitiş Tarihi *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field} \n                        data-testid=\"input-end-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {calculatedDays > 0 && (\n              <div className=\"p-3 bg-muted/50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Toplam İzin Günü: <span className=\"font-medium text-foreground\">{calculatedDays} gün</span>\n                </p>\n              </div>\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"reason\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Açıklama</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"İzin sebebini belirtiniz (isteğe bağlı)\"\n                      className=\"resize-none\"\n                      {...field} \n                      data-testid=\"textarea-reason\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                İptal\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createLeaveRequestMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                {createLeaveRequestMutation.isPending ? \"Oluşturuluyor...\" : \"İzin Talebi Oluştur\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9418},"client/src/components/Leave/LeaveTypeModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LeaveTypesList } from \"./LeaveTypesList\";\n\nconst leaveTypeFormSchema = z.object({\n  name: z.string().min(1, \"İzin türü adı gereklidir\"),\n  description: z.string().optional(),\n  maxDays: z.string().optional(),\n  isActive: z.boolean().default(true),\n});\n\ntype LeaveTypeFormData = z.infer<typeof leaveTypeFormSchema>;\n\ninterface LeaveTypeModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function LeaveTypeModal({ open, onOpenChange }: LeaveTypeModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showForm, setShowForm] = useState(false);\n\n  const form = useForm<LeaveTypeFormData>({\n    resolver: zodResolver(leaveTypeFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      maxDays: \"\",\n      isActive: true,\n    },\n  });\n\n  const createLeaveTypeMutation = useMutation({\n    mutationFn: async (data: LeaveTypeFormData) => {\n      const payload = {\n        name: data.name,\n        description: data.description || null,\n        maxDays: data.maxDays ? parseFloat(data.maxDays) : null,\n        isActive: data.isActive,\n      };\n      \n      return await apiRequest(\"POST\", \"/api/leave-types\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-types\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"İzin türü başarıyla oluşturuldu.\",\n      });\n      form.reset();\n      setShowForm(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"İzin türü oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LeaveTypeFormData) => {\n    createLeaveTypeMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle>İzin Türleri Yönetimi</DialogTitle>\n            <Button\n              onClick={() => setShowForm(!showForm)}\n              data-testid=\"button-toggle-form\"\n            >\n              {showForm ? \"Formu Kapat\" : \"Yeni İzin Türü Ekle\"}\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {showForm && (\n            <div className=\"border rounded-lg p-4\">\n              <h3 className=\"text-lg font-medium mb-4\">Yeni İzin Türü</h3>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>İzin Türü Adı *</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Yıllık İzin, Hastalık İzni vb.\" \n                              {...field} \n                              data-testid=\"input-leave-type-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"maxDays\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Maksimum Gün Sayısı</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"30\" \n                              {...field} \n                              data-testid=\"input-max-days\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Açıklama</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"İzin türü hakkında açıklama (isteğe bağlı)\"\n                            className=\"resize-none\"\n                            {...field} \n                            data-testid=\"textarea-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel className=\"text-base\">Aktif Durum</FormLabel>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Bu izin türü kullanıma açık mı?\n                          </div>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"switch-is-active\"\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-3 pt-4\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setShowForm(false)}\n                      data-testid=\"button-cancel-form\"\n                    >\n                      İptal\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createLeaveTypeMutation.isPending}\n                      data-testid=\"button-save-leave-type\"\n                    >\n                      {createLeaveTypeMutation.isPending ? \"Ekleniyor...\" : \"İzin Türü Ekle\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          )}\n\n          <LeaveTypesList />\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7616},"client/src/components/Leave/LeaveTypesList.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, AlertCircle } from \"lucide-react\";\nimport type { LeaveType } from \"@shared/schema\";\n\nexport function LeaveTypesList() {\n  const { data: leaveTypes = [], isLoading, error } = useQuery<LeaveType[]>({\n    queryKey: [\"/api/leave-types\"],\n    retry: false,\n  });\n\n  const getStatusBadge = (isActive: boolean | null) => {\n    return isActive ? (\n      <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Aktif</Badge>\n    ) : (\n      <Badge variant=\"secondary\">Pasif</Badge>\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <AlertCircle className=\"h-8 w-8 text-destructive mx-auto mb-2\" />\n        <p className=\"text-destructive\">İzin türleri yüklenirken bir hata oluştu.</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">{error.message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-medium mb-4\">Mevcut İzin Türleri</h3>\n      \n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>İzin Türü</TableHead>\n              <TableHead>Açıklama</TableHead>\n              <TableHead>Maksimum Gün</TableHead>\n              <TableHead>Durum</TableHead>\n              <TableHead>Oluşturma Tarihi</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              Array.from({ length: 3 }).map((_, index) => (\n                <TableRow key={index}>\n                  {Array.from({ length: 5 }).map((_, cellIndex) => (\n                    <TableCell key={cellIndex}>\n                      <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : leaveTypes.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} className=\"text-center py-8\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Calendar className=\"h-8 w-8 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">\n                      Henüz izin türü tanımlanmamış.\n                    </p>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              leaveTypes.map((type) => (\n                <TableRow key={type.id} data-testid={`leave-type-row-${type.id}`}>\n                  <TableCell className=\"font-medium\">{type.name}</TableCell>\n                  <TableCell className=\"max-w-xs truncate\">\n                    {type.description || \"-\"}\n                  </TableCell>\n                  <TableCell>\n                    {type.maxDays ? `${type.maxDays} gün` : \"Sınırsız\"}\n                  </TableCell>\n                  <TableCell>{getStatusBadge(type.isActive)}</TableCell>\n                  <TableCell>\n                    {type.createdAt ? new Date(type.createdAt).toLocaleDateString('tr-TR') : \"-\"}\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}","size_bytes":3375},"client/src/components/Personnel/PersonnelList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { PersonnelModal } from \"./PersonnelModal\";\nimport { MoreHorizontal, Edit, Trash2, Search } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { PersonnelWithRelations } from \"@shared/schema\";\n\nexport function PersonnelList() {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedPersonnel, setSelectedPersonnel] = useState<PersonnelWithRelations | undefined>(undefined);\n  const [modalMode, setModalMode] = useState<\"create\" | \"edit\">(\"create\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: personnel = [], isLoading, error } = useQuery<PersonnelWithRelations[]>({\n    queryKey: [\"/api/personnel\"],\n    retry: false,\n  });\n\n  const deletePersonnelMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/personnel/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personnel\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Personel başarıyla silindi.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Yetki Hatası\",\n          description: \"Oturumunuz sona erdi. Yeniden giriş yapın...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Personel silinirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddPersonnel = () => {\n    setSelectedPersonnel(undefined);\n    setModalMode(\"create\");\n    setModalOpen(true);\n  };\n\n  const handleEditPersonnel = (personnel: PersonnelWithRelations) => {\n    setSelectedPersonnel(personnel);\n    setModalMode(\"edit\");\n    setModalOpen(true);\n  };\n\n  const handleDeletePersonnel = (id: string) => {\n    if (window.confirm(\"Bu personeli silmek istediğinizden emin misiniz?\")) {\n      deletePersonnelMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Aktif</Badge>;\n      case \"inactive\":\n        return <Badge variant=\"secondary\">Pasif</Badge>;\n      case \"terminated\":\n        return <Badge variant=\"destructive\">İşten Ayrılmış</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const filteredPersonnel = personnel.filter((person: PersonnelWithRelations) =>\n    person.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    person.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    person.employeeId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    person.email?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      return (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">Oturumunuz sona erdi. Yeniden giriş yapılıyor...</p>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-destructive\">Personel listesi yüklenirken bir hata oluştu.</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">{error.message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"relative max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Personel ara...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"search-personnel\"\n          />\n        </div>\n        <Button onClick={handleAddPersonnel} data-testid=\"button-add-personnel\">\n          Yeni Personel Ekle\n        </Button>\n      </div>\n\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Personel ID</TableHead>\n              <TableHead>Ad Soyad</TableHead>\n              <TableHead>E-posta</TableHead>\n              <TableHead>Departman</TableHead>\n              <TableHead>Pozisyon</TableHead>\n              <TableHead>Durum</TableHead>\n              <TableHead className=\"text-right\">İşlemler</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              Array.from({ length: 5 }).map((_, index) => (\n                <TableRow key={index}>\n                  {Array.from({ length: 7 }).map((_, cellIndex) => (\n                    <TableCell key={cellIndex}>\n                      <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : filteredPersonnel.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery ? \"Arama kriterlerinize uygun personel bulunamadı.\" : \"Henüz personel eklenmemiş.\"}\n                  </p>\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredPersonnel.map((person: PersonnelWithRelations) => (\n                <TableRow key={person.id} data-testid={`personnel-row-${person.id}`}>\n                  <TableCell className=\"font-medium\">{person.employeeId}</TableCell>\n                  <TableCell>{`${person.firstName} ${person.lastName}`}</TableCell>\n                  <TableCell>{person.email || \"-\"}</TableCell>\n                  <TableCell>{person.department?.name || \"-\"}</TableCell>\n                  <TableCell>{person.position || \"-\"}</TableCell>\n                  <TableCell>{getStatusBadge(person.status || \"active\")}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          className=\"h-8 w-8 p-0\"\n                          data-testid={`personnel-actions-${person.id}`}\n                        >\n                          <span className=\"sr-only\">İşlemler</span>\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem\n                          onClick={() => handleEditPersonnel(person)}\n                          data-testid={`edit-personnel-${person.id}`}\n                        >\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Düzenle\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => handleDeletePersonnel(person.id)}\n                          className=\"text-destructive\"\n                          data-testid={`delete-personnel-${person.id}`}\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Sil\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      <PersonnelModal\n        open={modalOpen}\n        onOpenChange={setModalOpen}\n        personnel={selectedPersonnel}\n        mode={modalMode}\n      />\n    </div>\n  );\n}\n","size_bytes":8577},"client/src/components/Personnel/PersonnelModal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Department, Branch, PersonnelWithRelations } from \"@shared/schema\";\n\nconst personnelFormSchema = z.object({\n  employeeId: z.string().min(1, \"Personel ID gereklidir\"),\n  firstName: z.string().min(1, \"Ad gereklidir\"),\n  lastName: z.string().min(1, \"Soyad gereklidir\"),\n  email: z.string().email(\"Geçerli bir e-posta adresi giriniz\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  tcNo: z.string().optional(),\n  departmentId: z.string().optional(),\n  branchId: z.string().optional(),\n  position: z.string().optional(),\n  salary: z.string().optional(),\n  hireDate: z.string().optional(),\n  status: z.enum([\"active\", \"inactive\", \"terminated\"]).default(\"active\"),\n});\n\ntype PersonnelFormData = z.infer<typeof personnelFormSchema>;\n\ninterface PersonnelModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  personnel?: PersonnelWithRelations;\n  mode: \"create\" | \"edit\";\n}\n\nexport function PersonnelModal({ open, onOpenChange, personnel, mode }: PersonnelModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<PersonnelFormData>({\n    resolver: zodResolver(personnelFormSchema),\n    defaultValues: {\n      employeeId: personnel?.employeeId || \"\",\n      firstName: personnel?.firstName || \"\",\n      lastName: personnel?.lastName || \"\",\n      email: personnel?.email || \"\",\n      phone: personnel?.phone || \"\",\n      tcNo: personnel?.tcNo || \"\",\n      departmentId: personnel?.departmentId || \"\",\n      branchId: personnel?.branchId || \"\",\n      position: personnel?.position || \"\",\n      salary: personnel?.salary || \"\",\n      hireDate: personnel?.hireDate || \"\",\n      status: (personnel?.status as \"active\" | \"inactive\" | \"terminated\") || \"active\",\n    },\n  });\n\n  // Fetch departments\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Fetch branches\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  const createPersonnelMutation = useMutation({\n    mutationFn: async (data: PersonnelFormData) => {\n      const payload = {\n        ...data,\n        email: data.email || null,\n        phone: data.phone || null,\n        tcNo: data.tcNo || null,\n        departmentId: data.departmentId || null,\n        branchId: data.branchId || null,\n        position: data.position || null,\n        salary: data.salary ? parseFloat(data.salary) : null,\n        hireDate: data.hireDate || null,\n      };\n      return await apiRequest(\"POST\", \"/api/personnel\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personnel\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Personel başarıyla eklendi.\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Personel eklenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePersonnelMutation = useMutation({\n    mutationFn: async (data: PersonnelFormData) => {\n      const payload = {\n        ...data,\n        email: data.email || null,\n        phone: data.phone || null,\n        tcNo: data.tcNo || null,\n        departmentId: data.departmentId || null,\n        branchId: data.branchId || null,\n        position: data.position || null,\n        salary: data.salary ? parseFloat(data.salary) : null,\n        hireDate: data.hireDate || null,\n      };\n      return await apiRequest(\"PUT\", `/api/personnel/${personnel?.id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personnel\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Personel bilgileri başarıyla güncellendi.\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Personel güncellenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PersonnelFormData) => {\n    if (mode === \"create\") {\n      createPersonnelMutation.mutate(data);\n    } else {\n      updatePersonnelMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createPersonnelMutation.isPending || updatePersonnelMutation.isPending;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {mode === \"create\" ? \"Yeni Personel Ekle\" : \"Personel Düzenle\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"employeeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personel ID *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"PER001\" {...field} data-testid=\"input-employee-id\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Durum</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-status\">\n                          <SelectValue placeholder=\"Durum seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Aktif</SelectItem>\n                        <SelectItem value=\"inactive\">Pasif</SelectItem>\n                        <SelectItem value=\"terminated\">İşten Ayrılmış</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ad *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ahmet\" {...field} data-testid=\"input-first-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Soyad *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Yılmaz\" {...field} data-testid=\"input-last-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>E-posta</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\" \n                        placeholder=\"ahmet@example.com\" \n                        {...field} \n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Telefon</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"0532 123 45 67\" {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"tcNo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>TC Kimlik No</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"12345678901\" {...field} data-testid=\"input-tc-no\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"position\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pozisyon</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Yazılım Geliştirici\" {...field} data-testid=\"input-position\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"departmentId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Departman</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-department\">\n                          <SelectValue placeholder=\"Departman seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {departments.map((dept: Department) => (\n                          <SelectItem key={dept.id} value={dept.id}>\n                            {dept.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"branchId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Şube</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-branch\">\n                          <SelectValue placeholder=\"Şube seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {branches.map((branch: Branch) => (\n                          <SelectItem key={branch.id} value={branch.id}>\n                            {branch.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"salary\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Maaş (TL)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"15000\" \n                        {...field} \n                        data-testid=\"input-salary\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"hireDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>İşe Başlama Tarihi</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field} \n                        data-testid=\"input-hire-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                İptal\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                data-testid=\"button-save\"\n              >\n                {isLoading ? \"Kaydediliyor...\" : mode === \"create\" ? \"Kaydet\" : \"Güncelle\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14076},"client/src/components/Shift/ShiftAssignmentList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  MoreHorizontal, \n  Search,\n  Users,\n  Trash2\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { ShiftAssignmentWithRelations } from \"@shared/schema\";\n\nexport function ShiftAssignmentList() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: assignments = [], isLoading, error } = useQuery<ShiftAssignmentWithRelations[]>({\n    queryKey: [\"/api/shift-assignments\", selectedDate],\n    retry: false,\n  });\n\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/shift-assignments/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shift-assignments\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Vardiya ataması başarıyla silindi.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Yetki Hatası\",\n          description: \"Oturumunuz sona erdi. Yeniden giriş yapın...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Vardiya ataması silinirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Bu vardiya atamasını silmek istediğinizden emin misiniz?\")) {\n      deleteAssignmentMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (isActive: boolean | null) => {\n    return isActive ? (\n      <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Aktif</Badge>\n    ) : (\n      <Badge variant=\"secondary\">Pasif</Badge>\n    );\n  };\n\n  const formatTime = (time: string | null) => {\n    if (!time) return \"-\";\n    return time.substring(0, 5); // HH:MM formatında göster\n  };\n\n  const filteredAssignments = assignments.filter((assignment) =>\n    assignment.personnel?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    assignment.personnel?.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    assignment.shift?.name?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      return (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">Oturumunuz sona erdi. Yeniden giriş yapılıyor...</p>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-destructive\">Vardiya atamaları yüklenirken bir hata oluştu.</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">{error.message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center\">\n        <div className=\"relative max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Personel veya vardiya ara...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"search-assignments\"\n          />\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <label className=\"text-sm font-medium\">Tarih:</label>\n          <Input\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n            className=\"w-auto\"\n            data-testid=\"date-picker\"\n          />\n        </div>\n      </div>\n\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Personel</TableHead>\n              <TableHead>Vardiya</TableHead>\n              <TableHead>Tarih</TableHead>\n              <TableHead>Başlangıç Saati</TableHead>\n              <TableHead>Bitiş Saati</TableHead>\n              <TableHead>Durum</TableHead>\n              <TableHead>Atanma Tarihi</TableHead>\n              <TableHead className=\"text-right\">İşlemler</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              Array.from({ length: 5 }).map((_, index) => (\n                <TableRow key={index}>\n                  {Array.from({ length: 8 }).map((_, cellIndex) => (\n                    <TableCell key={cellIndex}>\n                      <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : filteredAssignments.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-8\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Users className=\"h-8 w-8 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">\n                      {searchQuery ? \"Arama kriterlerinize uygun vardiya ataması bulunamadı.\" : \n                       selectedDate ? `${selectedDate} tarihinde vardiya ataması bulunamadı.` :\n                       \"Henüz vardiya ataması yapılmamış.\"}\n                    </p>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredAssignments.map((assignment) => (\n                <TableRow key={assignment.id} data-testid={`assignment-row-${assignment.id}`}>\n                  <TableCell className=\"font-medium\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>\n                        {assignment.personnel?.firstName} {assignment.personnel?.lastName}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {assignment.shift?.name || \"-\"}\n                  </TableCell>\n                  <TableCell>\n                    {assignment.date ? new Date(assignment.date).toLocaleDateString('tr-TR') : \"-\"}\n                  </TableCell>\n                  <TableCell>{formatTime(assignment.shift?.startTime || null)}</TableCell>\n                  <TableCell>{formatTime(assignment.shift?.endTime || null)}</TableCell>\n                  <TableCell>{getStatusBadge(assignment.isActive)}</TableCell>\n                  <TableCell>\n                    {assignment.createdAt ? new Date(assignment.createdAt).toLocaleDateString('tr-TR') : \"-\"}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          className=\"h-8 w-8 p-0\"\n                          data-testid={`assignment-actions-${assignment.id}`}\n                        >\n                          <span className=\"sr-only\">İşlemler</span>\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem\n                          onClick={() => handleDelete(assignment.id)}\n                          className=\"text-destructive\"\n                          data-testid={`delete-assignment-${assignment.id}`}\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Atamayı Sil\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}","size_bytes":8783},"client/src/components/Shift/ShiftAssignmentModal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Shift, PersonnelWithRelations } from \"@shared/schema\";\n\nconst shiftAssignmentFormSchema = z.object({\n  personnelId: z.string().min(1, \"Personel seçimi gereklidir\"),\n  shiftId: z.string().min(1, \"Vardiya seçimi gereklidir\"),\n  date: z.string().min(1, \"Tarih seçimi gereklidir\"),\n});\n\ntype ShiftAssignmentFormData = z.infer<typeof shiftAssignmentFormSchema>;\n\ninterface ShiftAssignmentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function ShiftAssignmentModal({ open, onOpenChange }: ShiftAssignmentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ShiftAssignmentFormData>({\n    resolver: zodResolver(shiftAssignmentFormSchema),\n    defaultValues: {\n      personnelId: \"\",\n      shiftId: \"\",\n      date: new Date().toISOString().split('T')[0], // Today's date\n    },\n  });\n\n  // Fetch personnel\n  const { data: personnel = [] } = useQuery<PersonnelWithRelations[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  // Fetch shifts\n  const { data: shifts = [] } = useQuery<Shift[]>({\n    queryKey: [\"/api/shifts\"],\n  });\n\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: ShiftAssignmentFormData) => {\n      const payload = {\n        personnelId: data.personnelId,\n        shiftId: data.shiftId,\n        date: data.date,\n        isActive: true,\n      };\n      \n      return await apiRequest(\"POST\", \"/api/shift-assignments\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shift-assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Vardiya ataması başarıyla oluşturuldu.\",\n      });\n      onOpenChange(false);\n      form.reset({\n        personnelId: \"\",\n        shiftId: \"\",\n        date: new Date().toISOString().split('T')[0],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Vardiya ataması oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ShiftAssignmentFormData) => {\n    // Validate that the date is not in the past (except today)\n    const selectedDate = new Date(data.date);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    if (selectedDate < today) {\n      toast({\n        title: \"Hata\",\n        description: \"Geçmiş bir tarihe vardiya ataması yapamazsınız.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAssignmentMutation.mutate(data);\n  };\n\n  const watchShiftId = form.watch(\"shiftId\");\n  const selectedShift = shifts.find(shift => shift.id === watchShiftId);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Yeni Vardiya Ataması</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"personnelId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personel *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-personnel\">\n                          <SelectValue placeholder=\"Personel seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {personnel.map((person) => (\n                          <SelectItem key={person.id} value={person.id}>\n                            {person.firstName} {person.lastName} ({person.employeeId})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"shiftId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vardiya *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-shift\">\n                          <SelectValue placeholder=\"Vardiya seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {shifts.filter(shift => shift.isActive).map((shift) => (\n                          <SelectItem key={shift.id} value={shift.id}>\n                            {shift.name}\n                            {shift.startTime && shift.endTime && \n                              ` (${shift.startTime.substring(0,5)} - ${shift.endTime.substring(0,5)})`\n                            }\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"date\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Atama Tarihi *</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field} \n                      data-testid=\"input-assignment-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {selectedShift && (\n              <div className=\"p-4 bg-muted/50 rounded-lg space-y-2\">\n                <h4 className=\"font-medium text-sm\">Seçilen Vardiya Detayları:</h4>\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Ad:</span>\n                    <span className=\"ml-2 font-medium\">{selectedShift.name}</span>\n                  </div>\n                  {selectedShift.startTime && selectedShift.endTime && (\n                    <div>\n                      <span className=\"text-muted-foreground\">Saat:</span>\n                      <span className=\"ml-2 font-medium\">\n                        {selectedShift.startTime.substring(0,5)} - {selectedShift.endTime.substring(0,5)}\n                      </span>\n                    </div>\n                  )}\n                  {selectedShift.workingHours && (\n                    <div>\n                      <span className=\"text-muted-foreground\">Süre:</span>\n                      <span className=\"ml-2 font-medium\">{selectedShift.workingHours} saat</span>\n                    </div>\n                  )}\n                </div>\n                {selectedShift.description && (\n                  <p className=\"text-sm text-muted-foreground mt-2\">{selectedShift.description}</p>\n                )}\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                İptal\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createAssignmentMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                {createAssignmentMutation.isPending ? \"Atanıyor...\" : \"Vardiya Ata\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8851},"client/src/components/Shift/ShiftList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  MoreHorizontal, \n  Search,\n  Clock,\n  Edit,\n  Trash2\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Shift } from \"@shared/schema\";\n\nexport function ShiftList() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: shifts = [], isLoading, error } = useQuery<Shift[]>({\n    queryKey: [\"/api/shifts\"],\n    retry: false,\n  });\n\n  const deleteShiftMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/shifts/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shifts\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Vardiya başarıyla silindi.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Yetki Hatası\",\n          description: \"Oturumunuz sona erdi. Yeniden giriş yapın...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Vardiya silinirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: string, name: string) => {\n    if (window.confirm(`\"${name}\" vardiyasını silmek istediğinizden emin misiniz?`)) {\n      deleteShiftMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (isActive: boolean | null) => {\n    return isActive ? (\n      <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Aktif</Badge>\n    ) : (\n      <Badge variant=\"secondary\">Pasif</Badge>\n    );\n  };\n\n  const formatTime = (time: string | null) => {\n    if (!time) return \"-\";\n    return time.substring(0, 5); // HH:MM formatında göster\n  };\n\n  const filteredShifts = shifts.filter((shift) =>\n    shift.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    shift.description?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      return (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">Oturumunuz sona erdi. Yeniden giriş yapılıyor...</p>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-destructive\">Vardiyalar yüklenirken bir hata oluştu.</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">{error.message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"relative max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Vardiya ara...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"search-shifts\"\n          />\n        </div>\n      </div>\n\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Vardiya Adı</TableHead>\n              <TableHead>Açıklama</TableHead>\n              <TableHead>Başlangıç Saati</TableHead>\n              <TableHead>Bitiş Saati</TableHead>\n              <TableHead>Çalışma Saatleri</TableHead>\n              <TableHead>Durum</TableHead>\n              <TableHead>Oluşturma Tarihi</TableHead>\n              <TableHead className=\"text-right\">İşlemler</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              Array.from({ length: 5 }).map((_, index) => (\n                <TableRow key={index}>\n                  {Array.from({ length: 8 }).map((_, cellIndex) => (\n                    <TableCell key={cellIndex}>\n                      <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : filteredShifts.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-8\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Clock className=\"h-8 w-8 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">\n                      {searchQuery ? \"Arama kriterlerinize uygun vardiya bulunamadı.\" : \"Henüz vardiya tanımlanmamış.\"}\n                    </p>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredShifts.map((shift) => (\n                <TableRow key={shift.id} data-testid={`shift-row-${shift.id}`}>\n                  <TableCell className=\"font-medium\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{shift.name}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs truncate\">\n                    {shift.description || \"-\"}\n                  </TableCell>\n                  <TableCell>{formatTime(shift.startTime)}</TableCell>\n                  <TableCell>{formatTime(shift.endTime)}</TableCell>\n                  <TableCell>\n                    {shift.workingHours ? `${shift.workingHours} saat` : \"-\"}\n                  </TableCell>\n                  <TableCell>{getStatusBadge(shift.isActive)}</TableCell>\n                  <TableCell>\n                    {shift.createdAt ? new Date(shift.createdAt).toLocaleDateString('tr-TR') : \"-\"}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          className=\"h-8 w-8 p-0\"\n                          data-testid={`shift-actions-${shift.id}`}\n                        >\n                          <span className=\"sr-only\">İşlemler</span>\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem\n                          onClick={() => console.log(\"Edit shift:\", shift.id)}\n                          data-testid={`edit-shift-${shift.id}`}\n                        >\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Düzenle\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => handleDelete(shift.id, shift.name || \"\")}\n                          className=\"text-destructive\"\n                          data-testid={`delete-shift-${shift.id}`}\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Sil\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}","size_bytes":8067},"client/src/components/Shift/ShiftModal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst shiftFormSchema = z.object({\n  name: z.string().min(1, \"Vardiya adı gereklidir\"),\n  description: z.string().optional(),\n  startTime: z.string().min(1, \"Başlangıç saati gereklidir\"),\n  endTime: z.string().min(1, \"Bitiş saati gereklidir\"),\n  workingHours: z.string().optional(),\n  isActive: z.boolean().default(true),\n});\n\ntype ShiftFormData = z.infer<typeof shiftFormSchema>;\n\ninterface ShiftModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function ShiftModal({ open, onOpenChange }: ShiftModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ShiftFormData>({\n    resolver: zodResolver(shiftFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      startTime: \"\",\n      endTime: \"\",\n      workingHours: \"\",\n      isActive: true,\n    },\n  });\n\n  // Calculate working hours automatically\n  const calculateWorkingHours = (startTime: string, endTime: string): number => {\n    if (!startTime || !endTime) return 0;\n    \n    const [startHour, startMinute] = startTime.split(':').map(Number);\n    const [endHour, endMinute] = endTime.split(':').map(Number);\n    \n    const startTotalMinutes = startHour * 60 + startMinute;\n    let endTotalMinutes = endHour * 60 + endMinute;\n    \n    // If end time is earlier than start time, assume next day\n    if (endTotalMinutes <= startTotalMinutes) {\n      endTotalMinutes += 24 * 60;\n    }\n    \n    const diffMinutes = endTotalMinutes - startTotalMinutes;\n    return Math.round((diffMinutes / 60) * 10) / 10; // Round to 1 decimal place\n  };\n\n  const createShiftMutation = useMutation({\n    mutationFn: async (data: ShiftFormData) => {\n      const workingHours = calculateWorkingHours(data.startTime, data.endTime);\n      \n      const payload = {\n        name: data.name,\n        description: data.description || null,\n        startTime: data.startTime,\n        endTime: data.endTime,\n        workingHours: workingHours.toString(),\n        isActive: data.isActive,\n      };\n      \n      return await apiRequest(\"POST\", \"/api/shifts\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shifts\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Vardiya başarıyla oluşturuldu.\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Vardiya oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ShiftFormData) => {\n    // Validate times\n    if (data.startTime === data.endTime) {\n      toast({\n        title: \"Hata\",\n        description: \"Başlangıç ve bitiş saatleri aynı olamaz.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createShiftMutation.mutate(data);\n  };\n\n  const watchStartTime = form.watch(\"startTime\");\n  const watchEndTime = form.watch(\"endTime\");\n  const calculatedHours = watchStartTime && watchEndTime ? calculateWorkingHours(watchStartTime, watchEndTime) : 0;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Yeni Vardiya Tanımla</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vardiya Adı *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Sabah Vardiyası, Gece Vardiyası vb.\" \n                        {...field} \n                        data-testid=\"input-shift-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"workingHours\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Çalışma Saatleri</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        step=\"0.5\"\n                        placeholder=\"8\"\n                        {...field}\n                        value={calculatedHours > 0 ? calculatedHours.toString() : field.value}\n                        readOnly\n                        className=\"bg-muted\"\n                        data-testid=\"input-working-hours\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Başlangıç Saati *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field} \n                        data-testid=\"input-start-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bitiş Saati *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field} \n                        data-testid=\"input-end-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {calculatedHours > 0 && (\n              <div className=\"p-3 bg-muted/50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Hesaplanan Çalışma Süresi: <span className=\"font-medium text-foreground\">{calculatedHours} saat</span>\n                </p>\n              </div>\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Açıklama</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Vardiya hakkında açıklama (isteğe bağlı)\"\n                      className=\"resize-none\"\n                      {...field} \n                      data-testid=\"textarea-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isActive\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Aktif Durum</FormLabel>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Bu vardiya kullanıma açık mı?\n                    </div>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-is-active\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                İptal\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createShiftMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                {createShiftMutation.isPending ? \"Oluşturuluyor...\" : \"Vardiya Oluştur\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9480},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/Leave/LeaveCalendarView.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Calendar, \n  ChevronLeft, \n  ChevronRight, \n  AlertTriangle,\n  Users,\n  TrendingUp,\n  Info\n} from 'lucide-react';\n\ninterface LeaveEvent {\n  id: string;\n  personnelId: string;\n  personnelName: string;\n  leaveType: string;\n  startDate: string;\n  endDate: string;\n  status: string;\n}\n\ninterface CoverageDay {\n  date: string;\n  totalStaff: number;\n  onLeave: number;\n  available: number;\n  coveragePercentage: number;\n  isAdequate: boolean;\n  onLeaveDetails: {\n    personnelId: string;\n    personnelName: string;\n    leaveType: string;\n  }[];\n}\n\nexport function LeaveCalendarView() {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [leaveEvents, setLeaveEvents] = useState<LeaveEvent[]>([]);\n  const [coverageData, setCoverageData] = useState<CoverageDay[]>([]);\n  const [selectedDepartment, setSelectedDepartment] = useState('all');\n  const [departments, setDepartments] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    loadCalendarData();\n    loadDepartments();\n  }, [currentMonth, selectedDepartment]);\n\n  const loadCalendarData = async () => {\n    setLoading(true);\n    try {\n      // Get month range\n      const startDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1)\n        .toISOString().split('T')[0];\n      const endDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0)\n        .toISOString().split('T')[0];\n\n      // Load leave requests\n      const leaveResponse = await fetch('/api/leave-requests');\n      if (leaveResponse.ok) {\n        const allLeaves = await leaveResponse.json();\n        const monthlyLeaves = allLeaves\n          .filter((leave: any) => \n            leave.status === 'approved' &&\n            new Date(leave.startDate) <= new Date(endDate) &&\n            new Date(leave.endDate) >= new Date(startDate)\n          )\n          .map((leave: any) => ({\n            id: leave.id,\n            personnelId: leave.personnelId,\n            personnelName: leave.personnel?.firstName + ' ' + leave.personnel?.lastName,\n            leaveType: leave.leaveType?.name || 'Unknown',\n            startDate: leave.startDate,\n            endDate: leave.endDate,\n            status: leave.status\n          }));\n        setLeaveEvents(monthlyLeaves);\n      }\n\n      // Load coverage data if department is selected\n      if (selectedDepartment !== 'all') {\n        const coverageResponse = await fetch(\n          `/api/leave-coverage/${selectedDepartment}?startDate=${startDate}&endDate=${endDate}`\n        );\n        if (coverageResponse.ok) {\n          const coverage = await coverageResponse.json();\n          setCoverageData(coverage.coverage);\n        }\n      }\n\n    } catch (error) {\n      console.error('Error loading calendar data:', error);\n      setMessage('Takvim verileri yüklenirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadDepartments = async () => {\n    try {\n      const response = await fetch('/api/departments');\n      if (response.ok) {\n        const data = await response.json();\n        setDepartments(data);\n      }\n    } catch (error) {\n      console.error('Error loading departments:', error);\n    }\n  };\n\n  const generateCalendarDays = () => {\n    const year = currentMonth.getFullYear();\n    const month = currentMonth.getMonth();\n    \n    const firstDayOfMonth = new Date(year, month, 1);\n    const lastDayOfMonth = new Date(year, month + 1, 0);\n    const startDate = new Date(firstDayOfMonth);\n    startDate.setDate(startDate.getDate() - firstDayOfMonth.getDay());\n    \n    const days = [];\n    const current = new Date(startDate);\n    \n    for (let week = 0; week < 6; week++) {\n      const weekDays = [];\n      for (let day = 0; day < 7; day++) {\n        const currentDate = new Date(current);\n        const dateStr = currentDate.toISOString().split('T')[0];\n        const isCurrentMonth = currentDate.getMonth() === month;\n        \n        // Get leaves for this date\n        const dayLeaves = leaveEvents.filter(leave => \n          new Date(leave.startDate) <= currentDate && \n          new Date(leave.endDate) >= currentDate\n        );\n\n        // Get coverage for this date\n        const dayCoverage = coverageData.find(coverage => coverage.date === dateStr);\n        \n        weekDays.push({\n          date: currentDate,\n          dateStr,\n          isCurrentMonth,\n          leaves: dayLeaves,\n          coverage: dayCoverage\n        });\n        \n        current.setDate(current.getDate() + 1);\n      }\n      days.push(weekDays);\n    }\n    \n    return days;\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentMonth);\n    newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));\n    setCurrentMonth(newDate);\n  };\n\n  const getCoverageColor = (coverage?: CoverageDay) => {\n    if (!coverage) return 'bg-gray-50';\n    if (coverage.coveragePercentage >= 80) return 'bg-green-50';\n    if (coverage.coveragePercentage >= 70) return 'bg-yellow-50';\n    return 'bg-red-50';\n  };\n\n  const getCoverageBadgeColor = (coverage?: CoverageDay) => {\n    if (!coverage) return 'bg-gray-100 text-gray-800';\n    if (coverage.coveragePercentage >= 80) return 'bg-green-100 text-green-800';\n    if (coverage.coveragePercentage >= 70) return 'bg-yellow-100 text-yellow-800';\n    return 'bg-red-100 text-red-800';\n  };\n\n  const calendarDays = generateCalendarDays();\n  const monthNames = [\n    'Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran',\n    'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'\n  ];\n  const dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Controls */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('prev')}>\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <h2 className=\"text-xl font-semibold\">\n                {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}\n              </h2>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('next')}>\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <div>\n                <Label>Departman</Label>\n                <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tüm Departmanlar</SelectItem>\n                    {departments.map((dept) => (\n                      <SelectItem key={dept.id} value={dept.id}>\n                        {dept.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Calendar Grid */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-7 gap-1 mb-4\">\n            {dayNames.map((dayName) => (\n              <div key={dayName} className=\"p-2 text-center font-medium text-gray-600 text-sm\">\n                {dayName.slice(0, 3)}\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-1\">\n            {calendarDays.flat().map((day, index) => (\n              <div\n                key={index}\n                className={`\n                  min-h-[120px] p-2 border border-gray-200 rounded-lg\n                  ${day.isCurrentMonth ? getCoverageColor(day.coverage) : 'bg-gray-50'}\n                  ${!day.isCurrentMonth && 'opacity-50'}\n                `}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className={`text-sm font-medium ${!day.isCurrentMonth && 'text-gray-400'}`}>\n                    {day.date.getDate()}\n                  </span>\n                  {day.coverage && (\n                    <Badge className={`text-xs ${getCoverageBadgeColor(day.coverage)}`}>\n                      {day.coverage.coveragePercentage}%\n                    </Badge>\n                  )}\n                </div>\n                \n                <div className=\"space-y-1\">\n                  {day.leaves.slice(0, 3).map((leave, leaveIndex) => (\n                    <div\n                      key={leaveIndex}\n                      className=\"text-xs p-1 rounded bg-blue-100 text-blue-800 truncate\"\n                      title={`${leave.personnelName} - ${leave.leaveType}`}\n                    >\n                      {leave.personnelName.split(' ').map(n => n[0]).join('.')}\n                    </div>\n                  ))}\n                  {day.leaves.length > 3 && (\n                    <div className=\"text-xs text-gray-500\">\n                      +{day.leaves.length - 3} daha\n                    </div>\n                  )}\n                </div>\n                \n                {day.coverage && !day.coverage.isAdequate && (\n                  <div className=\"mt-1 flex items-center\">\n                    <AlertTriangle className=\"h-3 w-3 text-red-500\" />\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Coverage Summary for Selected Department */}\n      {selectedDepartment !== 'all' && coverageData.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Departman Kapsama Analizi\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {coverageData.filter(day => day.coveragePercentage >= 80).length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Yüksek Kapsama (≥80%)</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {coverageData.filter(day => day.coveragePercentage >= 70 && day.coveragePercentage < 80).length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Orta Kapsama (70-79%)</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {coverageData.filter(day => day.coveragePercentage < 70).length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Düşük Kapsama (&lt;70%)</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {Math.round(coverageData.reduce((sum, day) => sum + day.coveragePercentage, 0) / coverageData.length)}%\n                </div>\n                <div className=\"text-sm text-gray-600\">Ortalama Kapsama</div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Kritik Günler (Kapsama &lt; 70%)</h4>\n              {coverageData\n                .filter(day => day.coveragePercentage < 70)\n                .slice(0, 5)\n                .map((day, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n                    <div>\n                      <span className=\"font-medium\">{new Date(day.date).toLocaleDateString('tr-TR')}</span>\n                      <span className=\"text-sm text-gray-600 ml-2\">\n                        İzinli: {day.onLeave}/{day.totalStaff} • Müsait: {day.available}\n                      </span>\n                    </div>\n                    <Badge className=\"bg-red-100 text-red-800\">\n                      {day.coveragePercentage}%\n                    </Badge>\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Açıklamalar</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-green-50 border border-green-200 rounded\"></div>\n              <span className=\"text-sm\">Yüksek Kapsama (≥80%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-yellow-50 border border-yellow-200 rounded\"></div>\n              <span className=\"text-sm\">Orta Kapsama (70-79%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-red-50 border border-red-200 rounded\"></div>\n              <span className=\"text-sm\">Düşük Kapsama (&lt;70%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n              <span className=\"text-sm\">Personel yetersizliği uyarısı</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14339},"client/src/components/Leave/LeaveStatistics.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  BarChart3,\n  PieChart,\n  TrendingUp,\n  Users,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  Calendar,\n  Info,\n  Search\n} from 'lucide-react';\n\ninterface LeaveBalance {\n  leaveType: {\n    id: string;\n    name: string;\n    maxDaysPerYear: number;\n  };\n  usedDays: number;\n  remainingDays: number;\n  carryOverDays: number;\n  totalAvailable: number;\n}\n\ninterface EmployeeBalance {\n  personnelId: string;\n  year: string;\n  balances: LeaveBalance[];\n  totalUsedDays: number;\n}\n\ninterface LeaveStatistic {\n  totalRequests: number;\n  approvedRequests: number;\n  pendingRequests: number;\n  rejectedRequests: number;\n  totalDaysUsed: number;\n  averageLeaveDays: number;\n}\n\nexport function LeaveStatistics() {\n  const [employees, setEmployees] = useState<any[]>([]);\n  const [selectedEmployee, setSelectedEmployee] = useState('');\n  const [employeeBalance, setEmployeeBalance] = useState<EmployeeBalance | null>(null);\n  const [leaveStatistics, setLeaveStatistics] = useState<LeaveStatistic | null>(null);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear().toString());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    loadEmployees();\n    loadLeaveStatistics();\n  }, [selectedYear]);\n\n  useEffect(() => {\n    if (selectedEmployee) {\n      loadEmployeeBalance();\n    }\n  }, [selectedEmployee, selectedYear]);\n\n  const loadEmployees = async () => {\n    try {\n      const response = await fetch('/api/personnel');\n      if (response.ok) {\n        const data = await response.json();\n        setEmployees(data);\n      }\n    } catch (error) {\n      console.error('Error loading employees:', error);\n    }\n  };\n\n  const loadLeaveStatistics = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/leave-requests');\n      if (response.ok) {\n        const allLeaves = await response.json();\n        \n        // Filter by year\n        const yearLeaves = allLeaves.filter((leave: any) => \n          new Date(leave.startDate).getFullYear().toString() === selectedYear\n        );\n\n        const statistics = {\n          totalRequests: yearLeaves.length,\n          approvedRequests: yearLeaves.filter((leave: any) => leave.status === 'approved').length,\n          pendingRequests: yearLeaves.filter((leave: any) => leave.status === 'pending').length,\n          rejectedRequests: yearLeaves.filter((leave: any) => leave.status === 'rejected').length,\n          totalDaysUsed: yearLeaves\n            .filter((leave: any) => leave.status === 'approved')\n            .reduce((total: number, leave: any) => {\n              const start = new Date(leave.startDate);\n              const end = new Date(leave.endDate);\n              const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n              return total + days;\n            }, 0),\n          averageLeaveDays: 0\n        };\n\n        if (yearLeaves.filter((leave: any) => leave.status === 'approved').length > 0) {\n          statistics.averageLeaveDays = Math.round(\n            statistics.totalDaysUsed / yearLeaves.filter((leave: any) => leave.status === 'approved').length\n          );\n        }\n\n        setLeaveStatistics(statistics);\n      }\n    } catch (error) {\n      console.error('Error loading leave statistics:', error);\n      setMessage('İstatistikler yüklenirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadEmployeeBalance = async () => {\n    if (!selectedEmployee) return;\n    \n    setLoading(true);\n    try {\n      const response = await fetch(`/api/leave-balance/${selectedEmployee}?year=${selectedYear}`);\n      if (response.ok) {\n        const data = await response.json();\n        setEmployeeBalance(data);\n      } else {\n        setMessage('Personel bakiye bilgileri alınamadı');\n      }\n    } catch (error) {\n      console.error('Error loading employee balance:', error);\n      setMessage('Personel bakiye bilgileri yüklenirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const validateLeaveRequest = async () => {\n    if (!selectedEmployee) {\n      setMessage('Lütfen önce bir personel seçin');\n      return;\n    }\n\n    // This would typically be called from a form, but for demo purposes\n    const mockRequest = {\n      personnelId: selectedEmployee,\n      leaveTypeId: 'annual-leave-id', // You'd get this from a form\n      startDate: '2025-02-01',\n      endDate: '2025-02-05'\n    };\n\n    try {\n      const response = await fetch('/api/leave-requests/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(mockRequest)\n      });\n\n      if (response.ok) {\n        const validation = await response.json();\n        console.log('Validation result:', validation);\n        // You would display this in the UI\n      }\n    } catch (error) {\n      console.error('Error validating leave request:', error);\n    }\n  };\n\n  const filteredEmployees = employees.filter(emp => \n    emp.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    emp.lastName.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getBalanceColor = (balance: LeaveBalance) => {\n    const usagePercentage = (balance.usedDays / balance.leaveType.maxDaysPerYear) * 100;\n    if (usagePercentage < 50) return 'text-green-600';\n    if (usagePercentage < 80) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getBalanceBadgeColor = (balance: LeaveBalance) => {\n    const usagePercentage = (balance.usedDays / balance.leaveType.maxDaysPerYear) * 100;\n    if (usagePercentage < 50) return 'bg-green-100 text-green-800';\n    if (usagePercentage < 80) return 'bg-yellow-100 text-yellow-800';\n    return 'bg-red-100 text-red-800';\n  };\n\n  const years = Array.from({ length: 5 }, (_, i) => (new Date().getFullYear() - 2 + i).toString());\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle>İstatistik Filtreleri</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label>Yıl</Label>\n              <Select value={selectedYear} onValueChange={setSelectedYear}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {years.map(year => (\n                    <SelectItem key={year} value={year}>{year}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>Personel Arama</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Ad veya soyad...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label>Personel Seçin</Label>\n              <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Personel seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {filteredEmployees.map(emp => (\n                    <SelectItem key={emp.id} value={emp.id}>\n                      {emp.firstName} {emp.lastName} - {emp.position}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Overall Statistics */}\n      {leaveStatistics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Calendar className=\"h-8 w-8 text-blue-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Toplam Talep</p>\n                  <p className=\"text-2xl font-bold\">{leaveStatistics.totalRequests}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Onaylanan</p>\n                  <p className=\"text-2xl font-bold\">{leaveStatistics.approvedRequests}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Clock className=\"h-8 w-8 text-yellow-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Beklemede</p>\n                  <p className=\"text-2xl font-bold\">{leaveStatistics.pendingRequests}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <TrendingUp className=\"h-8 w-8 text-purple-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Ortalama Gün</p>\n                  <p className=\"text-2xl font-bold\">{leaveStatistics.averageLeaveDays}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Employee Balance Details */}\n      {employeeBalance && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Personel İzin Bakiyesi - {selectedYear}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-lg font-semibold\">\n                  {employees.find(emp => emp.id === selectedEmployee)?.firstName} {' '}\n                  {employees.find(emp => emp.id === selectedEmployee)?.lastName}\n                </h4>\n                <Badge className=\"bg-blue-100 text-blue-800\">\n                  Toplam Kullanılan: {employeeBalance.totalUsedDays} gün\n                </Badge>\n              </div>\n            </div>\n            \n            <div className=\"grid gap-4\">\n              {employeeBalance.balances.map((balance, index) => (\n                <div key={index} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h5 className=\"font-medium\">{balance.leaveType.name}</h5>\n                    <Badge className={getBalanceBadgeColor(balance)}>\n                      {Math.round((balance.usedDays / balance.leaveType.maxDaysPerYear) * 100)}% kullanılmış\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 text-sm\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-blue-600\">\n                        {balance.leaveType.maxDaysPerYear}\n                      </div>\n                      <div className=\"text-gray-600\">Toplam Hak</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className={`text-lg font-semibold ${getBalanceColor(balance)}`}>\n                        {balance.usedDays}\n                      </div>\n                      <div className=\"text-gray-600\">Kullanılan</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-green-600\">\n                        {balance.remainingDays}\n                      </div>\n                      <div className=\"text-gray-600\">Kalan</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-purple-600\">\n                        {balance.carryOverDays}\n                      </div>\n                      <div className=\"text-gray-600\">Devir</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-indigo-600\">\n                        {balance.totalAvailable}\n                      </div>\n                      <div className=\"text-gray-600\">Toplam Müsait</div>\n                    </div>\n                  </div>\n                  \n                  {/* Progress bar */}\n                  <div className=\"mt-3\">\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full transition-all duration-300 ${\n                          balance.usedDays / balance.leaveType.maxDaysPerYear < 0.5 ? 'bg-green-500' :\n                          balance.usedDays / balance.leaveType.maxDaysPerYear < 0.8 ? 'bg-yellow-500' : 'bg-red-500'\n                        }`}\n                        style={{ \n                          width: `${Math.min(100, (balance.usedDays / balance.leaveType.maxDaysPerYear) * 100)}%` \n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  {balance.usedDays >= balance.leaveType.maxDaysPerYear * 0.8 && (\n                    <div className=\"mt-2 flex items-center gap-2 text-orange-600\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Yıllık iznin %80'inden fazlası kullanıldı</span>\n                    </div>\n                  )}\n                  \n                  {balance.remainingDays <= 5 && balance.remainingDays > 0 && (\n                    <div className=\"mt-2 flex items-center gap-2 text-amber-600\">\n                      <Info className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Kalan izin günü sayısı az ({balance.remainingDays} gün)</span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Usage Patterns */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              İzin Türleri Dağılımı\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {employeeBalance ? (\n              <div className=\"space-y-3\">\n                {employeeBalance.balances\n                  .sort((a, b) => b.usedDays - a.usedDays)\n                  .map((balance, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">{balance.leaveType.name}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-24 bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-blue-500 h-2 rounded-full\"\n                            style={{ \n                              width: `${balance.leaveType.maxDaysPerYear > 0 ? \n                                (balance.usedDays / balance.leaveType.maxDaysPerYear) * 100 : 0}%` \n                            }}\n                          ></div>\n                        </div>\n                        <span className=\"text-sm text-gray-600 w-12\">\n                          {balance.usedDays} gün\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">Personel seçin</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChart className=\"h-5 w-5\" />\n              İzin Durumu Özeti\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {leaveStatistics ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-sm\">Onaylanan</span>\n                  </div>\n                  <span className=\"font-medium\">{leaveStatistics.approvedRequests}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                    <span className=\"text-sm\">Beklemede</span>\n                  </div>\n                  <span className=\"font-medium\">{leaveStatistics.pendingRequests}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    <span className=\"text-sm\">Reddedilen</span>\n                  </div>\n                  <span className=\"font-medium\">{leaveStatistics.rejectedRequests}</span>\n                </div>\n                \n                <hr className=\"my-4\" />\n                \n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{leaveStatistics.totalDaysUsed}</div>\n                  <div className=\"text-sm text-gray-600\">Toplam Kullanılan Gün ({selectedYear})</div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">Veri yükleniyor...</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":19345},"client/src/pages/Reports.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ReportBuilder } from \"@/components/Reports/ReportBuilder\";\nimport { ReportTemplates } from \"@/components/Reports/ReportTemplates\";\nimport { ReportHistory } from \"@/components/Reports/ReportHistory\";\nimport { ReportAnalytics } from \"@/components/Reports/ReportAnalytics\";\nimport { ScheduledReports } from \"@/components/Reports/ScheduledReports\";\nimport { \n  FileBarChart, \n  Settings, \n  History, \n  BarChart3,\n  Clock,\n  Plus\n} from \"lucide-react\";\n\nexport default function Reports() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [reportBuilderOpen, setReportBuilderOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Yetki Hatası\",\n        description: \"Oturumunuz sona erdi. Yeniden giriş yapılıyor...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be redirected\n  }\n\n  return (\n    <div className=\"px-4 py-6 sm:px-6 lg:px-8\">\n      {/* Page Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Raporlama Sistemi</h1>\n            <p className=\"text-muted-foreground\">\n              Kapsamlı raporlar oluşturun, yönetin ve analiz edin\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => setReportBuilderOpen(true)}\n              data-testid=\"button-new-report\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Yeni Rapor\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"templates\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"templates\" data-testid=\"tab-templates\">\n            <FileBarChart className=\"mr-2 h-4 w-4\" />\n            Şablonlar\n          </TabsTrigger>\n          <TabsTrigger value=\"builder\" data-testid=\"tab-builder\">\n            <Settings className=\"mr-2 h-4 w-4\" />\n            Rapor Oluşturucu\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n            <History className=\"mr-2 h-4 w-4\" />\n            Geçmiş\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">\n            <BarChart3 className=\"mr-2 h-4 w-4\" />\n            Analitik\n          </TabsTrigger>\n          <TabsTrigger value=\"scheduled\" data-testid=\"tab-scheduled\">\n            <Clock className=\"mr-2 h-4 w-4\" />\n            Zamanlanmış\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <ReportTemplates />\n        </TabsContent>\n\n        <TabsContent value=\"builder\" className=\"space-y-4\">\n          <ReportBuilder />\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <ReportHistory />\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <ReportAnalytics />\n        </TabsContent>\n\n        <TabsContent value=\"scheduled\" className=\"space-y-4\">\n          <ScheduledReports />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":4051},"client/src/components/Reports/ReportAnalytics.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  BarChart3, \n  TrendingUp, \n  TrendingDown,\n  Users,\n  FileText,\n  Clock,\n  Download,\n  Eye,\n  Target,\n  Info\n} from 'lucide-react';\n\ninterface AnalyticsData {\n  reportUsage: {\n    totalReports: number;\n    thisMonth: number;\n    lastMonth: number;\n    growth: number;\n  };\n  popularReports: {\n    name: string;\n    category: string;\n    count: number;\n    percentage: number;\n  }[];\n  userActivity: {\n    activeUsers: number;\n    topUsers: {\n      name: string;\n      reportsCreated: number;\n      lastActive: string;\n    }[];\n  };\n  performanceMetrics: {\n    avgGenerationTime: string;\n    successRate: number;\n    totalDownloads: number;\n  };\n  categoryBreakdown: {\n    category: string;\n    count: number;\n    percentage: number;\n    trend: 'up' | 'down' | 'stable';\n  }[];\n  timeDistribution: {\n    hour: number;\n    count: number;\n  }[];\n}\n\nexport function ReportAnalytics() {\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);\n  const [timeRange, setTimeRange] = useState('30d');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [timeRange]);\n\n  const loadAnalyticsData = () => {\n    // Mock analytics data\n    const mockData: AnalyticsData = {\n      reportUsage: {\n        totalReports: 156,\n        thisMonth: 42,\n        lastMonth: 35,\n        growth: 20\n      },\n      popularReports: [\n        { name: 'Personel Özeti Raporu', category: 'Personel', count: 28, percentage: 18 },\n        { name: 'İzin Analiz Raporu', category: 'İzin', count: 24, percentage: 15 },\n        { name: 'Devam Durumu Raporu', category: 'Devam', count: 19, percentage: 12 },\n        { name: 'Vardiya Kapsama Raporu', category: 'Vardiya', count: 15, percentage: 10 },\n        { name: 'Performans Raporu', category: 'Performans', count: 12, percentage: 8 }\n      ],\n      userActivity: {\n        activeUsers: 12,\n        topUsers: [\n          { name: 'Admin User', reportsCreated: 23, lastActive: '2025-01-20T11:30:00Z' },\n          { name: 'HR Manager', reportsCreated: 18, lastActive: '2025-01-20T10:15:00Z' },\n          { name: 'Operations Manager', reportsCreated: 14, lastActive: '2025-01-19T16:45:00Z' },\n          { name: 'Finance Manager', reportsCreated: 11, lastActive: '2025-01-19T14:20:00Z' }\n        ]\n      },\n      performanceMetrics: {\n        avgGenerationTime: '2.4 saniye',\n        successRate: 94.5,\n        totalDownloads: 247\n      },\n      categoryBreakdown: [\n        { category: 'Personel', count: 45, percentage: 29, trend: 'up' },\n        { category: 'İzin', count: 38, percentage: 24, trend: 'up' },\n        { category: 'Devam', count: 32, percentage: 21, trend: 'stable' },\n        { category: 'Vardiya', count: 24, percentage: 15, trend: 'down' },\n        { category: 'Performans', count: 17, percentage: 11, trend: 'up' }\n      ],\n      timeDistribution: [\n        { hour: 8, count: 12 },\n        { hour: 9, count: 18 },\n        { hour: 10, count: 24 },\n        { hour: 11, count: 21 },\n        { hour: 12, count: 8 },\n        { hour: 13, count: 6 },\n        { hour: 14, count: 15 },\n        { hour: 15, count: 19 },\n        { hour: 16, count: 16 },\n        { hour: 17, count: 12 }\n      ]\n    };\n\n    setAnalyticsData(mockData);\n  };\n\n  const getTrendIcon = (trend: 'up' | 'down' | 'stable') => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"h-4 w-4 text-green-500\" />;\n      case 'down':\n        return <TrendingDown className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <div className=\"h-4 w-4 bg-gray-400 rounded-full\"></div>;\n    }\n  };\n\n  if (!analyticsData) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert>\n        <Info className=\"h-4 w-4\" />\n        <AlertDescription>\n          Rapor kullanım istatistikleri, popüler raporlar ve performans metriklerini analiz edin.\n        </AlertDescription>\n      </Alert>\n\n      {/* Time Range Selector */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Raporlama Analitiği</h3>\n            <Select value={timeRange} onValueChange={setTimeRange}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7d\">Son 7 Gün</SelectItem>\n                <SelectItem value=\"30d\">Son 30 Gün</SelectItem>\n                <SelectItem value=\"90d\">Son 3 Ay</SelectItem>\n                <SelectItem value=\"1y\">Son 1 Yıl</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-8 w-8 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Toplam Rapor</p>\n                <p className=\"text-2xl font-bold\">{analyticsData.reportUsage.totalReports}</p>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                  <span className=\"text-xs text-green-600\">\n                    +{analyticsData.reportUsage.growth}% bu ay\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"h-8 w-8 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Aktif Kullanıcı</p>\n                <p className=\"text-2xl font-bold\">{analyticsData.userActivity.activeUsers}</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Bu ay rapor oluşturan</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Clock className=\"h-8 w-8 text-purple-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Ortalama Süre</p>\n                <p className=\"text-2xl font-bold\">{analyticsData.performanceMetrics.avgGenerationTime}</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Rapor oluşturma süresi</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Target className=\"h-8 w-8 text-orange-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Başarı Oranı</p>\n                <p className=\"text-2xl font-bold\">{analyticsData.performanceMetrics.successRate}%</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Başarılı rapor oluşturma</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Popular Reports & Category Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Popular Reports */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              En Popüler Raporlar\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analyticsData.popularReports.map((report, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-sm\">{report.name}</div>\n                    <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                      {report.category}\n                    </Badge>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium\">{report.count}</div>\n                    <div className=\"text-xs text-gray-500\">{report.percentage}%</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Category Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Kategori Dağılımı</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analyticsData.categoryBreakdown.map((category, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium text-sm\">{category.category}</span>\n                      {getTrendIcon(category.trend)}\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"font-medium\">{category.count}</span>\n                      <span className=\"text-xs text-gray-500 ml-2\">({category.percentage}%)</span>\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${category.percentage}%` }}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Activity & Time Distribution */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Top Users */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              En Aktif Kullanıcılar\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analyticsData.userActivity.topUsers.map((user, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${\n                      index === 0 ? 'bg-yellow-500' :\n                      index === 1 ? 'bg-gray-400' :\n                      index === 2 ? 'bg-orange-600' : 'bg-blue-500'\n                    }`}>\n                      {index + 1}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-sm\">{user.name}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        Son aktiflik: {new Date(user.lastActive).toLocaleDateString('tr-TR')}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium\">{user.reportsCreated}</div>\n                    <div className=\"text-xs text-gray-500\">rapor</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Time Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Saatlik Dağılım\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {analyticsData.timeDistribution.map((time, index) => {\n                const maxCount = Math.max(...analyticsData.timeDistribution.map(t => t.count));\n                const percentage = (time.count / maxCount) * 100;\n                \n                return (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <div className=\"w-12 text-sm font-medium\">\n                      {time.hour.toString().padStart(2, '0')}:00\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                        <div \n                          className=\"bg-blue-500 h-3 rounded-full transition-all duration-300\"\n                          style={{ width: `${percentage}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                    <div className=\"w-8 text-sm text-gray-600\">{time.count}</div>\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"mt-4 text-xs text-gray-500\">\n              * En yoğun saatler: 10:00-11:00 arası\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Insights */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Performans İçgörüleri</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <Download className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-green-600\">\n                {analyticsData.performanceMetrics.totalDownloads}\n              </div>\n              <div className=\"text-sm text-gray-600\">Toplam İndirme</div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                Ortalama: {Math.round(analyticsData.performanceMetrics.totalDownloads / analyticsData.reportUsage.totalReports * 10) / 10} per rapor\n              </div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <Eye className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-blue-600\">87%</div>\n              <div className=\"text-sm text-gray-600\">Görüntüleme Oranı</div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                Rapor oluşturulan vs görüntülenen\n              </div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n              <TrendingUp className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-purple-600\">+24%</div>\n              <div className=\"text-sm text-gray-600\">Aylık Artış</div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                Önceki aya göre kullanım artışı\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recommendations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Öneriler</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start gap-3 p-3 bg-blue-50 rounded-lg\">\n              <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div>\n                <div className=\"font-medium text-blue-800\">En Popüler Saatler</div>\n                <div className=\"text-sm text-blue-700\">\n                  Raporlar genellikle 10:00-11:00 arası oluşturuluyor. Bu saatlerde sistem performansını optimize etmeyi düşünün.\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3 p-3 bg-green-50 rounded-lg\">\n              <TrendingUp className=\"h-5 w-5 text-green-600 mt-0.5\" />\n              <div>\n                <div className=\"font-medium text-green-800\">Artan Kullanım</div>\n                <div className=\"text-sm text-green-700\">\n                  Personel ve İzin kategorilerinde %20+ artış var. Bu kategoriler için yeni şablonlar eklenebilir.\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3 p-3 bg-orange-50 rounded-lg\">\n              <Target className=\"h-5 w-5 text-orange-600 mt-0.5\" />\n              <div>\n                <div className=\"font-medium text-orange-800\">İyileştirme Fırsatı</div>\n                <div className=\"text-sm text-orange-700\">\n                  Vardiya raporlarında kullanım düşüş gösteriyor. Kullanıcı geri bildirimlerini değerlendirin.\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16977},"client/src/components/Reports/ReportBuilder.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Plus,\n  Minus,\n  Database,\n  Filter,\n  BarChart3,\n  Table as TableIcon,\n  Download,\n  Eye,\n  Settings,\n  Info,\n  Play\n} from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DataSource {\n  id: string;\n  name: string;\n  table: string;\n  description: string;\n  fields: DataField[];\n}\n\ninterface DataField {\n  id: string;\n  name: string;\n  type: 'string' | 'number' | 'date' | 'boolean';\n  description: string;\n  aggregatable: boolean;\n}\n\ninterface ReportConfig {\n  name: string;\n  description: string;\n  dataSource: string;\n  selectedFields: string[];\n  filters: ReportFilter[];\n  groupBy: string[];\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n  chartType: 'table' | 'bar' | 'pie' | 'line';\n  limit: number;\n}\n\ninterface ReportFilter {\n  id: string;\n  field: string;\n  operator: 'equals' | 'contains' | 'greater' | 'less' | 'between';\n  value: string;\n  value2?: string; // For 'between' operator\n}\n\nexport function ReportBuilder() {\n  const [dataSources, setDataSources] = useState<DataSource[]>([]);\n  const [config, setConfig] = useState<ReportConfig>({\n    name: '',\n    description: '',\n    dataSource: '',\n    selectedFields: [],\n    filters: [],\n    groupBy: [],\n    sortBy: '',\n    sortOrder: 'asc',\n    chartType: 'table',\n    limit: 100\n  });\n  const [previewData, setPreviewData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadDataSources();\n  }, []);\n\n  const loadDataSources = () => {\n    // Predefined data sources\n    const sources: DataSource[] = [\n      {\n        id: 'personnel',\n        name: 'Personel Bilgileri',\n        table: 'personnel',\n        description: 'Personel temel bilgileri ve demografik veriler',\n        fields: [\n          { id: 'firstName', name: 'Ad', type: 'string', description: 'Personelin adı', aggregatable: false },\n          { id: 'lastName', name: 'Soyad', type: 'string', description: 'Personelin soyadı', aggregatable: false },\n          { id: 'email', name: 'E-posta', type: 'string', description: 'E-posta adresi', aggregatable: false },\n          { id: 'phone', name: 'Telefon', type: 'string', description: 'Telefon numarası', aggregatable: false },\n          { id: 'position', name: 'Pozisyon', type: 'string', description: 'İş pozisyonu', aggregatable: true },\n          { id: 'departmentId', name: 'Departman', type: 'string', description: 'Departman bilgisi', aggregatable: true },\n          { id: 'hireDate', name: 'İşe Başlama', type: 'date', description: 'İşe başlama tarihi', aggregatable: false },\n          { id: 'salary', name: 'Maaş', type: 'number', description: 'Maaş bilgisi', aggregatable: true },\n          { id: 'isActive', name: 'Aktif', type: 'boolean', description: 'Aktiflik durumu', aggregatable: true }\n        ]\n      },\n      {\n        id: 'leave_requests',\n        name: 'İzin Talepleri',\n        table: 'leave_requests',\n        description: 'İzin talepleri ve onay durumları',\n        fields: [\n          { id: 'personnelId', name: 'Personel ID', type: 'string', description: 'Talebi yapan personel', aggregatable: true },\n          { id: 'leaveTypeId', name: 'İzin Türü', type: 'string', description: 'İzin türü', aggregatable: true },\n          { id: 'startDate', name: 'Başlangıç Tarihi', type: 'date', description: 'İzin başlangıç tarihi', aggregatable: false },\n          { id: 'endDate', name: 'Bitiş Tarihi', type: 'date', description: 'İzin bitiş tarihi', aggregatable: false },\n          { id: 'status', name: 'Durum', type: 'string', description: 'Onay durumu', aggregatable: true },\n          { id: 'reason', name: 'Sebep', type: 'string', description: 'İzin sebebi', aggregatable: false },\n          { id: 'createdAt', name: 'Oluşturma Tarihi', type: 'date', description: 'Talep oluşturma tarihi', aggregatable: false }\n        ]\n      },\n      {\n        id: 'shift_assignments',\n        name: 'Vardiya Atamaları',\n        table: 'shift_assignments',\n        description: 'Personel vardiya atama bilgileri',\n        fields: [\n          { id: 'personnelId', name: 'Personel ID', type: 'string', description: 'Atanan personel', aggregatable: true },\n          { id: 'shiftId', name: 'Vardiya ID', type: 'string', description: 'Vardiya bilgisi', aggregatable: true },\n          { id: 'date', name: 'Tarih', type: 'date', description: 'Vardiya tarihi', aggregatable: false },\n          { id: 'isActive', name: 'Aktif', type: 'boolean', description: 'Aktiflik durumu', aggregatable: true },\n          { id: 'createdAt', name: 'Oluşturma', type: 'date', description: 'Atama tarihi', aggregatable: false }\n        ]\n      },\n      {\n        id: 'attendance',\n        name: 'Devam Kayıtları',\n        table: 'attendance',\n        description: 'QR kod ile giriş-çıkış kayıtları',\n        fields: [\n          { id: 'personnelId', name: 'Personel ID', type: 'string', description: 'Personel bilgisi', aggregatable: true },\n          { id: 'type', name: 'Tür', type: 'string', description: 'Giriş/Çıkış', aggregatable: true },\n          { id: 'timestamp', name: 'Zaman', type: 'date', description: 'Kayıt zamanı', aggregatable: false },\n          { id: 'location', name: 'Konum', type: 'string', description: 'Kayıt konumu', aggregatable: true },\n          { id: 'method', name: 'Yöntem', type: 'string', description: 'QR/Manual', aggregatable: true }\n        ]\n      }\n    ];\n\n    setDataSources(sources);\n  };\n\n  const getSelectedDataSource = () => {\n    return dataSources.find(ds => ds.id === config.dataSource);\n  };\n\n  const addFilter = () => {\n    const newFilter: ReportFilter = {\n      id: Date.now().toString(),\n      field: '',\n      operator: 'equals',\n      value: ''\n    };\n    setConfig(prev => ({\n      ...prev,\n      filters: [...prev.filters, newFilter]\n    }));\n  };\n\n  const updateFilter = (id: string, updates: Partial<ReportFilter>) => {\n    setConfig(prev => ({\n      ...prev,\n      filters: prev.filters.map(filter => \n        filter.id === id ? { ...filter, ...updates } : filter\n      )\n    }));\n  };\n\n  const removeFilter = (id: string) => {\n    setConfig(prev => ({\n      ...prev,\n      filters: prev.filters.filter(filter => filter.id !== id)\n    }));\n  };\n\n  const generatePreview = async () => {\n    if (!config.dataSource || config.selectedFields.length === 0) {\n      toast({\n        title: \"Hata\",\n        description: \"Lütfen veri kaynağı ve alanları seçin\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Simulate report generation with mock data\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Generate mock preview data\n      const mockData = generateMockData();\n      setPreviewData(mockData);\n      setShowPreview(true);\n      \n      toast({\n        title: \"Önizleme Hazır\",\n        description: \"Rapor önizlemesi başarıyla oluşturuldu\",\n      });\n    } catch (error) {\n      console.error('Error generating preview:', error);\n      toast({\n        title: \"Hata\",\n        description: \"Önizleme oluşturulurken hata oluştu\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateMockData = () => {\n    const selectedDataSource = getSelectedDataSource();\n    if (!selectedDataSource) return [];\n\n    // Generate sample data based on selected fields\n    const mockRows = [];\n    for (let i = 0; i < Math.min(config.limit, 10); i++) {\n      const row: any = {};\n      config.selectedFields.forEach(fieldId => {\n        const field = selectedDataSource.fields.find(f => f.id === fieldId);\n        if (field) {\n          switch (field.type) {\n            case 'string':\n              row[fieldId] = field.id === 'firstName' ? ['Ahmet', 'Mehmet', 'Ayşe', 'Fatma'][i % 4] :\n                           field.id === 'lastName' ? ['Yılmaz', 'Demir', 'Kaya', 'Öz'][i % 4] :\n                           field.id === 'position' ? ['Yazılımcı', 'Analiste', 'Müdür', 'Uzman'][i % 4] :\n                           `Örnek ${field.name} ${i + 1}`;\n              break;\n            case 'number':\n              row[fieldId] = Math.floor(Math.random() * 10000) + 5000;\n              break;\n            case 'date':\n              row[fieldId] = new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n              break;\n            case 'boolean':\n              row[fieldId] = Math.random() > 0.3;\n              break;\n          }\n        }\n      });\n      mockRows.push(row);\n    }\n    return mockRows;\n  };\n\n  const saveReport = async () => {\n    if (!config.name || !config.dataSource || config.selectedFields.length === 0) {\n      toast({\n        title: \"Hata\",\n        description: \"Lütfen rapor adı, veri kaynağı ve alanları doldurun\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Simulate saving report\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Rapor Kaydedildi\",\n        description: `${config.name} başarıyla kaydedildi`,\n      });\n      \n      // Reset form\n      setConfig({\n        name: '',\n        description: '',\n        dataSource: '',\n        selectedFields: [],\n        filters: [],\n        groupBy: [],\n        sortBy: '',\n        sortOrder: 'asc',\n        chartType: 'table',\n        limit: 100\n      });\n      setShowPreview(false);\n      setPreviewData([]);\n      \n    } catch (error) {\n      console.error('Error saving report:', error);\n      toast({\n        title: \"Hata\",\n        description: \"Rapor kaydedilirken hata oluştu\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectedDataSource = getSelectedDataSource();\n  const availableFields = selectedDataSource?.fields || [];\n  const aggregatableFields = availableFields.filter(f => f.aggregatable);\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert>\n        <Info className=\"h-4 w-4\" />\n        <AlertDescription>\n          Özelleştirilmiş raporlar oluşturmak için veri kaynağını seçin, alanları belirleyin ve filtreler ekleyin.\n        </AlertDescription>\n      </Alert>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Configuration Panel */}\n        <div className=\"space-y-6\">\n          {/* Basic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Rapor Bilgileri</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>Rapor Adı *</Label>\n                <Input \n                  value={config.name}\n                  onChange={(e) => setConfig(prev => ({...prev, name: e.target.value}))}\n                  placeholder=\"Örn: Departman Bazlı Personel Analizi\"\n                />\n              </div>\n              <div>\n                <Label>Açıklama</Label>\n                <Textarea \n                  value={config.description}\n                  onChange={(e) => setConfig(prev => ({...prev, description: e.target.value}))}\n                  placeholder=\"Rapor hakkında kısa açıklama...\"\n                  rows={3}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Data Source Selection */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Veri Kaynağı\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>Veri Kaynağı Seçin *</Label>\n                <Select \n                  value={config.dataSource} \n                  onValueChange={(value) => setConfig(prev => ({\n                    ...prev, \n                    dataSource: value,\n                    selectedFields: [],\n                    filters: [],\n                    groupBy: []\n                  }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Veri kaynağı seçin\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {dataSources.map((source) => (\n                      <SelectItem key={source.id} value={source.id}>\n                        <div>\n                          <div className=\"font-medium\">{source.name}</div>\n                          <div className=\"text-xs text-gray-500\">{source.description}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {selectedDataSource && (\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"text-sm font-medium\">{selectedDataSource.name}</p>\n                  <p className=\"text-xs text-gray-600\">{selectedDataSource.description}</p>\n                  <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                    {selectedDataSource.fields.length} alan mevcut\n                  </Badge>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Field Selection */}\n          {selectedDataSource && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Alan Seçimi</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"max-h-60 overflow-y-auto space-y-2\">\n                  {availableFields.map((field) => (\n                    <div key={field.id} className=\"flex items-start space-x-2\">\n                      <Checkbox\n                        checked={config.selectedFields.includes(field.id)}\n                        onCheckedChange={(checked) => {\n                          setConfig(prev => ({\n                            ...prev,\n                            selectedFields: checked\n                              ? [...prev.selectedFields, field.id]\n                              : prev.selectedFields.filter(id => id !== field.id)\n                          }));\n                        }}\n                        className=\"mt-1\"\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm font-medium\">{field.name}</span>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {field.type}\n                          </Badge>\n                          {field.aggregatable && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Toplanabilir\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-xs text-gray-600\">{field.description}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Filters */}\n          {selectedDataSource && config.selectedFields.length > 0 && (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Filter className=\"h-5 w-5\" />\n                    Filtreler\n                  </CardTitle>\n                  <Button size=\"sm\" onClick={addFilter}>\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Filtre Ekle\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {config.filters.length === 0 ? (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    Henüz filtre eklenmemiş. Verilerinizi sınırlamak için filtre ekleyin.\n                  </p>\n                ) : (\n                  config.filters.map((filter) => (\n                    <div key={filter.id} className=\"border rounded-lg p-3 space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label className=\"text-sm font-medium\">Filtre</Label>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => removeFilter(filter.id)}\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-2\">\n                        <Select \n                          value={filter.field} \n                          onValueChange={(value) => updateFilter(filter.id, { field: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Alan\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {availableFields.map((field) => (\n                              <SelectItem key={field.id} value={field.id}>\n                                {field.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        \n                        <Select \n                          value={filter.operator} \n                          onValueChange={(value) => updateFilter(filter.id, { operator: value as any })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"İşlem\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"equals\">Eşit</SelectItem>\n                            <SelectItem value=\"contains\">İçerir</SelectItem>\n                            <SelectItem value=\"greater\">Büyük</SelectItem>\n                            <SelectItem value=\"less\">Küçük</SelectItem>\n                            <SelectItem value=\"between\">Arasında</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        \n                        <Input \n                          value={filter.value}\n                          onChange={(e) => updateFilter(filter.id, { value: e.target.value })}\n                          placeholder=\"Değer\"\n                        />\n                      </div>\n                      \n                      {filter.operator === 'between' && (\n                        <Input \n                          value={filter.value2 || ''}\n                          onChange={(e) => updateFilter(filter.id, { value2: e.target.value })}\n                          placeholder=\"İkinci değer\"\n                        />\n                      )}\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Additional Options */}\n          {selectedDataSource && config.selectedFields.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Ek Seçenekler\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Sıralama</Label>\n                    <Select \n                      value={config.sortBy} \n                      onValueChange={(value) => setConfig(prev => ({...prev, sortBy: value}))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Sıralama alanı\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {config.selectedFields.map((fieldId) => {\n                          const field = availableFields.find(f => f.id === fieldId);\n                          return field ? (\n                            <SelectItem key={field.id} value={field.id}>\n                              {field.name}\n                            </SelectItem>\n                          ) : null;\n                        })}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label>Sıralama Türü</Label>\n                    <Select \n                      value={config.sortOrder} \n                      onValueChange={(value) => setConfig(prev => ({...prev, sortOrder: value as any}))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"asc\">Artan</SelectItem>\n                        <SelectItem value=\"desc\">Azalan</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Grafik Türü</Label>\n                    <Select \n                      value={config.chartType} \n                      onValueChange={(value) => setConfig(prev => ({...prev, chartType: value as any}))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"table\">Tablo</SelectItem>\n                        <SelectItem value=\"bar\">Çubuk Grafik</SelectItem>\n                        <SelectItem value=\"pie\">Pasta Grafik</SelectItem>\n                        <SelectItem value=\"line\">Çizgi Grafik</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label>Kayıt Limiti</Label>\n                    <Input \n                      type=\"number\" \n                      value={config.limit}\n                      onChange={(e) => setConfig(prev => ({...prev, limit: parseInt(e.target.value) || 100}))}\n                      min={1}\n                      max={10000}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={generatePreview}\n              disabled={loading || !config.dataSource || config.selectedFields.length === 0}\n              className=\"flex-1\"\n            >\n              {loading ? (\n                <>Oluşturuluyor...</>\n              ) : (\n                <>\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Önizleme\n                </>\n              )}\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={saveReport}\n              disabled={loading || !config.name || !config.dataSource || config.selectedFields.length === 0}\n              className=\"flex-1\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Kaydet\n            </Button>\n          </div>\n        </div>\n\n        {/* Preview Panel */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Rapor Önizlemesi\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!showPreview ? (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <TableIcon className=\"mx-auto h-12 w-12 mb-4\" />\n                  <p>Rapor önizlemesi görüntülenmek için öncelikle yapılandırmayı tamamlayın ve \"Önizleme\" butonuna tıklayın.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Config Summary */}\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Rapor Yapılandırması</h4>\n                    <div className=\"text-sm space-y-1\">\n                      <div><strong>Veri Kaynağı:</strong> {selectedDataSource?.name}</div>\n                      <div><strong>Seçili Alanlar:</strong> {config.selectedFields.length} alan</div>\n                      <div><strong>Filtre:</strong> {config.filters.length} filtre</div>\n                      <div><strong>Grafik:</strong> {config.chartType}</div>\n                    </div>\n                  </div>\n\n                  {/* Preview Table */}\n                  {previewData.length > 0 && (\n                    <div className=\"border rounded-lg overflow-auto max-h-96\">\n                      <table className=\"w-full text-sm\">\n                        <thead className=\"bg-gray-50\">\n                          <tr>\n                            {config.selectedFields.map((fieldId) => {\n                              const field = availableFields.find(f => f.id === fieldId);\n                              return field ? (\n                                <th key={fieldId} className=\"text-left p-3 font-medium\">\n                                  {field.name}\n                                </th>\n                              ) : null;\n                            })}\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {previewData.map((row, index) => (\n                            <tr key={index} className=\"border-t\">\n                              {config.selectedFields.map((fieldId) => (\n                                <td key={fieldId} className=\"p-3\">\n                                  {typeof row[fieldId] === 'boolean' \n                                    ? (row[fieldId] ? 'Evet' : 'Hayır')\n                                    : row[fieldId]\n                                  }\n                                </td>\n                              ))}\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":27356},"client/src/components/Reports/ReportHistory.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { \n  FileText, \n  Download, \n  Eye, \n  Trash2,\n  Search,\n  Filter,\n  Calendar,\n  User,\n  Info,\n  MoreHorizontal,\n  Share2,\n  RefreshCw\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ReportRecord {\n  id: string;\n  name: string;\n  type: string;\n  status: 'completed' | 'failed' | 'processing';\n  createdBy: string;\n  createdAt: string;\n  completedAt?: string;\n  fileSize?: string;\n  downloadCount: number;\n  format: 'PDF' | 'Excel' | 'CSV';\n  category: string;\n  parameters?: any;\n  error?: string;\n}\n\nexport function ReportHistory() {\n  const [reports, setReports] = useState<ReportRecord[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [dateFilter, setDateFilter] = useState('all');\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadReportHistory();\n  }, []);\n\n  const loadReportHistory = () => {\n    // Mock report history data\n    const mockReports: ReportRecord[] = [\n      {\n        id: '1',\n        name: 'Personel Özeti Raporu',\n        type: 'personnel-summary',\n        status: 'completed',\n        createdBy: 'Admin User',\n        createdAt: '2025-01-20T10:30:00Z',\n        completedAt: '2025-01-20T10:32:15Z',\n        fileSize: '1.2 MB',\n        downloadCount: 5,\n        format: 'PDF',\n        category: 'Personel',\n        parameters: { departmentId: 'all', includeInactive: false }\n      },\n      {\n        id: '2',\n        name: 'İzin Analiz Raporu',\n        type: 'leave-analysis',\n        status: 'completed',\n        createdBy: 'HR Manager',\n        createdAt: '2025-01-20T09:15:00Z',\n        completedAt: '2025-01-20T09:18:45Z',\n        fileSize: '856 KB',\n        downloadCount: 12,\n        format: 'Excel',\n        category: 'İzin',\n        parameters: { startDate: '2025-01-01', endDate: '2025-01-31' }\n      },\n      {\n        id: '3',\n        name: 'Vardiya Kapsama Raporu',\n        type: 'shift-coverage',\n        status: 'failed',\n        createdBy: 'Operations Manager',\n        createdAt: '2025-01-20T08:45:00Z',\n        fileSize: undefined,\n        downloadCount: 0,\n        format: 'PDF',\n        category: 'Vardiya',\n        error: 'Veri eksikliği: Bazı vardiya bilgileri bulunamadı'\n      },\n      {\n        id: '4',\n        name: 'Devam Durumu Raporu',\n        type: 'attendance-summary',\n        status: 'processing',\n        createdBy: 'Admin User',\n        createdAt: '2025-01-20T11:00:00Z',\n        fileSize: undefined,\n        downloadCount: 0,\n        format: 'CSV',\n        category: 'Devam'\n      },\n      {\n        id: '5',\n        name: 'Aylık Performans Raporu',\n        type: 'performance-monthly',\n        status: 'completed',\n        createdBy: 'HR Manager',\n        createdAt: '2025-01-19T16:20:00Z',\n        completedAt: '2025-01-19T16:28:10Z',\n        fileSize: '2.8 MB',\n        downloadCount: 3,\n        format: 'PDF',\n        category: 'Performans',\n        parameters: { month: 'December', year: 2024 }\n      },\n      {\n        id: '6',\n        name: 'Maliyet Analiz Raporu',\n        type: 'cost-analysis',\n        status: 'completed',\n        createdBy: 'Finance Manager',\n        createdAt: '2025-01-19T14:30:00Z',\n        completedAt: '2025-01-19T14:35:20Z',\n        fileSize: '1.5 MB',\n        downloadCount: 8,\n        format: 'Excel',\n        category: 'Finansal'\n      },\n      {\n        id: '7',\n        name: 'Eğitim ve Gelişim Raporu',\n        type: 'training-report',\n        status: 'completed',\n        createdBy: 'Training Coordinator',\n        createdAt: '2025-01-18T10:00:00Z',\n        completedAt: '2025-01-18T10:05:30Z',\n        fileSize: '640 KB',\n        downloadCount: 2,\n        format: 'PDF',\n        category: 'Eğitim'\n      }\n    ];\n\n    setReports(mockReports);\n  };\n\n  const downloadReport = (report: ReportRecord) => {\n    if (report.status !== 'completed') {\n      toast({\n        title: \"İndirilemez\",\n        description: \"Sadece tamamlanmış raporlar indirilebilir\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Simulate download\n    toast({\n      title: \"İndirme Başladı\",\n      description: `${report.name} indiriliyor...`,\n    });\n\n    // Update download count\n    setReports(prev => prev.map(r => \n      r.id === report.id ? { ...r, downloadCount: r.downloadCount + 1 } : r\n    ));\n  };\n\n  const shareReport = (report: ReportRecord) => {\n    // Copy link to clipboard (mock)\n    navigator.clipboard.writeText(`${window.location.origin}/reports/${report.id}`);\n    toast({\n      title: \"Link Kopyalandı\",\n      description: \"Rapor bağlantısı panoya kopyalandı\",\n    });\n  };\n\n  const deleteReport = (report: ReportRecord) => {\n    if (window.confirm(`\"${report.name}\" raporunu silmek istediğinizden emin misiniz?`)) {\n      setReports(prev => prev.filter(r => r.id !== report.id));\n      toast({\n        title: \"Rapor Silindi\",\n        description: `${report.name} başarıyla silindi`,\n      });\n    }\n  };\n\n  const regenerateReport = (report: ReportRecord) => {\n    toast({\n      title: \"Rapor Yeniden Oluşturuluyor\",\n      description: `${report.name} yeniden oluşturulacak...`,\n    });\n    \n    // Update status to processing\n    setReports(prev => prev.map(r => \n      r.id === report.id ? { ...r, status: 'processing' as const } : r\n    ));\n\n    // Simulate regeneration\n    setTimeout(() => {\n      setReports(prev => prev.map(r => \n        r.id === report.id ? { \n          ...r, \n          status: 'completed' as const,\n          completedAt: new Date().toISOString(),\n          fileSize: '1.1 MB'\n        } : r\n      ));\n      toast({\n        title: \"Rapor Hazır\",\n        description: `${report.name} yeniden oluşturuldu`,\n      });\n    }, 3000);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"bg-green-100 text-green-800\">Tamamlandı</Badge>;\n      case 'processing':\n        return <Badge className=\"bg-blue-100 text-blue-800\">İşleniyor</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Başarısız</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getFormatBadge = (format: string) => {\n    const colors = {\n      'PDF': 'bg-red-100 text-red-800',\n      'Excel': 'bg-green-100 text-green-800',\n      'CSV': 'bg-blue-100 text-blue-800'\n    };\n    return <Badge className={colors[format as keyof typeof colors] || 'bg-gray-100 text-gray-800'}>{format}</Badge>;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('tr-TR');\n  };\n\n  const filteredReports = reports.filter(report => {\n    const matchesSearch = report.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         report.createdBy.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || report.status === statusFilter;\n    const matchesCategory = categoryFilter === 'all' || report.category === categoryFilter;\n    \n    let matchesDate = true;\n    if (dateFilter !== 'all') {\n      const reportDate = new Date(report.createdAt);\n      const now = new Date();\n      switch (dateFilter) {\n        case 'today':\n          matchesDate = reportDate.toDateString() === now.toDateString();\n          break;\n        case 'week':\n          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          matchesDate = reportDate >= weekAgo;\n          break;\n        case 'month':\n          const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n          matchesDate = reportDate >= monthAgo;\n          break;\n      }\n    }\n    \n    return matchesSearch && matchesStatus && matchesCategory && matchesDate;\n  });\n\n  const categories = ['all', ...Array.from(new Set(reports.map(r => r.category)))];\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert>\n        <Info className=\"h-4 w-4\" />\n        <AlertDescription>\n          Oluşturulan tüm raporların geçmişini buradan görüntüleyebilir, indirebilir veya yeniden oluşturabilirsiniz.\n        </AlertDescription>\n      </Alert>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-8 w-8 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Toplam Rapor</p>\n                <p className=\"text-2xl font-bold\">{reports.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Download className=\"h-8 w-8 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Toplam İndirme</p>\n                <p className=\"text-2xl font-bold\">\n                  {reports.reduce((sum, r) => sum + r.downloadCount, 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Calendar className=\"h-8 w-8 text-purple-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Bu Hafta</p>\n                <p className=\"text-2xl font-bold\">\n                  {reports.filter(r => {\n                    const reportDate = new Date(r.createdAt);\n                    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n                    return reportDate >= weekAgo;\n                  }).length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <User className=\"h-8 w-8 text-orange-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Aktif Kullanıcı</p>\n                <p className=\"text-2xl font-bold\">\n                  {new Set(reports.map(r => r.createdBy)).size}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Rapor adı veya oluşturan kişi ara...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"w-40\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tüm Durumlar</SelectItem>\n                  <SelectItem value=\"completed\">Tamamlandı</SelectItem>\n                  <SelectItem value=\"processing\">İşleniyor</SelectItem>\n                  <SelectItem value=\"failed\">Başarısız</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"w-40\">\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map(category => (\n                    <SelectItem key={category} value={category}>\n                      {category === 'all' ? 'Tüm Kategoriler' : category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"w-32\">\n              <Select value={dateFilter} onValueChange={setDateFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tüm Tarihler</SelectItem>\n                  <SelectItem value=\"today\">Bugün</SelectItem>\n                  <SelectItem value=\"week\">Bu Hafta</SelectItem>\n                  <SelectItem value=\"month\">Bu Ay</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reports Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Rapor Adı</TableHead>\n                <TableHead>Durum</TableHead>\n                <TableHead>Format</TableHead>\n                <TableHead>Oluşturan</TableHead>\n                <TableHead>Oluşturma Tarihi</TableHead>\n                <TableHead>Boyut</TableHead>\n                <TableHead>İndirme</TableHead>\n                <TableHead>İşlemler</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredReports.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                    {searchQuery || statusFilter !== 'all' || categoryFilter !== 'all' || dateFilter !== 'all'\n                      ? 'Filtrelere uygun rapor bulunamadı.'\n                      : 'Henüz rapor oluşturulmamış.'\n                    }\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredReports.map((report) => (\n                  <TableRow key={report.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{report.name}</div>\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          {report.category}\n                        </Badge>\n                        {report.error && (\n                          <p className=\"text-xs text-red-600 mt-1\" title={report.error}>\n                            Hata: {report.error.substring(0, 50)}...\n                          </p>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>{getStatusBadge(report.status)}</TableCell>\n                    <TableCell>{getFormatBadge(report.format)}</TableCell>\n                    <TableCell>{report.createdBy}</TableCell>\n                    <TableCell>{formatDate(report.createdAt)}</TableCell>\n                    <TableCell>{report.fileSize || '-'}</TableCell>\n                    <TableCell>{report.downloadCount}</TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          {report.status === 'completed' && (\n                            <>\n                              <DropdownMenuItem onClick={() => downloadReport(report)}>\n                                <Download className=\"h-4 w-4 mr-2\" />\n                                İndir\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => shareReport(report)}>\n                                <Share2 className=\"h-4 w-4 mr-2\" />\n                                Paylaş\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                          {(report.status === 'failed' || report.status === 'completed') && (\n                            <DropdownMenuItem onClick={() => regenerateReport(report)}>\n                              <RefreshCw className=\"h-4 w-4 mr-2\" />\n                              Yeniden Oluştur\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuItem \n                            onClick={() => deleteReport(report)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Sil\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17782},"client/src/components/Reports/ReportTemplates.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  FileBarChart, \n  Users, \n  Calendar, \n  Clock, \n  TrendingUp,\n  Download,\n  Play,\n  Search,\n  Filter,\n  Info,\n  Eye\n} from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ReportTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  icon: any;\n  iconColor: string;\n  bgColor: string;\n  isPopular: boolean;\n  estimatedTime: string;\n  dataPoints: string[];\n  lastUsed?: string;\n}\n\nexport function ReportTemplates() {\n  const [templates, setTemplates] = useState<ReportTemplate[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadTemplates();\n  }, []);\n\n  const loadTemplates = () => {\n    // Predefined report templates\n    const predefinedTemplates: ReportTemplate[] = [\n      {\n        id: 'personnel-summary',\n        name: 'Personel Özeti Raporu',\n        description: 'Tüm personellerin genel bilgileri, departman dağılımı ve istatistikleri',\n        category: 'Personel',\n        icon: Users,\n        iconColor: 'text-blue-600',\n        bgColor: 'bg-blue-50',\n        isPopular: true,\n        estimatedTime: '2-3 dakika',\n        dataPoints: ['Toplam Personel', 'Departman Dağılımı', 'Pozisyon Analizi', 'İşe Başlama Tarihleri'],\n        lastUsed: '2025-01-19'\n      },\n      {\n        id: 'attendance-summary',\n        name: 'Devam Durumu Raporu',\n        description: 'Personel devam durumu, geç kalma ve erken ayrılma analizi',\n        category: 'Devam',\n        icon: Clock,\n        iconColor: 'text-green-600',\n        bgColor: 'bg-green-50',\n        isPopular: true,\n        estimatedTime: '1-2 dakika',\n        dataPoints: ['Günlük Devam', 'Geç Kalma', 'Erken Ayrılma', 'Devam Oranları'],\n        lastUsed: '2025-01-20'\n      },\n      {\n        id: 'leave-analysis',\n        name: 'İzin Analiz Raporu',\n        description: 'İzin kullanım istatistikleri, bakiye durumu ve trend analizi',\n        category: 'İzin',\n        icon: Calendar,\n        iconColor: 'text-purple-600',\n        bgColor: 'bg-purple-50',\n        isPopular: true,\n        estimatedTime: '3-4 dakika',\n        dataPoints: ['İzin Kullanımı', 'Bakiye Durumu', 'İzin Türleri', 'Departman Karşılaştırması'],\n        lastUsed: '2025-01-18'\n      },\n      {\n        id: 'shift-coverage',\n        name: 'Vardiya Kapsama Raporu',\n        description: 'Vardiya planlaması, kapsam oranları ve eksik personel analizi',\n        category: 'Vardiya',\n        icon: Clock,\n        iconColor: 'text-orange-600',\n        bgColor: 'bg-orange-50',\n        isPopular: false,\n        estimatedTime: '2-3 dakika',\n        dataPoints: ['Vardiya Planı', 'Kapsam Oranı', 'Eksik Personel', 'Çalışma Saatleri'],\n        lastUsed: '2025-01-17'\n      },\n      {\n        id: 'performance-monthly',\n        name: 'Aylık Performans Raporu',\n        description: 'Departman bazında aylık performans değerlendirmesi ve karşılaştırma',\n        category: 'Performans',\n        icon: TrendingUp,\n        iconColor: 'text-indigo-600',\n        bgColor: 'bg-indigo-50',\n        isPopular: false,\n        estimatedTime: '4-5 dakika',\n        dataPoints: ['Performans Skorları', 'Departman Karşılaştırması', 'Hedef Başarım', 'Trend Analizi']\n      },\n      {\n        id: 'cost-analysis',\n        name: 'Maliyet Analiz Raporu',\n        description: 'İnsan kaynakları maliyeti, ek mesai ve prim analizi',\n        category: 'Finansal',\n        icon: TrendingUp,\n        iconColor: 'text-emerald-600',\n        bgColor: 'bg-emerald-50',\n        isPopular: false,\n        estimatedTime: '3-4 dakika',\n        dataPoints: ['Maaş Maliyeti', 'Ek Mesai', 'Primler', 'Toplam Maliyet']\n      },\n      {\n        id: 'training-report',\n        name: 'Eğitim ve Gelişim Raporu',\n        description: 'Personel eğitim durumu, sertifikalar ve gelişim planları',\n        category: 'Eğitim',\n        icon: FileBarChart,\n        iconColor: 'text-pink-600',\n        bgColor: 'bg-pink-50',\n        isPopular: false,\n        estimatedTime: '2-3 dakika',\n        dataPoints: ['Eğitim Durumu', 'Sertifikalar', 'Gelişim Planları', 'Eğitim Maliyeti']\n      },\n      {\n        id: 'compliance-report',\n        name: 'Uyumluluk Raporu',\n        description: 'İş kanunu uyumluluk, sağlık raporu ve belge durumu analizi',\n        category: 'Uyumluluk',\n        icon: FileBarChart,\n        iconColor: 'text-red-600',\n        bgColor: 'bg-red-50',\n        isPopular: false,\n        estimatedTime: '5-6 dakika',\n        dataPoints: ['Belge Durumu', 'Sağlık Raporları', 'İş Kanunu Uyumluluk', 'Eksik Belgeler']\n      }\n    ];\n\n    setTemplates(predefinedTemplates);\n  };\n\n  const generateReport = async (template: ReportTemplate) => {\n    setLoading(true);\n    try {\n      // Simulate report generation\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      toast({\n        title: \"Rapor Oluşturuldu\",\n        description: `${template.name} başarıyla oluşturuldu ve indirme başladı`,\n      });\n\n      // Update last used date\n      setTemplates(prev => prev.map(t => \n        t.id === template.id ? { ...t, lastUsed: new Date().toISOString().split('T')[0] } : t\n      ));\n      \n    } catch (error) {\n      console.error('Error generating report:', error);\n      toast({\n        title: \"Hata\",\n        description: \"Rapor oluşturulurken hata oluştu\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const previewReport = (template: ReportTemplate) => {\n    toast({\n      title: \"Önizleme\",\n      description: `${template.name} önizlemesi açılıyor...`,\n    });\n    // In a real implementation, this would open a preview modal\n  };\n\n  const categories = ['all', 'Personel', 'Devam', 'İzin', 'Vardiya', 'Performans', 'Finansal', 'Eğitim', 'Uyumluluk'];\n\n  const filteredTemplates = templates.filter(template => {\n    const matchesSearch = template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         template.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = categoryFilter === 'all' || template.category === categoryFilter;\n    return matchesSearch && matchesCategory;\n  });\n\n  const popularTemplates = filteredTemplates.filter(t => t.isPopular);\n  const otherTemplates = filteredTemplates.filter(t => !t.isPopular);\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Search and Filter */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Rapor şablonu ara...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"w-48\">\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger>\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map(category => (\n                    <SelectItem key={category} value={category}>\n                      {category === 'all' ? 'Tüm Kategoriler' : category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Popular Templates */}\n      {popularTemplates.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4\">Popüler Rapor Şablonları</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {popularTemplates.map((template) => {\n              const Icon = template.icon;\n              return (\n                <Card key={template.id} className=\"relative overflow-hidden hover:shadow-lg transition-shadow\">\n                  <div className={`h-2 w-full ${template.bgColor}`}></div>\n                  {template.isPopular && (\n                    <Badge className=\"absolute top-3 right-3 bg-yellow-100 text-yellow-800\">\n                      Popüler\n                    </Badge>\n                  )}\n                  \n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className={`w-12 h-12 ${template.bgColor} rounded-lg flex items-center justify-center`}>\n                        <Icon className={`h-6 w-6 ${template.iconColor}`} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                        <Badge variant=\"outline\" className=\"mt-1\">\n                          {template.category}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm text-gray-600\">{template.description}</p>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>Tahmini süre: {template.estimatedTime}</span>\n                      </div>\n                      {template.lastUsed && (\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>Son kullanım: {new Date(template.lastUsed).toLocaleDateString('tr-TR')}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    <div>\n                      <p className=\"text-xs font-medium text-gray-700 mb-2\">İçerik:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {template.dataPoints.slice(0, 3).map((point, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {point}\n                          </Badge>\n                        ))}\n                        {template.dataPoints.length > 3 && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            +{template.dataPoints.length - 3}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2 pt-2\">\n                      <Button \n                        size=\"sm\" \n                        onClick={() => generateReport(template)}\n                        disabled={loading}\n                        className=\"flex-1\"\n                      >\n                        <Download className=\"h-4 w-4 mr-1\" />\n                        {loading ? 'Oluşturuluyor...' : 'Oluştur'}\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => previewReport(template)}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Other Templates */}\n      {otherTemplates.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4\">Diğer Rapor Şablonları</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {otherTemplates.map((template) => {\n              const Icon = template.icon;\n              return (\n                <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className={`w-10 h-10 ${template.bgColor} rounded-lg flex items-center justify-center`}>\n                        <Icon className={`h-5 w-5 ${template.iconColor}`} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-base\">{template.name}</CardTitle>\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          {template.category}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-3\">\n                    <p className=\"text-sm text-gray-600 line-clamp-2\">{template.description}</p>\n                    \n                    <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                      <Clock className=\"h-3 w-3\" />\n                      <span>{template.estimatedTime}</span>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => generateReport(template)}\n                        disabled={loading}\n                        className=\"flex-1\"\n                      >\n                        <Play className=\"h-4 w-4 mr-1\" />\n                        Oluştur\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Statistics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Şablon İstatistikleri</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">{templates.length}</div>\n              <div className=\"text-sm text-gray-600\">Toplam Şablon</div>\n            </div>\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">{popularTemplates.length}</div>\n              <div className=\"text-sm text-gray-600\">Popüler Şablon</div>\n            </div>\n            <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {new Set(templates.map(t => t.category)).size}\n              </div>\n              <div className=\"text-sm text-gray-600\">Kategori</div>\n            </div>\n            <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {templates.filter(t => t.lastUsed).length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Kullanılmış</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16043},"client/src/components/Reports/ScheduledReports.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { \n  Clock,\n  Plus,\n  Edit,\n  Trash2,\n  Play,\n  Pause,\n  Mail,\n  Calendar,\n  MoreHorizontal,\n  Info,\n  AlertCircle,\n  CheckCircle,\n  Search\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ScheduledReport {\n  id: string;\n  name: string;\n  description: string;\n  templateId: string;\n  templateName: string;\n  category: string;\n  schedule: {\n    frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';\n    time: string;\n    dayOfWeek?: number; // 0=Sunday for weekly\n    dayOfMonth?: number; // 1-31 for monthly\n    timezone: string;\n  };\n  recipients: string[];\n  format: 'PDF' | 'Excel' | 'CSV';\n  isActive: boolean;\n  createdBy: string;\n  createdAt: string;\n  lastRun?: string;\n  nextRun?: string;\n  runCount: number;\n  status: 'active' | 'paused' | 'error';\n  error?: string;\n}\n\nexport function ScheduledReports() {\n  const [scheduledReports, setScheduledReports] = useState<ScheduledReport[]>([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editingReport, setEditingReport] = useState<ScheduledReport | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    templateId: '',\n    frequency: 'weekly',\n    time: '09:00',\n    dayOfWeek: 1, // Monday\n    dayOfMonth: 1,\n    recipients: [''],\n    format: 'PDF',\n    isActive: true\n  });\n\n  useEffect(() => {\n    loadScheduledReports();\n  }, []);\n\n  const loadScheduledReports = () => {\n    // Mock scheduled reports data\n    const mockReports: ScheduledReport[] = [\n      {\n        id: '1',\n        name: 'Haftalık Personel Raporu',\n        description: 'Her Pazartesi sabahı departman yöneticilerine gönderilir',\n        templateId: 'personnel-summary',\n        templateName: 'Personel Özeti Raporu',\n        category: 'Personel',\n        schedule: {\n          frequency: 'weekly',\n          time: '08:00',\n          dayOfWeek: 1, // Monday\n          timezone: 'Europe/Istanbul'\n        },\n        recipients: ['hr@company.com', 'manager@company.com'],\n        format: 'PDF',\n        isActive: true,\n        createdBy: 'HR Manager',\n        createdAt: '2025-01-15T10:00:00Z',\n        lastRun: '2025-01-20T08:00:00Z',\n        nextRun: '2025-01-27T08:00:00Z',\n        runCount: 3,\n        status: 'active'\n      },\n      {\n        id: '2',\n        name: 'Aylık İzin Analizi',\n        description: 'Her ay sonu izin kullanım raporu',\n        templateId: 'leave-analysis',\n        templateName: 'İzin Analiz Raporu',\n        category: 'İzin',\n        schedule: {\n          frequency: 'monthly',\n          time: '17:00',\n          dayOfMonth: 30,\n          timezone: 'Europe/Istanbul'\n        },\n        recipients: ['hr@company.com', 'ceo@company.com'],\n        format: 'Excel',\n        isActive: true,\n        createdBy: 'Admin User',\n        createdAt: '2025-01-10T14:30:00Z',\n        lastRun: '2024-12-30T17:00:00Z',\n        nextRun: '2025-01-30T17:00:00Z',\n        runCount: 1,\n        status: 'active'\n      },\n      {\n        id: '3',\n        name: 'Günlük Devam Raporu',\n        description: 'Her gün sonu devam durumu özeti',\n        templateId: 'attendance-summary',\n        templateName: 'Devam Durumu Raporu',\n        category: 'Devam',\n        schedule: {\n          frequency: 'daily',\n          time: '18:00',\n          timezone: 'Europe/Istanbul'\n        },\n        recipients: ['operations@company.com'],\n        format: 'CSV',\n        isActive: false,\n        createdBy: 'Operations Manager',\n        createdAt: '2025-01-18T11:15:00Z',\n        lastRun: '2025-01-19T18:00:00Z',\n        nextRun: undefined,\n        runCount: 2,\n        status: 'paused'\n      },\n      {\n        id: '4',\n        name: 'Üçaylık Performans Raporu',\n        description: 'Çeyrek dönem performans değerlendirmesi',\n        templateId: 'performance-quarterly',\n        templateName: 'Performans Raporu',\n        category: 'Performans',\n        schedule: {\n          frequency: 'quarterly',\n          time: '09:00',\n          dayOfMonth: 1,\n          timezone: 'Europe/Istanbul'\n        },\n        recipients: ['management@company.com', 'board@company.com'],\n        format: 'PDF',\n        isActive: true,\n        createdBy: 'CEO',\n        createdAt: '2025-01-05T16:00:00Z',\n        lastRun: '2025-01-01T09:00:00Z',\n        nextRun: '2025-04-01T09:00:00Z',\n        runCount: 1,\n        status: 'active'\n      },\n      {\n        id: '5',\n        name: 'Vardiya Kapsama Raporu',\n        description: 'Haftalık vardiya kapsama analizi - HATA',\n        templateId: 'shift-coverage',\n        templateName: 'Vardiya Kapsama Raporu',\n        category: 'Vardiya',\n        schedule: {\n          frequency: 'weekly',\n          time: '07:00',\n          dayOfWeek: 0, // Sunday\n          timezone: 'Europe/Istanbul'\n        },\n        recipients: ['shifts@company.com'],\n        format: 'PDF',\n        isActive: true,\n        createdBy: 'Operations Manager',\n        createdAt: '2025-01-12T13:20:00Z',\n        lastRun: '2025-01-19T07:00:00Z',\n        nextRun: '2025-01-26T07:00:00Z',\n        runCount: 2,\n        status: 'error',\n        error: 'Veri kaynağına erişim hatası'\n      }\n    ];\n\n    setScheduledReports(mockReports);\n  };\n\n  const openCreateModal = () => {\n    setEditingReport(null);\n    setFormData({\n      name: '',\n      description: '',\n      templateId: '',\n      frequency: 'weekly',\n      time: '09:00',\n      dayOfWeek: 1,\n      dayOfMonth: 1,\n      recipients: [''],\n      format: 'PDF',\n      isActive: true\n    });\n    setModalOpen(true);\n  };\n\n  const openEditModal = (report: ScheduledReport) => {\n    setEditingReport(report);\n    setFormData({\n      name: report.name,\n      description: report.description,\n      templateId: report.templateId,\n      frequency: report.schedule.frequency,\n      time: report.schedule.time,\n      dayOfWeek: report.schedule.dayOfWeek || 1,\n      dayOfMonth: report.schedule.dayOfMonth || 1,\n      recipients: report.recipients,\n      format: report.format,\n      isActive: report.isActive\n    });\n    setModalOpen(true);\n  };\n\n  const saveReport = async () => {\n    if (!formData.name || !formData.templateId || formData.recipients.some(r => !r.trim())) {\n      toast({\n        title: \"Hata\",\n        description: \"Lütfen tüm gerekli alanları doldurun\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      const newReport: ScheduledReport = {\n        id: editingReport?.id || Date.now().toString(),\n        name: formData.name,\n        description: formData.description,\n        templateId: formData.templateId,\n        templateName: 'Seçilen Şablon',\n        category: 'Personel', // This would be determined by template\n        schedule: {\n          frequency: formData.frequency as any,\n          time: formData.time,\n          dayOfWeek: formData.frequency === 'weekly' ? formData.dayOfWeek : undefined,\n          dayOfMonth: ['monthly', 'quarterly'].includes(formData.frequency) ? formData.dayOfMonth : undefined,\n          timezone: 'Europe/Istanbul'\n        },\n        recipients: formData.recipients.filter(r => r.trim()),\n        format: formData.format as any,\n        isActive: formData.isActive,\n        createdBy: 'Current User',\n        createdAt: editingReport?.createdAt || new Date().toISOString(),\n        nextRun: calculateNextRun(),\n        runCount: editingReport?.runCount || 0,\n        status: formData.isActive ? 'active' : 'paused'\n      };\n\n      if (editingReport) {\n        setScheduledReports(prev => prev.map(r => r.id === editingReport.id ? newReport : r));\n        toast({\n          title: \"Rapor Güncellendi\",\n          description: `${newReport.name} başarıyla güncellendi`,\n        });\n      } else {\n        setScheduledReports(prev => [...prev, newReport]);\n        toast({\n          title: \"Rapor Zamanlandı\",\n          description: `${newReport.name} başarıyla oluşturuldu`,\n        });\n      }\n\n      setModalOpen(false);\n    } catch (error) {\n      console.error('Error saving scheduled report:', error);\n      toast({\n        title: \"Hata\",\n        description: \"Rapor kaydedilirken hata oluştu\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateNextRun = (): string => {\n    const now = new Date();\n    // This is a simplified calculation - real implementation would be more complex\n    switch (formData.frequency) {\n      case 'daily':\n        return new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString();\n      case 'weekly':\n        return new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString();\n      case 'monthly':\n        return new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString();\n      case 'quarterly':\n        return new Date(now.getTime() + 90 * 24 * 60 * 60 * 1000).toISOString();\n      default:\n        return new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString();\n    }\n  };\n\n  const toggleReportStatus = (reportId: string) => {\n    setScheduledReports(prev => prev.map(report => \n      report.id === reportId ? {\n        ...report,\n        isActive: !report.isActive,\n        status: !report.isActive ? 'active' : 'paused'\n      } : report\n    ));\n\n    const report = scheduledReports.find(r => r.id === reportId);\n    toast({\n      title: report?.isActive ? \"Rapor Duraklatıldı\" : \"Rapor Etkinleştirildi\",\n      description: `${report?.name} ${report?.isActive ? 'duraklatıldı' : 'etkinleştirildi'}`,\n    });\n  };\n\n  const runReportNow = (reportId: string) => {\n    const report = scheduledReports.find(r => r.id === reportId);\n    toast({\n      title: \"Rapor Çalıştırılıyor\",\n      description: `${report?.name} şimdi oluşturuluyor...`,\n    });\n\n    // Update run count and last run time\n    setScheduledReports(prev => prev.map(r => \n      r.id === reportId ? {\n        ...r,\n        lastRun: new Date().toISOString(),\n        runCount: r.runCount + 1\n      } : r\n    ));\n  };\n\n  const deleteReport = (reportId: string) => {\n    const report = scheduledReports.find(r => r.id === reportId);\n    if (window.confirm(`\"${report?.name}\" zamanlanmış raporunu silmek istediğinizden emin misiniz?`)) {\n      setScheduledReports(prev => prev.filter(r => r.id !== reportId));\n      toast({\n        title: \"Rapor Silindi\",\n        description: `${report?.name} başarıyla silindi`,\n      });\n    }\n  };\n\n  const addRecipient = () => {\n    setFormData(prev => ({\n      ...prev,\n      recipients: [...prev.recipients, '']\n    }));\n  };\n\n  const updateRecipient = (index: number, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      recipients: prev.recipients.map((r, i) => i === index ? value : r)\n    }));\n  };\n\n  const removeRecipient = (index: number) => {\n    if (formData.recipients.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        recipients: prev.recipients.filter((_, i) => i !== index)\n      }));\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge className=\"bg-green-100 text-green-800\">Aktif</Badge>;\n      case 'paused':\n        return <Badge className=\"bg-gray-100 text-gray-800\">Duraklatıldı</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\">Hata</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'paused':\n        return <Pause className=\"h-4 w-4 text-gray-500\" />;\n      case 'error':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getFrequencyText = (frequency: string) => {\n    switch (frequency) {\n      case 'daily': return 'Günlük';\n      case 'weekly': return 'Haftalık';\n      case 'monthly': return 'Aylık';\n      case 'quarterly': return 'Üçaylık';\n      default: return frequency;\n    }\n  };\n\n  const formatNextRun = (nextRun?: string) => {\n    if (!nextRun) return 'Duraklatıldı';\n    return new Date(nextRun).toLocaleString('tr-TR');\n  };\n\n  const filteredReports = scheduledReports.filter(report => {\n    const matchesSearch = report.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         report.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || report.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert>\n        <Info className=\"h-4 w-4\" />\n        <AlertDescription>\n          Raporları otomatik olarak oluşturmak ve e-posta ile göndermek için zamanlayın.\n        </AlertDescription>\n      </Alert>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Clock className=\"h-8 w-8 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Toplam Zamanlama</p>\n                <p className=\"text-2xl font-bold\">{scheduledReports.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Aktif</p>\n                <p className=\"text-2xl font-bold\">\n                  {scheduledReports.filter(r => r.status === 'active').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <AlertCircle className=\"h-8 w-8 text-red-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Hatalar</p>\n                <p className=\"text-2xl font-bold\">\n                  {scheduledReports.filter(r => r.status === 'error').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Mail className=\"h-8 w-8 text-purple-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Toplam Çalışma</p>\n                <p className=\"text-2xl font-bold\">\n                  {scheduledReports.reduce((sum, r) => sum + r.runCount, 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Controls */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex gap-4 flex-1\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Zamanlanmış rapor ara...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <div className=\"w-40\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tüm Durumlar</SelectItem>\n                    <SelectItem value=\"active\">Aktif</SelectItem>\n                    <SelectItem value=\"paused\">Duraklatıldı</SelectItem>\n                    <SelectItem value=\"error\">Hata</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <Button onClick={openCreateModal}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Yeni Zamanlama\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Scheduled Reports Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Durum</TableHead>\n                <TableHead>Rapor Adı</TableHead>\n                <TableHead>Sıklık</TableHead>\n                <TableHead>Alıcılar</TableHead>\n                <TableHead>Son Çalışma</TableHead>\n                <TableHead>Sonraki Çalışma</TableHead>\n                <TableHead>Çalışma Sayısı</TableHead>\n                <TableHead>İşlemler</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredReports.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                    {searchQuery || statusFilter !== 'all'\n                      ? 'Filtrelere uygun zamanlanmış rapor bulunamadı.'\n                      : 'Henüz zamanlanmış rapor yok. Yeni bir zamanlama oluşturun.'\n                    }\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredReports.map((report) => (\n                  <TableRow key={report.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {getStatusIcon(report.status)}\n                        {getStatusBadge(report.status)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{report.name}</div>\n                        <div className=\"text-sm text-gray-600\">{report.templateName}</div>\n                        {report.error && (\n                          <div className=\"text-xs text-red-600 mt-1\" title={report.error}>\n                            {report.error.substring(0, 40)}...\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{getFrequencyText(report.schedule.frequency)}</div>\n                        <div className=\"text-sm text-gray-600\">{report.schedule.time}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {report.recipients.slice(0, 2).map((recipient, index) => (\n                          <div key={index} className=\"text-sm\">{recipient}</div>\n                        ))}\n                        {report.recipients.length > 2 && (\n                          <div className=\"text-xs text-gray-500\">\n                            +{report.recipients.length - 2} daha\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {report.lastRun ? (\n                        <div className=\"text-sm\">\n                          {new Date(report.lastRun).toLocaleString('tr-TR')}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-500\">Henüz çalışmadı</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {formatNextRun(report.nextRun)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{report.runCount}</Badge>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => runReportNow(report.id)}>\n                            <Play className=\"h-4 w-4 mr-2\" />\n                            Şimdi Çalıştır\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => toggleReportStatus(report.id)}>\n                            {report.isActive ? (\n                              <>\n                                <Pause className=\"h-4 w-4 mr-2\" />\n                                Duraklat\n                              </>\n                            ) : (\n                              <>\n                                <Play className=\"h-4 w-4 mr-2\" />\n                                Etkinleştir\n                              </>\n                            )}\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => openEditModal(report)}>\n                            <Edit className=\"h-4 w-4 mr-2\" />\n                            Düzenle\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => deleteReport(report.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Sil\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Create/Edit Modal */}\n      <Dialog open={modalOpen} onOpenChange={setModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingReport ? 'Zamanlamayı Düzenle' : 'Yeni Rapor Zamanlaması'}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 py-4\">\n            {/* Basic Info */}\n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <Label>Rapor Adı *</Label>\n                <Input \n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({...prev, name: e.target.value}))}\n                  placeholder=\"Örn: Haftalık Personel Raporu\"\n                />\n              </div>\n              <div>\n                <Label>Açıklama</Label>\n                <Textarea \n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({...prev, description: e.target.value}))}\n                  placeholder=\"Rapor hakkında kısa açıklama...\"\n                  rows={3}\n                />\n              </div>\n            </div>\n\n            {/* Template Selection */}\n            <div>\n              <Label>Rapor Şablonu *</Label>\n              <Select \n                value={formData.templateId} \n                onValueChange={(value) => setFormData(prev => ({...prev, templateId: value}))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Şablon seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"personnel-summary\">Personel Özeti Raporu</SelectItem>\n                  <SelectItem value=\"leave-analysis\">İzin Analiz Raporu</SelectItem>\n                  <SelectItem value=\"attendance-summary\">Devam Durumu Raporu</SelectItem>\n                  <SelectItem value=\"shift-coverage\">Vardiya Kapsama Raporu</SelectItem>\n                  <SelectItem value=\"performance-monthly\">Aylık Performans Raporu</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Schedule Configuration */}\n            <div className=\"border rounded-lg p-4 space-y-4\">\n              <Label className=\"text-base font-medium\">Zamanlama Ayarları</Label>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Sıklık</Label>\n                  <Select \n                    value={formData.frequency} \n                    onValueChange={(value) => setFormData(prev => ({...prev, frequency: value as any}))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Günlük</SelectItem>\n                      <SelectItem value=\"weekly\">Haftalık</SelectItem>\n                      <SelectItem value=\"monthly\">Aylık</SelectItem>\n                      <SelectItem value=\"quarterly\">Üçaylık</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label>Saat</Label>\n                  <Input \n                    type=\"time\" \n                    value={formData.time}\n                    onChange={(e) => setFormData(prev => ({...prev, time: e.target.value}))}\n                  />\n                </div>\n              </div>\n\n              {formData.frequency === 'weekly' && (\n                <div>\n                  <Label>Haftanın Günü</Label>\n                  <Select \n                    value={formData.dayOfWeek.toString()} \n                    onValueChange={(value) => setFormData(prev => ({...prev, dayOfWeek: parseInt(value)}))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"0\">Pazar</SelectItem>\n                      <SelectItem value=\"1\">Pazartesi</SelectItem>\n                      <SelectItem value=\"2\">Salı</SelectItem>\n                      <SelectItem value=\"3\">Çarşamba</SelectItem>\n                      <SelectItem value=\"4\">Perşembe</SelectItem>\n                      <SelectItem value=\"5\">Cuma</SelectItem>\n                      <SelectItem value=\"6\">Cumartesi</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {['monthly', 'quarterly'].includes(formData.frequency) && (\n                <div>\n                  <Label>Ayın Günü</Label>\n                  <Input \n                    type=\"number\" \n                    min={1} \n                    max={31}\n                    value={formData.dayOfMonth}\n                    onChange={(e) => setFormData(prev => ({...prev, dayOfMonth: parseInt(e.target.value) || 1}))}\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Recipients */}\n            <div className=\"space-y-3\">\n              <Label>E-posta Alıcıları *</Label>\n              {formData.recipients.map((recipient, index) => (\n                <div key={index} className=\"flex gap-2\">\n                  <Input \n                    type=\"email\"\n                    value={recipient}\n                    onChange={(e) => updateRecipient(index, e.target.value)}\n                    placeholder=\"ornek@company.com\"\n                    className=\"flex-1\"\n                  />\n                  {formData.recipients.length > 1 && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => removeRecipient(index)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n              <Button variant=\"outline\" size=\"sm\" onClick={addRecipient}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Alıcı Ekle\n              </Button>\n            </div>\n\n            {/* Format & Status */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Dosya Formatı</Label>\n                <Select \n                  value={formData.format} \n                  onValueChange={(value) => setFormData(prev => ({...prev, format: value as any}))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"PDF\">PDF</SelectItem>\n                    <SelectItem value=\"Excel\">Excel</SelectItem>\n                    <SelectItem value=\"CSV\">CSV</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2 pt-6\">\n                <Switch \n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData(prev => ({...prev, isActive: checked}))}\n                />\n                <Label>Zamanlamayı etkinleştir</Label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setModalOpen(false)}>\n              İptal\n            </Button>\n            <Button onClick={saveReport} disabled={loading}>\n              {loading ? 'Kaydediliyor...' : (editingReport ? 'Güncelle' : 'Oluştur')}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":31012},"client/src/components/Shift/ShiftCalendar.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  ChevronLeft, \n  ChevronRight,\n  Users,\n  Calendar,\n  TrendingUp,\n  AlertTriangle,\n  Info,\n  Plus\n} from 'lucide-react';\n\ninterface ShiftCalendarEvent {\n  id: string;\n  date: string;\n  shift: {\n    id: string;\n    name: string;\n    startTime: string;\n    endTime: string;\n    color: string;\n  };\n  personnel: {\n    id: string;\n    name: string;\n    position: string;\n  };\n}\n\ninterface CoverageAnalysis {\n  date: string;\n  shifts: {\n    shift: {\n      id: string;\n      name: string;\n      startTime: string;\n      endTime: string;\n      color: string;\n    };\n    assignedPersonnel: any[];\n    assignedCount: number;\n    requiredCount: number;\n    coveragePercentage: number;\n    isAdequate: boolean;\n  }[];\n  summary: {\n    totalRequired: number;\n    totalAssigned: number;\n    overallCoveragePercentage: number;\n    adequateShifts: number;\n    inadequateShifts: number;\n  };\n}\n\nexport function ShiftCalendar() {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [calendarEvents, setCalendarEvents] = useState<ShiftCalendarEvent[]>([]);\n  const [selectedDate, setSelectedDate] = useState<string>('');\n  const [coverageData, setCoverageData] = useState<CoverageAnalysis | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [viewMode, setViewMode] = useState<'calendar' | 'coverage'>('calendar');\n\n  useEffect(() => {\n    loadCalendarData();\n  }, [currentMonth]);\n\n  useEffect(() => {\n    if (selectedDate) {\n      loadCoverageData();\n    }\n  }, [selectedDate]);\n\n  const loadCalendarData = async () => {\n    setLoading(true);\n    try {\n      const startDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1)\n        .toISOString().split('T')[0];\n      const endDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0)\n        .toISOString().split('T')[0];\n\n      const response = await fetch(`/api/shift-calendar?startDate=${startDate}&endDate=${endDate}`);\n      if (response.ok) {\n        const data = await response.json();\n        setCalendarEvents(data.assignments);\n      } else {\n        setMessage('Vardiya takvimi verileri alınamadı');\n      }\n    } catch (error) {\n      console.error('Error loading calendar data:', error);\n      setMessage('Vardiya takvimi yüklenirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadCoverageData = async () => {\n    if (!selectedDate) return;\n    \n    try {\n      const response = await fetch(`/api/shift-coverage/${selectedDate}`);\n      if (response.ok) {\n        const data = await response.json();\n        setCoverageData(data);\n      } else {\n        setMessage('Kapsama analizi verileri alınamadı');\n      }\n    } catch (error) {\n      console.error('Error loading coverage data:', error);\n      setMessage('Kapsama analizi yüklenirken hata oluştu');\n    }\n  };\n\n  const generateCalendarDays = () => {\n    const year = currentMonth.getFullYear();\n    const month = currentMonth.getMonth();\n    \n    const firstDayOfMonth = new Date(year, month, 1);\n    const lastDayOfMonth = new Date(year, month + 1, 0);\n    const startDate = new Date(firstDayOfMonth);\n    startDate.setDate(startDate.getDate() - firstDayOfMonth.getDay());\n    \n    const days = [];\n    const current = new Date(startDate);\n    \n    for (let week = 0; week < 6; week++) {\n      const weekDays = [];\n      for (let day = 0; day < 7; day++) {\n        const currentDate = new Date(current);\n        const dateStr = currentDate.toISOString().split('T')[0];\n        const isCurrentMonth = currentDate.getMonth() === month;\n        const isToday = dateStr === new Date().toISOString().split('T')[0];\n        \n        // Get events for this date\n        const dayEvents = calendarEvents.filter(event => event.date === dateStr);\n        \n        // Group events by shift\n        const shiftGroups = {};\n        dayEvents.forEach(event => {\n          const shiftId = event.shift.id;\n          if (!shiftGroups[shiftId]) {\n            shiftGroups[shiftId] = {\n              shift: event.shift,\n              personnel: []\n            };\n          }\n          shiftGroups[shiftId].personnel.push(event.personnel);\n        });\n        \n        weekDays.push({\n          date: currentDate,\n          dateStr,\n          isCurrentMonth,\n          isToday,\n          events: dayEvents,\n          shiftGroups: Object.values(shiftGroups)\n        });\n        \n        current.setDate(current.getDate() + 1);\n      }\n      days.push(weekDays);\n    }\n    \n    return days;\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentMonth);\n    newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));\n    setCurrentMonth(newDate);\n  };\n\n  const handleDateClick = (dateStr: string) => {\n    setSelectedDate(dateStr);\n    setViewMode('coverage');\n  };\n\n  const calendarDays = generateCalendarDays();\n  const monthNames = [\n    'Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran',\n    'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'\n  ];\n  const dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Header Controls */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('prev')}>\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                <h2 className=\"text-xl font-semibold\">\n                  {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}\n                </h2>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('next')}>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant={viewMode === 'calendar' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('calendar')}\n                >\n                  <Calendar className=\"h-4 w-4 mr-1\" />\n                  Takvim\n                </Button>\n                <Button\n                  variant={viewMode === 'coverage' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('coverage')}\n                  disabled={!selectedDate}\n                >\n                  <TrendingUp className=\"h-4 w-4 mr-1\" />\n                  Kapsama\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Calendar View */}\n      {viewMode === 'calendar' && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-7 gap-1 mb-4\">\n              {dayNames.map((dayName) => (\n                <div key={dayName} className=\"p-2 text-center font-medium text-gray-600 text-sm\">\n                  {dayName.slice(0, 3)}\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"grid grid-cols-7 gap-1\">\n              {calendarDays.flat().map((day, index) => (\n                <div\n                  key={index}\n                  className={`\n                    min-h-[140px] p-2 border border-gray-200 rounded-lg cursor-pointer\n                    hover:bg-gray-50 transition-colors\n                    ${day.isCurrentMonth ? 'bg-white' : 'bg-gray-50 opacity-60'}\n                    ${day.isToday ? 'ring-2 ring-blue-500' : ''}\n                    ${selectedDate === day.dateStr ? 'ring-2 ring-purple-500 bg-purple-50' : ''}\n                  `}\n                  onClick={() => handleDateClick(day.dateStr)}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${\n                      day.isToday ? 'text-blue-600' : \n                      !day.isCurrentMonth ? 'text-gray-400' : 'text-gray-900'\n                    }`}>\n                      {day.date.getDate()}\n                    </span>\n                    {day.events.length > 0 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {day.events.length}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-1\">\n                    {day.shiftGroups.slice(0, 3).map((group: any, groupIndex: number) => (\n                      <div\n                        key={groupIndex}\n                        className=\"text-xs p-1 rounded text-white text-center\"\n                        style={{ backgroundColor: group.shift.color }}\n                        title={`${group.shift.name} (${group.shift.startTime}-${group.shift.endTime}): ${group.personnel.map((p: any) => p.name).join(', ')}`}\n                      >\n                        <div className=\"font-medium truncate\">\n                          {group.shift.name}\n                        </div>\n                        <div className=\"text-xs opacity-90\">\n                          {group.personnel.length} personel\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {day.shiftGroups.length > 3 && (\n                      <div className=\"text-xs text-gray-500 text-center\">\n                        +{day.shiftGroups.length - 3} vardiya\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Coverage Analysis View */}\n      {viewMode === 'coverage' && selectedDate && coverageData && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Vardiya Kapsama Analizi - {new Date(selectedDate).toLocaleDateString('tr-TR')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {/* Summary Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {coverageData.summary.overallCoveragePercentage}%\n                </div>\n                <div className=\"text-sm text-gray-600\">Genel Kapsama</div>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {coverageData.summary.adequateShifts}\n                </div>\n                <div className=\"text-sm text-gray-600\">Yeterli Vardiya</div>\n              </div>\n              <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {coverageData.summary.inadequateShifts}\n                </div>\n                <div className=\"text-sm text-gray-600\">Yetersiz Vardiya</div>\n              </div>\n              <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-gray-600\">\n                  {coverageData.summary.totalAssigned}/{coverageData.summary.totalRequired}\n                </div>\n                <div className=\"text-sm text-gray-600\">Atanan/Gerekli</div>\n              </div>\n            </div>\n\n            {/* Detailed Shift Breakdown */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium\">Vardiya Detayları</h4>\n              {coverageData.shifts.map((shiftCoverage, index) => (\n                <div \n                  key={index} \n                  className={`border rounded-lg p-4 ${\n                    shiftCoverage.isAdequate ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-4 h-4 rounded\"\n                        style={{ backgroundColor: shiftCoverage.shift.color }}\n                      ></div>\n                      <div>\n                        <h5 className=\"font-medium\">{shiftCoverage.shift.name}</h5>\n                        <p className=\"text-sm text-gray-600\">\n                          {shiftCoverage.shift.startTime} - {shiftCoverage.shift.endTime}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3\">\n                      <Badge \n                        className={`${\n                          shiftCoverage.isAdequate ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                        }`}\n                      >\n                        {shiftCoverage.coveragePercentage}%\n                      </Badge>\n                      {!shiftCoverage.isAdequate && (\n                        <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 mb-3\">\n                    <div>\n                      <span className=\"text-sm text-gray-600\">Atanan Personel: </span>\n                      <span className=\"font-medium\">{shiftCoverage.assignedCount}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-sm text-gray-600\">Gereken Personel: </span>\n                      <span className=\"font-medium\">{shiftCoverage.requiredCount}</span>\n                    </div>\n                  </div>\n                  \n                  {shiftCoverage.assignedPersonnel.length > 0 && (\n                    <div>\n                      <p className=\"text-sm text-gray-600 mb-2\">Atanan Personeller:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {shiftCoverage.assignedPersonnel.map((person, personIndex) => (\n                          <Badge key={personIndex} variant=\"outline\">\n                            {person.name} - {person.position}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {shiftCoverage.assignedCount === 0 && (\n                    <div className=\"flex items-center gap-2 text-red-600\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Bu vardiyaya henüz kimse atanmamış</span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-2 mt-6 pt-4 border-t\">\n              <Button variant=\"outline\" onClick={() => setViewMode('calendar')}>\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Takvime Dön\n              </Button>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Vardiya Atama Ekle\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Color Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Vardiya Renk Kodları</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#3B82F6' }}></div>\n              <span className=\"text-sm\">Sabah Vardiyası</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#F59E0B' }}></div>\n              <span className=\"text-sm\">Öğleden Sonra</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#6366F1' }}></div>\n              <span className=\"text-sm\">Gece Vardiyası</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#10B981' }}></div>\n              <span className=\"text-sm\">Yarı Zamanlı</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#F97316' }}></div>\n              <span className=\"text-sm\">Özel Vardiya</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#8B5CF6' }}></div>\n              <span className=\"text-sm\">Hafta Sonu</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17780},"client/src/components/Shift/ShiftChangeRequests.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { \n  RefreshCw,\n  Clock,\n  User,\n  Calendar,\n  MessageCircle,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Plus,\n  Search,\n  Filter\n} from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ShiftChangeRequest {\n  id: string;\n  originalAssignmentId: string;\n  requestedShiftId: string;\n  requestedDate: string;\n  reason: string;\n  requesterId: string;\n  status: 'pending' | 'approved' | 'rejected';\n  createdAt: string;\n  approvedBy?: string;\n  approvedAt?: string;\n  rejectionReason?: string;\n}\n\nexport function ShiftChangeRequests() {\n  const [requests, setRequests] = useState<ShiftChangeRequest[]>([]);\n  const [personnel, setPersonnel] = useState<any[]>([]);\n  const [shifts, setShifts] = useState<any[]>([]);\n  const [assignments, setAssignments] = useState<any[]>([]);\n  const [newRequestModalOpen, setNewRequestModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const { toast } = useToast();\n\n  const [newRequest, setNewRequest] = useState({\n    originalAssignmentId: '',\n    requestedShiftId: '',\n    requestedDate: '',\n    reason: ''\n  });\n\n  useEffect(() => {\n    loadChangeRequests();\n    loadPersonnel();\n    loadShifts();\n    loadAssignments();\n  }, []);\n\n  const loadChangeRequests = async () => {\n    try {\n      const response = await fetch('/api/shift-change-requests');\n      if (response.ok) {\n        const data = await response.json();\n        setRequests(data);\n      }\n    } catch (error) {\n      console.error('Error loading change requests:', error);\n    }\n  };\n\n  const loadPersonnel = async () => {\n    try {\n      const response = await fetch('/api/personnel');\n      if (response.ok) {\n        const data = await response.json();\n        setPersonnel(data);\n      }\n    } catch (error) {\n      console.error('Error loading personnel:', error);\n    }\n  };\n\n  const loadShifts = async () => {\n    try {\n      const response = await fetch('/api/shifts');\n      if (response.ok) {\n        const data = await response.json();\n        setShifts(data);\n      }\n    } catch (error) {\n      console.error('Error loading shifts:', error);\n    }\n  };\n\n  const loadAssignments = async () => {\n    try {\n      const response = await fetch('/api/shift-assignments');\n      if (response.ok) {\n        const data = await response.json();\n        setAssignments(data);\n      }\n    } catch (error) {\n      console.error('Error loading assignments:', error);\n    }\n  };\n\n  const createChangeRequest = async () => {\n    if (!newRequest.originalAssignmentId || !newRequest.requestedShiftId || !newRequest.reason) {\n      toast({\n        title: \"Hata\",\n        description: \"Lütfen tüm alanları doldurun\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/shift-change-requests', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newRequest)\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Başarılı\",\n          description: \"Vardiya değişiklik talebi oluşturuldu\",\n        });\n        setNewRequestModalOpen(false);\n        setNewRequest({\n          originalAssignmentId: '',\n          requestedShiftId: '',\n          requestedDate: '',\n          reason: ''\n        });\n        loadChangeRequests();\n      } else {\n        toast({\n          title: \"Hata\",\n          description: \"Talep oluşturulurken hata oluştu\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Error creating change request:', error);\n      toast({\n        title: \"Hata\",\n        description: \"İşlem sırasında hata oluştu\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const approveRequest = async (requestId: string) => {\n    // In a real implementation, this would update the request status\n    toast({\n      title: \"Onaylandı\",\n      description: \"Vardiya değişiklik talebi onaylandı\",\n    });\n  };\n\n  const rejectRequest = async (requestId: string) => {\n    const reason = window.prompt(\"Red nedeni giriniz:\");\n    if (reason !== null) {\n      // In a real implementation, this would update the request status\n      toast({\n        title: \"Reddedildi\",\n        description: \"Vardiya değişiklik talebi reddedildi\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\">Beklemede</Badge>;\n      case 'approved':\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Onaylandı</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Reddedildi</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n      case 'approved':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const filteredRequests = requests.filter(request => {\n    const matchesSearch = true; // In a real implementation, you'd search by personnel name, etc.\n    const matchesStatus = statusFilter === 'all' || request.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  // Mock data for demonstration since we don't have a proper database table yet\n  const mockRequests = [\n    {\n      id: '1',\n      originalAssignmentId: 'assign-1',\n      requestedShiftId: 'shift-2',\n      requestedDate: '2025-02-15',\n      reason: 'Kişisel nedenler',\n      requesterId: 'user-1',\n      status: 'pending' as const,\n      createdAt: '2025-01-20T10:30:00Z',\n    },\n    {\n      id: '2',\n      originalAssignmentId: 'assign-2',\n      requestedShiftId: 'shift-1',\n      requestedDate: '2025-02-16',\n      reason: 'Sağlık kontrolü',\n      requesterId: 'user-2',\n      status: 'approved' as const,\n      createdAt: '2025-01-19T14:15:00Z',\n      approvedBy: 'admin-1',\n      approvedAt: '2025-01-19T16:30:00Z'\n    }\n  ];\n\n  const displayRequests = requests.length > 0 ? filteredRequests : mockRequests;\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <RefreshCw className=\"h-5 w-5\" />\n              Vardiya Değişim Talepleri\n            </CardTitle>\n            <Button onClick={() => setNewRequestModalOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Yeni Talep\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Personel ara...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"w-48\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tüm Durumlar</SelectItem>\n                  <SelectItem value=\"pending\">Beklemede</SelectItem>\n                  <SelectItem value=\"approved\">Onaylandı</SelectItem>\n                  <SelectItem value=\"rejected\">Reddedildi</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <AlertCircle className=\"h-8 w-8 text-yellow-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Bekleyen Talepler</p>\n                <p className=\"text-2xl font-bold\">\n                  {displayRequests.filter(r => r.status === 'pending').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Onaylandı</p>\n                <p className=\"text-2xl font-bold\">\n                  {displayRequests.filter(r => r.status === 'approved').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <XCircle className=\"h-8 w-8 text-red-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Reddedildi</p>\n                <p className=\"text-2xl font-bold\">\n                  {displayRequests.filter(r => r.status === 'rejected').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <RefreshCw className=\"h-8 w-8 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Toplam Talep</p>\n                <p className=\"text-2xl font-bold\">{displayRequests.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Requests Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Durum</TableHead>\n                <TableHead>Talep Eden</TableHead>\n                <TableHead>Mevcut Vardiya</TableHead>\n                <TableHead>İstenen Vardiya</TableHead>\n                <TableHead>Tarih</TableHead>\n                <TableHead>Neden</TableHead>\n                <TableHead>Oluşturma</TableHead>\n                <TableHead>İşlemler</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {displayRequests.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                    Henüz vardiya değişim talebi bulunmuyor.\n                  </TableCell>\n                </TableRow>\n              ) : (\n                displayRequests.map((request) => (\n                  <TableRow key={request.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {getStatusIcon(request.status)}\n                        {getStatusBadge(request.status)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-gray-400\" />\n                        <span>Personel #{request.requesterId.slice(-3)}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-blue-500\" />\n                        <span>Sabah Vardiyası</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-orange-500\" />\n                        <span>Öğleden Sonra Vardiyası</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-gray-400\" />\n                        <span>{new Date(request.requestedDate).toLocaleDateString('tr-TR')}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <MessageCircle className=\"h-4 w-4 text-gray-400\" />\n                        <span className=\"truncate max-w-32\" title={request.reason}>\n                          {request.reason}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(request.createdAt).toLocaleDateString('tr-TR')}\n                    </TableCell>\n                    <TableCell>\n                      {request.status === 'pending' && (\n                        <div className=\"flex gap-2\">\n                          <Button \n                            size=\"sm\" \n                            onClick={() => approveRequest(request.id)}\n                          >\n                            Onayla\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => rejectRequest(request.id)}\n                          >\n                            Reddet\n                          </Button>\n                        </div>\n                      )}\n                      {request.status === 'approved' && (\n                        <span className=\"text-sm text-green-600\">Onaylandı</span>\n                      )}\n                      {request.status === 'rejected' && (\n                        <span className=\"text-sm text-red-600\">Reddedildi</span>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* New Request Modal */}\n      <Dialog open={newRequestModalOpen} onOpenChange={setNewRequestModalOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Yeni Vardiya Değişim Talebi</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label>Mevcut Vardiya Ataması</Label>\n              <Select \n                value={newRequest.originalAssignmentId} \n                onValueChange={(value) => setNewRequest({...newRequest, originalAssignmentId: value})}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Atama seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"assign-1\">15 Şubat 2025 - Sabah Vardiyası</SelectItem>\n                  <SelectItem value=\"assign-2\">16 Şubat 2025 - Öğleden Sonra Vardiyası</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>İstenen Vardiya</Label>\n              <Select \n                value={newRequest.requestedShiftId} \n                onValueChange={(value) => setNewRequest({...newRequest, requestedShiftId: value})}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Vardiya seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {shifts.map((shift) => (\n                    <SelectItem key={shift.id} value={shift.id}>\n                      {shift.name} ({shift.startTime}-{shift.endTime})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>İstenen Tarih (isteğe bağlı)</Label>\n              <Input \n                type=\"date\" \n                value={newRequest.requestedDate}\n                onChange={(e) => setNewRequest({...newRequest, requestedDate: e.target.value})}\n              />\n            </div>\n\n            <div>\n              <Label>Değişiklik Nedeni</Label>\n              <Textarea \n                placeholder=\"Vardiya değişikliği nedeninizi açıklayın...\"\n                value={newRequest.reason}\n                onChange={(e) => setNewRequest({...newRequest, reason: e.target.value})}\n                rows={3}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setNewRequestModalOpen(false)}>\n              İptal\n            </Button>\n            <Button onClick={createChangeRequest} disabled={loading}>\n              {loading ? 'Talep Oluşturuluyor...' : 'Talep Oluştur'}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18463},"client/src/components/Shift/ShiftTemplates.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { \n  Clock,\n  Users,\n  Download,\n  Upload,\n  Plus,\n  Copy,\n  Settings,\n  Info,\n  CheckCircle\n} from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ShiftTemplate {\n  id: string;\n  name: string;\n  description: string;\n  startTime: string;\n  endTime: string;\n  workingHours: string;\n  color: string;\n  isDefault: boolean;\n}\n\ninterface BulkAssignmentData {\n  templateId: string;\n  startDate: string;\n  endDate: string;\n  selectedPersonnel: string[];\n  selectedDays: number[]; // 0=Sunday, 1=Monday, etc.\n}\n\nexport function ShiftTemplates() {\n  const [templates, setTemplates] = useState<ShiftTemplate[]>([]);\n  const [personnel, setPersonnel] = useState<any[]>([]);\n  const [bulkModalOpen, setBulkModalOpen] = useState(false);\n  const [bulkData, setBulkData] = useState<BulkAssignmentData>({\n    templateId: '',\n    startDate: '',\n    endDate: '',\n    selectedPersonnel: [],\n    selectedDays: [1, 2, 3, 4, 5] // Default: weekdays\n  });\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadTemplates();\n    loadPersonnel();\n  }, []);\n\n  const loadTemplates = async () => {\n    try {\n      const response = await fetch('/api/shift-templates');\n      if (response.ok) {\n        const data = await response.json();\n        setTemplates(data);\n      } else {\n        setMessage('Vardiya şablonları yüklenemedi');\n      }\n    } catch (error) {\n      console.error('Error loading templates:', error);\n      setMessage('Şablonlar yüklenirken hata oluştu');\n    }\n  };\n\n  const loadPersonnel = async () => {\n    try {\n      const response = await fetch('/api/personnel');\n      if (response.ok) {\n        const data = await response.json();\n        setPersonnel(data);\n      }\n    } catch (error) {\n      console.error('Error loading personnel:', error);\n    }\n  };\n\n  const createShiftFromTemplate = async (template: ShiftTemplate) => {\n    try {\n      const response = await fetch('/api/shifts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: template.name,\n          description: template.description,\n          startTime: template.startTime,\n          endTime: template.endTime,\n          workingHours: template.workingHours,\n          isActive: true\n        })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Başarılı\",\n          description: `${template.name} şablonundan vardiya oluşturuldu`,\n        });\n      } else {\n        toast({\n          title: \"Hata\",\n          description: \"Vardiya oluşturulurken hata oluştu\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Error creating shift from template:', error);\n      toast({\n        title: \"Hata\",\n        description: \"İşlem sırasında hata oluştu\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkAssignment = async () => {\n    if (!bulkData.templateId || !bulkData.startDate || !bulkData.endDate || bulkData.selectedPersonnel.length === 0) {\n      toast({\n        title: \"Hata\",\n        description: \"Lütfen tüm alanları doldurun\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Generate assignments for selected date range and personnel\n      const assignments = [];\n      const start = new Date(bulkData.startDate);\n      const end = new Date(bulkData.endDate);\n      \n      // Find the shift ID that corresponds to this template\n      // For now, we'll use a placeholder - in a real system, you'd create the shift first\n      const shiftId = 'template-shift-' + bulkData.templateId;\n\n      for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {\n        const dayOfWeek = date.getDay();\n        \n        // Only assign on selected days of the week\n        if (bulkData.selectedDays.includes(dayOfWeek)) {\n          for (const personnelId of bulkData.selectedPersonnel) {\n            assignments.push({\n              personnelId,\n              shiftId,\n              date: date.toISOString().split('T')[0]\n            });\n          }\n        }\n      }\n\n      const response = await fetch('/api/shift-assignments/bulk', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          assignments,\n          templateId: bulkData.templateId\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Başarılı\",\n          description: `${result.successCount} atama başarıyla oluşturuldu`,\n        });\n        setBulkModalOpen(false);\n        setBulkData({\n          templateId: '',\n          startDate: '',\n          endDate: '',\n          selectedPersonnel: [],\n          selectedDays: [1, 2, 3, 4, 5]\n        });\n      } else {\n        toast({\n          title: \"Hata\",\n          description: \"Toplu atama sırasında hata oluştu\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Error creating bulk assignments:', error);\n      toast({\n        title: \"Hata\",\n        description: \"İşlem sırasında hata oluştu\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const dayNames = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>{message}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Action Buttons */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Vardiya Şablonları\n            </CardTitle>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setBulkModalOpen(true)}>\n                <Users className=\"h-4 w-4 mr-2\" />\n                Toplu Atama\n              </Button>\n              <Button variant=\"outline\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Excel İndir\n              </Button>\n              <Button variant=\"outline\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Excel Yükle\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Template Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {templates.map((template) => (\n          <Card key={template.id} className=\"relative overflow-hidden\">\n            <div \n              className=\"h-2 w-full\"\n              style={{ backgroundColor: template.color }}\n            ></div>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                {template.isDefault && (\n                  <Badge className=\"bg-blue-100 text-blue-800\">Varsayılan</Badge>\n                )}\n              </div>\n              <p className=\"text-sm text-gray-600\">{template.description}</p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {/* Time Details */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Başlangıç:</span>\n                  <span className=\"font-medium\">{template.startTime}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Bitiş:</span>\n                  <span className=\"font-medium\">{template.endTime}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Çalışma Saati:</span>\n                  <span className=\"font-medium\">{template.workingHours} saat</span>\n                </div>\n              </div>\n\n              {/* Color Preview */}\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-gray-600\">Renk:</span>\n                <div \n                  className=\"w-6 h-6 rounded border\"\n                  style={{ backgroundColor: template.color }}\n                ></div>\n                <span className=\"text-xs text-gray-500\">{template.color}</span>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-2 pt-2\">\n                <Button \n                  size=\"sm\" \n                  onClick={() => createShiftFromTemplate(template)}\n                  className=\"flex-1\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Vardiya Oluştur\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Usage Statistics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Şablon Kullanım İstatistikleri</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">{templates.length}</div>\n              <div className=\"text-sm text-gray-600\">Toplam Şablon</div>\n            </div>\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {templates.filter(t => t.isDefault).length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Varsayılan Şablon</div>\n            </div>\n            <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {templates.filter(t => !t.isDefault).length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Özel Şablon</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Assignment Modal */}\n      <Dialog open={bulkModalOpen} onOpenChange={setBulkModalOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Toplu Vardiya Atama</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 py-4\">\n            {/* Template Selection */}\n            <div>\n              <Label>Vardiya Şablonu</Label>\n              <Select \n                value={bulkData.templateId} \n                onValueChange={(value) => setBulkData({...bulkData, templateId: value})}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Şablon seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {templates.map((template) => (\n                    <SelectItem key={template.id} value={template.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded\"\n                          style={{ backgroundColor: template.color }}\n                        ></div>\n                        {template.name} ({template.startTime}-{template.endTime})\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Date Range */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Başlangıç Tarihi</Label>\n                <Input \n                  type=\"date\" \n                  value={bulkData.startDate}\n                  onChange={(e) => setBulkData({...bulkData, startDate: e.target.value})}\n                />\n              </div>\n              <div>\n                <Label>Bitiş Tarihi</Label>\n                <Input \n                  type=\"date\" \n                  value={bulkData.endDate}\n                  onChange={(e) => setBulkData({...bulkData, endDate: e.target.value})}\n                />\n              </div>\n            </div>\n\n            {/* Days of Week Selection */}\n            <div>\n              <Label className=\"mb-3 block\">Çalışma Günleri</Label>\n              <div className=\"grid grid-cols-7 gap-2\">\n                {dayNames.map((day, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id={`day-${index}`}\n                      checked={bulkData.selectedDays.includes(index)}\n                      onChange={(e) => {\n                        const days = e.target.checked\n                          ? [...bulkData.selectedDays, index]\n                          : bulkData.selectedDays.filter(d => d !== index);\n                        setBulkData({...bulkData, selectedDays: days});\n                      }}\n                      className=\"rounded border-gray-300\"\n                    />\n                    <Label htmlFor={`day-${index}`} className=\"text-sm\">\n                      {day.slice(0, 3)}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Personnel Selection */}\n            <div>\n              <Label className=\"mb-3 block\">Personel Seçimi</Label>\n              <div className=\"max-h-40 overflow-y-auto border rounded-lg p-3 space-y-2\">\n                {personnel.map((person) => (\n                  <div key={person.id} className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id={`person-${person.id}`}\n                      checked={bulkData.selectedPersonnel.includes(person.id)}\n                      onChange={(e) => {\n                        const personnel = e.target.checked\n                          ? [...bulkData.selectedPersonnel, person.id]\n                          : bulkData.selectedPersonnel.filter(p => p !== person.id);\n                        setBulkData({...bulkData, selectedPersonnel: personnel});\n                      }}\n                      className=\"rounded border-gray-300\"\n                    />\n                    <Label htmlFor={`person-${person.id}`} className=\"text-sm\">\n                      {person.firstName} {person.lastName} - {person.position}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Summary */}\n            {bulkData.selectedPersonnel.length > 0 && bulkData.startDate && bulkData.endDate && (\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Atama Özeti</h4>\n                <div className=\"text-sm space-y-1\">\n                  <div>Seçilen Personel: {bulkData.selectedPersonnel.length} kişi</div>\n                  <div>Seçilen Günler: {bulkData.selectedDays.map(d => dayNames[d].slice(0, 3)).join(', ')}</div>\n                  <div>Tarih Aralığı: {bulkData.startDate} - {bulkData.endDate}</div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setBulkModalOpen(false)}>\n              İptal\n            </Button>\n            <Button onClick={handleBulkAssignment} disabled={loading}>\n              {loading ? 'Atamalar Oluşturuluyor...' : 'Toplu Atama Yap'}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16613},"client/src/components/Branch/BranchAnalytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from \"recharts\";\nimport { TrendingUp, TrendingDown, Users, Clock, Target, Award } from \"lucide-react\";\nimport type { Branch } from \"@shared/schema\";\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n// Mock data - gerçek projede API'den gelecek\nconst performanceData = [\n  { name: 'Ana Şube', personnel: 45, attendance: 95, productivity: 87, satisfaction: 92 },\n  { name: 'Kadıköy Şube', personnel: 32, attendance: 88, productivity: 82, satisfaction: 89 },\n  { name: 'Beyoğlu Şube', personnel: 28, attendance: 92, productivity: 90, satisfaction: 85 },\n  { name: 'Ataşehir Şube', personnel: 38, attendance: 89, productivity: 85, satisfaction: 91 },\n];\n\nconst monthlyTrends = [\n  { month: 'Oca', anaşube: 85, kadıköy: 82, beyoğlu: 88, ataşehir: 87 },\n  { month: 'Şub', anaşube: 87, kadıköy: 84, beyoğlu: 89, ataşehir: 88 },\n  { month: 'Mar', anaşube: 90, kadıköy: 86, beyoğlu: 91, ataşehir: 89 },\n  { month: 'Nis', anaşube: 88, kadıköy: 83, beyoğlu: 87, ataşehir: 85 },\n  { month: 'May', anaşube: 92, kadıköy: 88, beyoğlu: 93, ataşehir: 91 },\n  { month: 'Haz', anaşube: 95, kadıköy: 90, beyoğlu: 94, ataşehir: 92 },\n];\n\nconst departmentDistribution = [\n  { name: 'Satış', value: 35, count: 142 },\n  { name: 'Müşteri Hizmetleri', value: 25, count: 98 },\n  { name: 'Operasyon', value: 20, count: 76 },\n  { name: 'Finans', value: 12, count: 45 },\n  { name: 'İnsan Kaynakları', value: 8, count: 32 },\n];\n\nexport function BranchAnalytics() {\n  const { data: branches } = useQuery<Branch[]>({\n    queryKey: ['/api/branches'],\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Özet Kartlar */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Toplam Şube</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{branches?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600 flex items-center gap-1\">\n                <TrendingUp className=\"h-3 w-3\" />\n                +2 yeni\n              </span>\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ortalama Katılım</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">91%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600 flex items-center gap-1\">\n                <TrendingUp className=\"h-3 w-3\" />\n                +3% geçen ay\n              </span>\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Verimlilik</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">86%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600 flex items-center gap-1\">\n                <TrendingUp className=\"h-3 w-3\" />\n                +1% geçen ay\n              </span>\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Memnuniyet</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">89%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-red-600 flex items-center gap-1\">\n                <TrendingDown className=\"h-3 w-3\" />\n                -1% geçen ay\n              </span>\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"performance\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"performance\">Performans Karşılaştırması</TabsTrigger>\n          <TabsTrigger value=\"trends\">Zaman Serileri</TabsTrigger>\n          <TabsTrigger value=\"distribution\">Departman Dağılımı</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"performance\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Şube Performans Karşılaştırması</CardTitle>\n                <CardDescription>\n                  Tüm şubelerin ana performans göstergelerinin karşılaştırması\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={performanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"attendance\" fill=\"#8884d8\" name=\"Katılım %\" />\n                    <Bar dataKey=\"productivity\" fill=\"#82ca9d\" name=\"Verimlilik %\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Şube Detay Metrikleri</CardTitle>\n                <CardDescription>\n                  Her şube için detaylı performans göstergeleri\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {performanceData.map((branch, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium\">{branch.name}</span>\n                      <Badge variant=\"outline\">\n                        {branch.personnel} kişi\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">Katılım</div>\n                        <Progress value={branch.attendance} className=\"h-2\" />\n                        <div className=\"text-xs text-right mt-1\">{branch.attendance}%</div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">Verimlilik</div>\n                        <Progress value={branch.productivity} className=\"h-2\" />\n                        <div className=\"text-xs text-right mt-1\">{branch.productivity}%</div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-muted-foreground\">Memnuniyet</div>\n                        <Progress value={branch.satisfaction} className=\"h-2\" />\n                        <div className=\"text-xs text-right mt-1\">{branch.satisfaction}%</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Aylık Performans Trendleri</CardTitle>\n              <CardDescription>\n                Son 6 ayın şube bazlı performans eğilimleri\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <LineChart data={monthlyTrends}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"anaşube\" stroke=\"#8884d8\" strokeWidth={2} name=\"Ana Şube\" />\n                  <Line type=\"monotone\" dataKey=\"kadıköy\" stroke=\"#82ca9d\" strokeWidth={2} name=\"Kadıköy\" />\n                  <Line type=\"monotone\" dataKey=\"beyoğlu\" stroke=\"#ffc658\" strokeWidth={2} name=\"Beyoğlu\" />\n                  <Line type=\"monotone\" dataKey=\"ataşehir\" stroke=\"#ff7300\" strokeWidth={2} name=\"Ataşehir\" />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"distribution\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Departman Dağılımı</CardTitle>\n                <CardDescription>\n                  Tüm şubeler genelinde departman bazlı personel dağılımı\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={departmentDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {departmentDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Departman Detayları</CardTitle>\n                <CardDescription>\n                  Departman bazlı personel sayıları ve oranları\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {departmentDistribution.map((dept, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-4 h-4 rounded-full\" \n                        style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                      />\n                      <span className=\"font-medium\">{dept.name}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-medium\">{dept.count} kişi</div>\n                      <div className=\"text-sm text-muted-foreground\">{dept.value}%</div>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":11893},"client/src/components/Branch/BranchList.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Edit, Trash2, MapPin, Phone, Mail, Users } from \"lucide-react\";\nimport type { Branch } from \"@shared/schema\";\n\ninterface BranchListProps {\n  onEdit: (branch: Branch) => void;\n  onDelete: (id: string) => void;\n}\n\nexport function BranchList({ onEdit, onDelete }: BranchListProps) {\n  const { data: branches, isLoading } = useQuery<Branch[]>({\n    queryKey: ['/api/branches'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"p-4\">\n            <Skeleton className=\"h-4 w-1/4 mb-2\" />\n            <Skeleton className=\"h-3 w-1/2 mb-1\" />\n            <Skeleton className=\"h-3 w-1/3\" />\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!branches || branches.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-muted-foreground\">\n        Henüz şube bulunmuyor. Yeni şube eklemek için \"Yeni Şube\" butonunu kullanın.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Şube Adı</TableHead>\n              <TableHead>Adres</TableHead>\n              <TableHead>İletişim</TableHead>\n              <TableHead>Yönetici</TableHead>\n              <TableHead>Durum</TableHead>\n              <TableHead className=\"text-right\">İşlemler</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {branches.map((branch) => (\n              <TableRow key={branch.id}>\n                <TableCell className=\"font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    {branch.name}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {branch.address || \"Adres belirtilmemiş\"}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"space-y-1\">\n                    {branch.phone && (\n                      <div className=\"flex items-center gap-1 text-sm\">\n                        <Phone className=\"h-3 w-3\" />\n                        {branch.phone}\n                      </div>\n                    )}\n                    {branch.email && (\n                      <div className=\"flex items-center gap-1 text-sm\">\n                        <Mail className=\"h-3 w-3\" />\n                        {branch.email}\n                      </div>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">\n                      {branch.managerId ? \"Atanmış\" : \"Atanmamış\"}\n                    </span>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <Badge variant=\"default\">Aktif</Badge>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <div className=\"flex items-center gap-2 justify-end\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onEdit(branch)}\n                      data-testid={`button-edit-branch-${branch.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onDelete(branch.id)}\n                      data-testid={`button-delete-branch-${branch.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n        <div>Toplam {branches.length} şube</div>\n        <div>Son güncelleme: {new Date().toLocaleDateString('tr-TR')}</div>\n      </div>\n    </div>\n  );\n}","size_bytes":4701},"client/src/components/Branch/BranchModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertBranchSchema, type InsertBranch, type Branch, type User } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertBranchSchema.extend({\n  managerId: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface BranchModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  branch?: Branch | null;\n  onSuccess: () => void;\n}\n\nexport function BranchModal({ isOpen, onClose, branch, onSuccess }: BranchModalProps) {\n  const queryClient = useQueryClient();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: ['/api/personnel'], // Get potential managers\n    enabled: isOpen,\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: branch?.name || \"\",\n      address: branch?.address || \"\",\n      phone: branch?.phone || \"\",\n      email: branch?.email || \"\",\n      managerId: branch?.managerId || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertBranch) => {\n      const response = await fetch('/api/branches', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create branch');\n      return response.json();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<InsertBranch>) => {\n      const response = await fetch(`/api/branches/${branch?.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update branch');\n      return response.json();\n    },\n  });\n\n  const onSubmit = async (data: FormData) => {\n    setIsLoading(true);\n    try {\n      if (branch) {\n        await updateMutation.mutateAsync(data);\n      } else {\n        await createMutation.mutateAsync(data);\n      }\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/branches'] });\n      onSuccess();\n    } catch (error) {\n      console.error('Error saving branch:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>\n            {branch ? \"Şube Düzenle\" : \"Yeni Şube Oluştur\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Şube Adı *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ana Şube\" \n                        {...field} \n                        data-testid=\"input-branch-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"managerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Şube Yöneticisi</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-branch-manager\">\n                          <SelectValue placeholder=\"Yönetici seçin\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"\">Yönetici atanmamış</SelectItem>\n                        {users?.map((user) => (\n                          <SelectItem key={user.id} value={user.id}>\n                            {user.firstName} {user.lastName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Adres</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Şube adresi...\" \n                      rows={3} \n                      {...field} \n                      data-testid=\"textarea-branch-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Telefon</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"(0212) 555 00 00\" \n                        {...field} \n                        data-testid=\"input-branch-phone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>E-posta</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\" \n                        placeholder=\"sube@sirket.com\" \n                        {...field} \n                        data-testid=\"input-branch-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex items-center gap-3 pt-4\">\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                data-testid=\"button-save-branch\"\n              >\n                {isLoading ? \"Kaydediliyor...\" : (branch ? \"Güncelle\" : \"Oluştur\")}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel-branch\"\n              >\n                İptal\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7645},"client/src/components/Branch/BranchSettings.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormDescription, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, Clock, Users, Shield, Smartphone } from \"lucide-react\";\nimport type { Branch, SystemSetting } from \"@shared/schema\";\n\nexport function BranchSettings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: branches } = useQuery<Branch[]>({\n    queryKey: ['/api/branches'],\n  });\n\n  const { data: settings } = useQuery<SystemSetting[]>({\n    queryKey: ['/api/system-settings', 'branch'],\n  });\n\n  const updateSettingMutation = useMutation({\n    mutationFn: async ({ key, value }: { key: string; value: string }) => {\n      const response = await fetch(`/api/system-settings/${key}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ value }),\n      });\n      if (!response.ok) throw new Error('Failed to update setting');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/system-settings'] });\n      toast({\n        title: \"Ayar güncellendi\",\n        description: \"Şube ayarları başarıyla güncellendi.\",\n      });\n    },\n  });\n\n  const form = useForm({\n    defaultValues: {\n      workingHoursStart: \"08:00\",\n      workingHoursEnd: \"18:00\",\n      breakDuration: \"60\",\n      maxOvertimeHours: \"8\",\n      minPersonnelCount: \"2\",\n      allowWeekendWork: true,\n      requireManagerApproval: true,\n      enableQRTracking: true,\n      allowMobileAccess: true,\n    },\n  });\n\n  return (\n    <Tabs defaultValue=\"general\" className=\"space-y-4\">\n      <TabsList className=\"grid w-full grid-cols-4\">\n        <TabsTrigger value=\"general\" className=\"flex items-center gap-2\">\n          <Settings className=\"h-4 w-4\" />\n          Genel\n        </TabsTrigger>\n        <TabsTrigger value=\"time\" className=\"flex items-center gap-2\">\n          <Clock className=\"h-4 w-4\" />\n          Zaman\n        </TabsTrigger>\n        <TabsTrigger value=\"personnel\" className=\"flex items-center gap-2\">\n          <Users className=\"h-4 w-4\" />\n          Personel\n        </TabsTrigger>\n        <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n          <Shield className=\"h-4 w-4\" />\n          Güvenlik\n        </TabsTrigger>\n      </TabsList>\n\n      <TabsContent value=\"general\" className=\"space-y-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Genel Şube Ayarları</CardTitle>\n            <CardDescription>\n              Tüm şubeler için genel konfigürasyonlar\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Form {...form}>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"allowWeekendWork\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Hafta Sonu Çalışması</FormLabel>\n                        <FormDescription>\n                          Şubelerde hafta sonu çalışmasına izin ver\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"requireManagerApproval\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Yönetici Onayı</FormLabel>\n                        <FormDescription>\n                          Kritik işlemler için yönetici onayı gerekli\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"time\" className=\"space-y-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Çalışma Zamanları</CardTitle>\n            <CardDescription>\n              Şube çalışma saatleri ve zaman ayarları\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Form {...form}>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"workingHoursStart\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Çalışma Başlangıcı</FormLabel>\n                      <FormControl>\n                        <Input type=\"time\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"workingHoursEnd\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Çalışma Bitişi</FormLabel>\n                      <FormControl>\n                        <Input type=\"time\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"breakDuration\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mola Süresi (dakika)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"0\" max=\"120\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"maxOvertimeHours\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Maksimum Fazla Mesai (saat)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"0\" max=\"12\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"personnel\" className=\"space-y-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Personel Ayarları</CardTitle>\n            <CardDescription>\n              Şube personeli ile ilgili konfigürasyonlar\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Form {...form}>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"minPersonnelCount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Minimum Personel Sayısı</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"1\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        Şubede bulunması gereken minimum personel sayısı\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"security\" className=\"space-y-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Güvenlik Ayarları</CardTitle>\n            <CardDescription>\n              Şube güvenlik ve erişim konfigürasyonları\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Form {...form}>\n              <div className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"enableQRTracking\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">QR Kod Takibi</FormLabel>\n                        <FormDescription>\n                          QR kod ile giriş-çıkış takibini etkinleştir\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"allowMobileAccess\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base flex items-center gap-2\">\n                          <Smartphone className=\"h-4 w-4\" />\n                          Mobil Erişim\n                        </FormLabel>\n                        <FormDescription>\n                          Mobil cihazlardan sisteme erişime izin ver\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <div className=\"flex justify-end pt-4\">\n        <Button \n          onClick={() => {\n            // Save all settings\n            toast({\n              title: \"Ayarlar kaydedildi\",\n              description: \"Tüm şube ayarları başarıyla güncellendi.\",\n            });\n          }}\n        >\n          Ayarları Kaydet\n        </Button>\n      </div>\n    </Tabs>\n  );\n}","size_bytes":11955},"client/src/components/Personnel/DocumentManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Trash2, FileText, Download, Upload, AlertTriangle, CheckCircle, Calendar } from \"lucide-react\";\nimport { insertDocumentSchema, type Document, type InsertDocument } from \"@shared/schema\";\n\ninterface DocumentManagementProps {\n  personnelId: string;\n}\n\nexport function DocumentManagement({ personnelId }: DocumentManagementProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingDocument, setEditingDocument] = useState<Document | null>(null);\n\n  const { data: documents, isLoading } = useQuery<Document[]>({\n    queryKey: ['/api/documents', personnelId],\n  });\n\n  const form = useForm<InsertDocument>({\n    resolver: zodResolver(insertDocumentSchema),\n    defaultValues: {\n      personnelId,\n      documentType: \"\",\n      documentName: \"\",\n      documentNumber: \"\",\n      issueDate: \"\",\n      expiryDate: \"\",\n      issuingAuthority: \"\",\n      filePath: \"\",\n      notes: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertDocument) => {\n      const response = await fetch('/api/documents', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create document');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents', personnelId] });\n      handleCloseModal();\n      toast({\n        title: \"Belge eklendi\",\n        description: \"Belge bilgisi başarıyla kaydedildi.\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertDocument> }) => {\n      const response = await fetch(`/api/documents/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update document');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents', personnelId] });\n      handleCloseModal();\n      toast({\n        title: \"Belge güncellendi\",\n        description: \"Belge bilgisi başarıyla güncellendi.\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/documents/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete document');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents', personnelId] });\n      toast({\n        title: \"Belge silindi\",\n        description: \"Belge başarıyla silindi.\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    setEditingDocument(null);\n    form.reset({\n      personnelId,\n      documentType: \"\",\n      documentName: \"\",\n      documentNumber: \"\",\n      issueDate: \"\",\n      expiryDate: \"\",\n      issuingAuthority: \"\",\n      filePath: \"\",\n      notes: \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleEdit = (document: Document) => {\n    setEditingDocument(document);\n    form.reset({\n      personnelId: document.personnelId,\n      documentType: document.documentType,\n      documentName: document.documentName,\n      documentNumber: document.documentNumber,\n      issueDate: document.issueDate,\n      expiryDate: document.expiryDate || \"\",\n      issuingAuthority: document.issuingAuthority,\n      filePath: document.filePath || \"\",\n      notes: document.notes || \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingDocument(null);\n    form.reset();\n  };\n\n  const onSubmit = async (data: InsertDocument) => {\n    try {\n      if (editingDocument) {\n        await updateMutation.mutateAsync({ id: editingDocument.id, data });\n      } else {\n        await createMutation.mutateAsync(data);\n      }\n    } catch (error) {\n      console.error('Error saving document:', error);\n    }\n  };\n\n  const getDocumentStatus = (document: Document) => {\n    if (!document.expiryDate) return { status: 'active', label: 'Aktif', color: 'bg-green-100 text-green-800' };\n    \n    const expiryDate = new Date(document.expiryDate);\n    const today = new Date();\n    const daysDiff = Math.ceil((expiryDate.getTime() - today.getTime()) / (1000 * 3600 * 24));\n\n    if (daysDiff < 0) {\n      return { status: 'expired', label: 'Süresi Dolmuş', color: 'bg-red-100 text-red-800' };\n    } else if (daysDiff <= 30) {\n      return { status: 'expiring', label: 'Süresi Doluyor', color: 'bg-orange-100 text-orange-800' };\n    } else {\n      return { status: 'active', label: 'Aktif', color: 'bg-green-100 text-green-800' };\n    }\n  };\n\n  const getDocumentTypeIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'kimlik': return <FileText className=\"h-4 w-4\" />;\n      case 'diploma': return <FileText className=\"h-4 w-4\" />;\n      case 'sertifika': return <FileText className=\"h-4 w-4\" />;\n      case 'sözleşme': return <FileText className=\"h-4 w-4\" />;\n      default: return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Belge Yönetimi\n          </CardTitle>\n          <CardDescription>\n            Personele ait belgeler ve süre takibi\n          </CardDescription>\n        </div>\n        <Button onClick={handleCreate} size=\"sm\" data-testid=\"button-add-document\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Ekle\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-4\">Yükleniyor...</div>\n        ) : !documents || documents.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <FileText className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n            <p>Henüz belge bulunmuyor.</p>\n            <p className=\"text-sm\">Yeni belge eklemek için \"Ekle\" butonunu kullanın.</p>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Belge Adı</TableHead>\n                <TableHead>Tür</TableHead>\n                <TableHead>Belge No</TableHead>\n                <TableHead>Veren Kurum</TableHead>\n                <TableHead>Son Kullanma</TableHead>\n                <TableHead>Durum</TableHead>\n                <TableHead className=\"text-right\">İşlemler</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {documents.map((document) => {\n                const status = getDocumentStatus(document);\n                return (\n                  <TableRow key={document.id}>\n                    <TableCell className=\"font-medium\">\n                      <div className=\"flex items-center gap-2\">\n                        {getDocumentTypeIcon(document.documentType)}\n                        {document.documentName}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{document.documentType}</Badge>\n                    </TableCell>\n                    <TableCell className=\"font-mono text-sm\">{document.documentNumber}</TableCell>\n                    <TableCell>{document.issuingAuthority}</TableCell>\n                    <TableCell>\n                      {document.expiryDate ? (\n                        <div className=\"flex items-center gap-1\">\n                          {status.status === 'expiring' && <AlertTriangle className=\"h-3 w-3 text-orange-500\" />}\n                          {status.status === 'expired' && <AlertTriangle className=\"h-3 w-3 text-red-500\" />}\n                          {status.status === 'active' && <CheckCircle className=\"h-3 w-3 text-green-500\" />}\n                          {new Date(document.expiryDate).toLocaleDateString('tr-TR')}\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground\">-</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={status.color}>\n                        {status.label}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center gap-2 justify-end\">\n                        {document.filePath && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            data-testid={`button-download-${document.id}`}\n                          >\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(document)}\n                          data-testid={`button-edit-document-${document.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(document.id)}\n                          data-testid={`button-delete-document-${document.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n\n      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"sm:max-w-[700px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              {editingDocument ? \"Belgeyi Düzenle\" : \"Yeni Belge Ekle\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"documentType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Belge Türü *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Tür seçin\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Kimlik\">Kimlik Belgesi</SelectItem>\n                          <SelectItem value=\"Diploma\">Diploma</SelectItem>\n                          <SelectItem value=\"Sertifika\">Sertifika</SelectItem>\n                          <SelectItem value=\"Sözleşme\">Sözleşme</SelectItem>\n                          <SelectItem value=\"Lisans\">Lisans/Ruhsat</SelectItem>\n                          <SelectItem value=\"Sigorta\">Sigorta Belgesi</SelectItem>\n                          <SelectItem value=\"Diğer\">Diğer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"documentName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Belge Adı *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Nüfus Cüzdanı\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"documentNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Belge/Seri No *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"12345678901\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"issuingAuthority\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Veren Kurum *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"T.C. İçişleri Bakanlığı\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"issueDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Veriliş Tarihi *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"expiryDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Son Kullanma Tarihi</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"filePath\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Dosya Yolu</FormLabel>\n                    <FormControl>\n                      <div className=\"flex items-center gap-2\">\n                        <Input \n                          placeholder=\"Belge dosyasının yolu...\" \n                          {...field} \n                        />\n                        <Button type=\"button\" variant=\"outline\" size=\"sm\">\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          Yükle\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notlar</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Ek bilgiler ve notlar...\" \n                        rows={3} \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex items-center gap-3 pt-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {(createMutation.isPending || updateMutation.isPending) \n                    ? \"Kaydediliyor...\" \n                    : (editingDocument ? \"Güncelle\" : \"Kaydet\")\n                  }\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={handleCloseModal}\n                >\n                  İptal\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}","size_bytes":17599},"client/src/components/Personnel/EducationManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Trash2, GraduationCap, Award, BookOpen } from \"lucide-react\";\nimport { insertEducationRecordSchema, type EducationRecord, type InsertEducationRecord } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertEducationRecordSchema.extend({\n  graduationYear: z.coerce.number().min(1950).max(new Date().getFullYear()),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface EducationManagementProps {\n  personnelId: string;\n}\n\nexport function EducationManagement({ personnelId }: EducationManagementProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<EducationRecord | null>(null);\n\n  const { data: educationRecords, isLoading } = useQuery<EducationRecord[]>({\n    queryKey: ['/api/education-records', personnelId],\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      personnelId,\n      schoolName: \"\",\n      department: \"\",\n      degree: \"\",\n      graduationYear: new Date().getFullYear(),\n      gpa: 0,\n      notes: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertEducationRecord) => {\n      const response = await fetch('/api/education-records', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create education record');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/education-records', personnelId] });\n      handleCloseModal();\n      toast({\n        title: \"Eğitim kaydı eklendi\",\n        description: \"Eğitim bilgisi başarıyla kaydedildi.\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertEducationRecord> }) => {\n      const response = await fetch(`/api/education-records/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update education record');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/education-records', personnelId] });\n      handleCloseModal();\n      toast({\n        title: \"Eğitim kaydı güncellendi\",\n        description: \"Eğitim bilgisi başarıyla güncellendi.\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/education-records/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete education record');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/education-records', personnelId] });\n      toast({\n        title: \"Eğitim kaydı silindi\",\n        description: \"Eğitim bilgisi başarıyla silindi.\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    setEditingRecord(null);\n    form.reset({\n      personnelId,\n      schoolName: \"\",\n      department: \"\",\n      degree: \"\",\n      graduationYear: new Date().getFullYear(),\n      gpa: 0,\n      notes: \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleEdit = (record: EducationRecord) => {\n    setEditingRecord(record);\n    form.reset({\n      personnelId: record.personnelId,\n      schoolName: record.schoolName,\n      department: record.department,\n      degree: record.degree,\n      graduationYear: record.graduationYear,\n      gpa: record.gpa || 0,\n      notes: record.notes || \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingRecord(null);\n    form.reset();\n  };\n\n  const onSubmit = async (data: FormData) => {\n    try {\n      if (editingRecord) {\n        await updateMutation.mutateAsync({ id: editingRecord.id, data });\n      } else {\n        await createMutation.mutateAsync(data);\n      }\n    } catch (error) {\n      console.error('Error saving education record:', error);\n    }\n  };\n\n  const getDegreeColor = (degree: string) => {\n    switch (degree.toLowerCase()) {\n      case 'lisans': return 'bg-blue-100 text-blue-800';\n      case 'yüksek lisans': return 'bg-green-100 text-green-800';\n      case 'doktora': return 'bg-purple-100 text-purple-800';\n      case 'lise': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-orange-100 text-orange-800';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div>\n          <CardTitle className=\"flex items-center gap-2\">\n            <GraduationCap className=\"h-5 w-5\" />\n            Eğitim Bilgileri\n          </CardTitle>\n          <CardDescription>\n            Personelin eğitim geçmişi ve akademik başarıları\n          </CardDescription>\n        </div>\n        <Button onClick={handleCreate} size=\"sm\" data-testid=\"button-add-education\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Ekle\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-4\">Yükleniyor...</div>\n        ) : !educationRecords || educationRecords.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <BookOpen className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n            <p>Henüz eğitim kaydı bulunmuyor.</p>\n            <p className=\"text-sm\">Yeni kayıt eklemek için \"Ekle\" butonunu kullanın.</p>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Okul / Kurum</TableHead>\n                <TableHead>Bölüm</TableHead>\n                <TableHead>Derece</TableHead>\n                <TableHead>Mezuniyet</TableHead>\n                <TableHead>Not Ort.</TableHead>\n                <TableHead className=\"text-right\">İşlemler</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {educationRecords.map((record) => (\n                <TableRow key={record.id}>\n                  <TableCell className=\"font-medium\">{record.schoolName}</TableCell>\n                  <TableCell>{record.department}</TableCell>\n                  <TableCell>\n                    <Badge className={getDegreeColor(record.degree)}>\n                      {record.degree}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{record.graduationYear}</TableCell>\n                  <TableCell>\n                    {record.gpa ? (\n                      <Badge variant=\"outline\">\n                        {record.gpa.toFixed(2)}\n                      </Badge>\n                    ) : (\n                      <span className=\"text-muted-foreground\">-</span>\n                    )}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex items-center gap-2 justify-end\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(record)}\n                        data-testid={`button-edit-education-${record.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(record.id)}\n                        data-testid={`button-delete-education-${record.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n\n      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <GraduationCap className=\"h-5 w-5\" />\n              {editingRecord ? \"Eğitim Kaydını Düzenle\" : \"Yeni Eğitim Kaydı\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"schoolName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Okul / Kurum Adı *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"İstanbul Üniversitesi\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bölüm *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Bilgisayar Mühendisliği\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"degree\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Derece *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Derece seçin\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Lise\">Lise</SelectItem>\n                          <SelectItem value=\"Ön Lisans\">Ön Lisans</SelectItem>\n                          <SelectItem value=\"Lisans\">Lisans</SelectItem>\n                          <SelectItem value=\"Yüksek Lisans\">Yüksek Lisans</SelectItem>\n                          <SelectItem value=\"Doktora\">Doktora</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"graduationYear\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mezuniyet Yılı *</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"1950\" max={new Date().getFullYear()} {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"gpa\"\n                  render={({ field }) => (\n                    <FormItem className=\"md:col-span-1\">\n                      <FormLabel>Not Ortalaması</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"0\" \n                          max=\"4\" \n                          step=\"0.01\" \n                          placeholder=\"3.25\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notlar</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Ek bilgiler...\" \n                        rows={3} \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex items-center gap-3 pt-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {(createMutation.isPending || updateMutation.isPending) \n                    ? \"Kaydediliyor...\" \n                    : (editingRecord ? \"Güncelle\" : \"Kaydet\")\n                  }\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={handleCloseModal}\n                >\n                  İptal\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}","size_bytes":14401},"client/src/components/Personnel/HealthManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Trash2, Heart, AlertTriangle, CheckCircle, FileText } from \"lucide-react\";\nimport { insertHealthRecordSchema, type HealthRecord, type InsertHealthRecord } from \"@shared/schema\";\n\ninterface HealthManagementProps {\n  personnelId: string;\n}\n\nexport function HealthManagement({ personnelId }: HealthManagementProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<HealthRecord | null>(null);\n\n  const { data: healthRecords, isLoading } = useQuery<HealthRecord[]>({\n    queryKey: ['/api/health-records', personnelId],\n  });\n\n  const form = useForm<InsertHealthRecord>({\n    resolver: zodResolver(insertHealthRecordSchema),\n    defaultValues: {\n      personnelId,\n      recordType: \"health_check\",\n      reportDate: \"\",\n      doctorName: \"\",\n      hospitalName: \"\",\n      diagnosis: \"\",\n      treatment: \"\",\n      notes: \"\",\n      nextCheckupDate: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertHealthRecord) => {\n      const response = await fetch('/api/health-records', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create health record');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/health-records', personnelId] });\n      handleCloseModal();\n      toast({\n        title: \"Sağlık kaydı eklendi\",\n        description: \"Sağlık bilgisi başarıyla kaydedildi.\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertHealthRecord> }) => {\n      const response = await fetch(`/api/health-records/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update health record');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/health-records', personnelId] });\n      handleCloseModal();\n      toast({\n        title: \"Sağlık kaydı güncellendi\",\n        description: \"Sağlık bilgisi başarıyla güncellendi.\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/health-records/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete health record');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/health-records', personnelId] });\n      toast({\n        title: \"Sağlık kaydı silindi\",\n        description: \"Sağlık bilgisi başarıyla silindi.\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    setEditingRecord(null);\n    form.reset({\n      personnelId,\n      recordType: \"health_check\",\n      reportDate: \"\",\n      doctorName: \"\",\n      hospitalName: \"\",\n      diagnosis: \"\",\n      treatment: \"\",\n      notes: \"\",\n      nextCheckupDate: \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleEdit = (record: HealthRecord) => {\n    setEditingRecord(record);\n    form.reset({\n      personnelId: record.personnelId,\n      recordType: record.recordType,\n      reportDate: record.reportDate,\n      doctorName: record.doctorName,\n      hospitalName: record.hospitalName,\n      diagnosis: record.diagnosis,\n      treatment: record.treatment || \"\",\n      notes: record.notes || \"\",\n      nextCheckupDate: record.nextCheckupDate || \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingRecord(null);\n    form.reset();\n  };\n\n  const onSubmit = async (data: InsertHealthRecord) => {\n    try {\n      if (editingRecord) {\n        await updateMutation.mutateAsync({ id: editingRecord.id, data });\n      } else {\n        await createMutation.mutateAsync(data);\n      }\n    } catch (error) {\n      console.error('Error saving health record:', error);\n    }\n  };\n\n  const getRecordTypeIcon = (type: string) => {\n    switch (type) {\n      case 'health_check': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'work_accident': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'occupational_disease': return <Heart className=\"h-4 w-4\" />;\n      default: return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getRecordTypeColor = (type: string) => {\n    switch (type) {\n      case 'health_check': return 'bg-green-100 text-green-800';\n      case 'work_accident': return 'bg-red-100 text-red-800';\n      case 'occupational_disease': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRecordTypeLabel = (type: string) => {\n    switch (type) {\n      case 'health_check': return 'Sağlık Kontrolü';\n      case 'work_accident': return 'İş Kazası';\n      case 'occupational_disease': return 'Meslek Hastalığı';\n      default: return type;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Heart className=\"h-5 w-5\" />\n            Sağlık Kayıtları\n          </CardTitle>\n          <CardDescription>\n            Personelin sağlık durumu, kontroller ve raporlar\n          </CardDescription>\n        </div>\n        <Button onClick={handleCreate} size=\"sm\" data-testid=\"button-add-health\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Ekle\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-4\">Yükleniyor...</div>\n        ) : !healthRecords || healthRecords.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Heart className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n            <p>Henüz sağlık kaydı bulunmuyor.</p>\n            <p className=\"text-sm\">Yeni kayıt eklemek için \"Ekle\" butonunu kullanın.</p>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Tarih</TableHead>\n                <TableHead>Tür</TableHead>\n                <TableHead>Doktor</TableHead>\n                <TableHead>Hastane/Klinik</TableHead>\n                <TableHead>Tanı</TableHead>\n                <TableHead>Sonraki Kontrol</TableHead>\n                <TableHead className=\"text-right\">İşlemler</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {healthRecords.map((record) => (\n                <TableRow key={record.id}>\n                  <TableCell>{new Date(record.reportDate).toLocaleDateString('tr-TR')}</TableCell>\n                  <TableCell>\n                    <Badge className={`${getRecordTypeColor(record.recordType)} flex items-center gap-1 w-fit`}>\n                      {getRecordTypeIcon(record.recordType)}\n                      {getRecordTypeLabel(record.recordType)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"font-medium\">{record.doctorName}</TableCell>\n                  <TableCell>{record.hospitalName}</TableCell>\n                  <TableCell>{record.diagnosis}</TableCell>\n                  <TableCell>\n                    {record.nextCheckupDate ? (\n                      new Date(record.nextCheckupDate).toLocaleDateString('tr-TR')\n                    ) : (\n                      <span className=\"text-muted-foreground\">-</span>\n                    )}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex items-center gap-2 justify-end\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(record)}\n                        data-testid={`button-edit-health-${record.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(record.id)}\n                        data-testid={`button-delete-health-${record.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n\n      <Dialog open={isModalOpen} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"sm:max-w-[700px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Heart className=\"h-5 w-5\" />\n              {editingRecord ? \"Sağlık Kaydını Düzenle\" : \"Yeni Sağlık Kaydı\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"recordType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Kayıt Türü *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Tür seçin\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"health_check\">Sağlık Kontrolü</SelectItem>\n                          <SelectItem value=\"work_accident\">İş Kazası</SelectItem>\n                          <SelectItem value=\"occupational_disease\">Meslek Hastalığı</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"reportDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rapor Tarihi *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"doctorName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Doktor Adı *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Dr. Ahmet Yılmaz\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"hospitalName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Hastane/Klinik *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Acıbadem Hastanesi\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nextCheckupDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sonraki Kontrol Tarihi</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"diagnosis\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tanı/Teşhis *</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Tanı ve bulgular...\" \n                        rows={3} \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"treatment\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tedavi/İlaç</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Uygulanan tedavi ve ilaçlar...\" \n                        rows={2} \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notlar</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Ek bilgiler ve notlar...\" \n                        rows={2} \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex items-center gap-3 pt-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {(createMutation.isPending || updateMutation.isPending) \n                    ? \"Kaydediliyor...\" \n                    : (editingRecord ? \"Güncelle\" : \"Kaydet\")\n                  }\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={handleCloseModal}\n                >\n                  İptal\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}","size_bytes":15944},"client/src/pages/Branch.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { BranchList } from \"@/components/Branch/BranchList\";\nimport { BranchModal } from \"@/components/Branch/BranchModal\";\nimport { BranchSettings } from \"@/components/Branch/BranchSettings\";\nimport { BranchAnalytics } from \"@/components/Branch/BranchAnalytics\";\nimport { Building, Plus, Settings, BarChart3 } from \"lucide-react\";\n\nexport default function Branch() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"branches\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingBranch, setEditingBranch] = useState<any>(null);\n\n  // Redirect to home if not authenticated\n  if (!isLoading && !isAuthenticated) {\n    return <div>Yetkilendirme gerekli. Lütfen giriş yapın.</div>;\n  }\n\n  if (isLoading) {\n    return <div>Yükleniyor...</div>;\n  }\n\n  const handleCreateBranch = () => {\n    setEditingBranch(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEditBranch = (branch: any) => {\n    setEditingBranch(branch);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingBranch(null);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"branch-page\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Şube Yönetimi</h1>\n          <p className=\"text-muted-foreground\">\n            Şubelerinizi yönetin, ayarları yapılandırın ve performansı analiz edin\n          </p>\n        </div>\n        <Button onClick={handleCreateBranch} data-testid=\"button-create-branch\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Yeni Şube\n        </Button>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"branches\" className=\"flex items-center gap-2\">\n            <Building className=\"h-4 w-4\" />\n            Şubeler\n          </TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Ayarlar\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Analitik\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"branches\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Şube Listesi</CardTitle>\n              <CardDescription>\n                Tüm şubelerinizi görüntüleyin ve yönetin\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <BranchList \n                onEdit={handleEditBranch}\n                onDelete={(id: string) => {\n                  // Handle delete logic here\n                  toast({\n                    title: \"Şube silindi\",\n                    description: \"Şube başarıyla sistemden kaldırıldı.\",\n                  });\n                }}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Şube Ayarları</CardTitle>\n              <CardDescription>\n                Şube bazlı konfigürasyonlar ve kısıtlamalar\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <BranchSettings />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Şube Performans Analizi</CardTitle>\n              <CardDescription>\n                Şubeler arası performans karşılaştırması ve analitik\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <BranchAnalytics />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {isModalOpen && (\n        <BranchModal\n          isOpen={isModalOpen}\n          onClose={handleCloseModal}\n          branch={editingBranch}\n          onSuccess={() => {\n            handleCloseModal();\n            toast({\n              title: editingBranch ? \"Şube güncellendi\" : \"Şube oluşturuldu\",\n              description: editingBranch \n                ? \"Şube bilgileri başarıyla güncellendi.\"\n                : \"Yeni şube başarıyla oluşturuldu.\",\n            });\n          }}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":5062}},"version":1}